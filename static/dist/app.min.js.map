{"version":3,"sources":["app.js"],"names":["angular","module","constant","OK","CREATED","ACCEPTED","BAD_REQUEST","UNAUTHORIZED","FORBIDDEN","NOT_FOUND","UNPROCESSABLE_ENTITY","TOO_MANY_REQUESTS","INTERNAL_SERVER_ERROR","BAD_GATEWAY","second","minute","hour","day","config","$stateProvider","$urlRouterProvider","$httpProvider","otherwise","interceptors","push","run","UserFactory","isEmpty","equals","currentUser","getUser","factory","MessagesFactory","urlMap","$resource","_messages","errorOnGetAccountsList","errorOnAddAccount","errorOnUpdateAccounts","errorOnDeleteAccount","successOnAddAccount","successOnUpdateAccount","successOnDeleteAccount","_accountsApi","accounts","get","method","deleteAccounts","remove","addAccounts","add","updateAccounts","account_id","save","exports","getAccountsList","page","limit","orderBy","filter","data","order_by","forEach","value","key","response","throwDeveloperWarn","statusErrorMsg","status","$promise","getAccountsListByIds","ids","throwInvalidParamsError","addAccount","account","successMsg","throwDeveloperError","removeAccounts","accountsIds","updateAccount","id","errorOnGetAnalyticsData","errorSaveQuery","errorLoadSavedQueries","_analyticsApi","analytics","getData","query","queryList","getList","getAnalyticsData","startDate","endDate","queriesList","macrosIdsList","queries","JSON","stringify","macrosIds","toString","start_date","end_date","macros_ids","results","saveQuery","name","params","getSavedQueriesList","errorOnGetBots","errorOnAddBot","errorOnDeleteBots","errorOnUpdateBots","successOnAddBot","successOnDeleteBots","successOnUpdateBot","_botsApi","bots","updateBot","update","getBotsList","errorOnGetCards","getBotsById","addBot","bot","bot_id","removeBots","botsIds","$q","_toJson","toJson","_removeMassiveCards","cardIds","promises","i","length","_cardsApi","card","card_id","delete","all","_removeSingleCard","cardId","successOnDeleteCard","errorOnDeleteCards","errorOnAddCard","errorOnUpdateCards","successOnAddCard","successOnUpdateCard","cards","addCard","getCardsList","raw_data","getCardsById","macrosId","macros_id","removeCards","cardsIds","isArray","updateCard","errorOnAddComment","errorOnCommentUpdate","errorOnGetCommentList","errorOnRemoveComment","_commentsApi","commentList","newComment","comment","comment_id","commentDelete","getCommentList","getCommentListByIds","addComment","updateComment","removeComment","REGIONS","code","LANGUAGES","title","PREPROCESSING","USER_ROLES","SPIDERS","APP","SOCKET_APP_URL","ENTITY_RECOGNITION","PROXY_TYPES","STORAGES","SPIDER_PARAMS","phantom","type","ftp","grab","imap","_api","dates","month","year","getMonth","bDateSettings","week","today","Date","getDate","getFullYear","format","range_delimiter","getSettings","getCalendarData","settings","HTTP_STATUS","$window","logout","location","replace","when","responseError","rejection","reject","_removeSingleFact","_factsApi","fact","fact_id","errorOnRemoveFact","_removeFactsMassive","factsMassiveDelete","errorOnFactUpdate","errorOnGetFactsList","errorOnAddFact","factsList","newFact","getFactsList","getFactsListByIds","getFactsByQuery","addFact","updateFact","updateFactsMassive","removeFacts","errorOnGetFeedsList","_feedsApi","feeds","getFeedsList","isAppend","concat","constantMap","errorOnGetData","unknownReportTypeError","_gatheringApi","searchPerson","searchCompany","sparkCompany","sparkIP","sparkTypes","sparkIPReport","sparkCompanyReport","types","person","report","regions","apiFunc","getReport","errorOnAddGroup","errorOnGroupUpdate","errorOnGetGroupList","errorOnRemoveGroup","_groupsApi","groupList","newGroup","group","group_id","groupDelete","getGroupList","getGroupListByIds","addGroup","updateGroup","removeGroup","MacrosFactory","_addMassiveLaunch","launch","parse","j","param","placeholders","_launchApi","newLaunch","_addSingleLaunch","errorOnAddScan","errorOnGetScanList","errorOnStopScan","errorOnUpdateScan","errorOnRemoveScan","launch_id","launchList","launchMassiveDelete","launchMassiveEnable","addLaunch","updateLaunch","removeLaunch","launchIds","getMacrosForLaunchList","getMacrosListByIds","assignLinkedMacrosToLaunchList","callback","then","macrosList","macros","getLaunchList","getLaunchListByIds","setLaunchEnableMassive","isEnableAction","is_enabled","errorOnMacrosUpdate","errorOnGetMacrosList","errorOnAddMacros","errorOnDebugStart","errorOnGetDebugInfo","errorOnRemoveMacros","_macrosApi","newMacros","macrosMassiveDelete","macrosMassivePublish","debug","start","getMacrosList","getPlaceholders","macrosIdsArr","getMacrosByQuery","addMacros","startDebug","updateMacros","updateMacrosMassive","setMacrosPublishMassive","isTargetAction","is_target_action","removeMacros","invalidParams","toaster","MESSAGES","getDefaultMessage","badRequest","unauthorized","internalServerError","unknownError","_messageTypes","success","error","info","warning","wait","_messagesTitles","message","pop","errorMsg","infoMsg","console","warn","NgTableParams","_getSorting","sorting","field","Object","keys","direction","_sortingDirection","asc","desc","defaultPage","defaultCount","tableParams","getDefaultParams","count","initNgTableParams","promisedCallback","defTableParams","total","$defer","resolve","setDefaultSorting","reload","errorOnGetPhotosList","errorOnAddPhoto","errorOnUpdatePhoto","errorOnDeletePhotos","successOnAddPhoto","successOnUpdatePhotos","successOnDeletePhotos","_photosApi","photos","updatePhoto","getPhotosList","getPhotosListByIds","addPhoto","photo","photo_id","removePhotos","photosIds","errorOnGetProfiles","successOnAddProfile","errorOnAddProfile","successOnEditProfile","errorOnEditProfile","successOnDeleteProfiles","errorOnDeleteProfile","_profilesApi","profiles","updateProfile","getProfilesList","getProfilesListByIds","addProfile","profile","profile_id","removeProfiles","profilesIds","_removeSingleProxy","_proxyApi","proxy","proxy_id","errorOnRemoveProxy","_removeProxyMassive","proxyMassiveDelete","errorOnProxyUpdate","errorOnGetProxyList","errorOnAddProxy","proxyList","newProxy","getProxyList","getProxyListByIds","getProxyByQuery","addProxy","updateProxy","updateProxyMassive","removeProxy","errorOnCheckScriptValid","errorOnStringifyObject","_scriptApi","scriptValidation","check","isValidScript","script","isList","json","removeFormatting","is_list","isCanStringify","obj","string","result","e","isCanParse","object","str","isPretty","spaces","errorOnAddSequence","errorOnSequenceUpdate","errorOnGetSequenceList","errorOnRemoveSequence","_sequencesApi","sequenceList","newSequence","sequence","sequence_id","sequenceDelete","getSequenceList","getSequenceListByIds","addSequence","updateSequence","removeSequence","errorOnAddSimcard","errorOnSimcardUpdate","errorOnGetSimcardList","errorOnRemoveSimcard","_simcardsApi","simcardList","newSimcard","simcard","simcard_id","simcardDelete","getSimcardList","getSimcardListByIds","addSimcard","updateSimcard","removeSimcard","channels","subscribe","channel","client","Faye","Client","_removeSingleTag","_tagsApi","tag","tag_id","errorOnRemoveTag","_removeTagMassive","tagMassiveDelete","errorOnTagUpdate","errorOnGetTagList","errorOnAddTag","tagList","newTag","getTagList","getTagListByIds","getTagByQuery","addTag","updateTag","updateTagMassive","removeTag","errorOnGetTargetsList","errorOnAddTarget","errorOnRemoveTarget","errorOnRestartTarget","_targetsApi","newTarget","targets","targetsDelete","target","restart","addTarget","getTargetsList","getTargetsById","removeTargets","targetIds","restartTarget","targetId","tags.add_tag","users.logout","macros.add_macros","facts.update_fact","social.connect","simcards.delete_simcard","macros.get_macros_placeholders","bots.add_bot","profiles.get_profiles","users.create_user","simcards.add_simcard","api.get_target_actions","users.get_users_list","rq_dashboard.list_jobs","launches.get_launches","rq_dashboard.list_workers","api.create_photos_grab_target","img.crop","api.update_photo","macros.macros_mass_publish","commons.validate_json","groups.delete_group","accounts.update_account","proxy.delete_proxy","photos.add_photo","macros.macros_mass_delete","social.remove_all_connections","targets.add_target","bots.get_bots","api.create_target","api.get_tags","security.login","proxy.get_proxy_list","social.remove_connection","profiles.delete_profiles","photos.delete_photos","simcards.update_simcard","facts.facts_mass_delete","api.get_accounts","security.logout","tags.update_tag","photos.update_photo","groups.update_group","social.login","static","proxy.update_proxy","comments.update_comment","cards.add_card","users.toggle_user","spark.get_entrepreneur_report","rq_dashboard.overview","spiders.save_data","bots.delete_bots","root.index_page","tags.tag_mass_delete","api.get_stats","rq_dashboard.requeue_all","tags.delete_tag","launches.launch_mass_delete","gathering.search_person","macros.get_macros_list","comments.delete_comment","sequences.update_sequence","proxy.proxy_mass_delete","rq_dashboard.empty_queue","api.add_account","facts.delete_fact","rq_dashboard.requeue_job_view","simcards.get_simcard_list","spiders.save_error","accounts.get_accounts","proxy.add_proxy","users.login","cards.delete_card","sequences.delete_sequence","accounts.add_account","sequences.get_sequence_from_file","rq_dashboard.compact_queue","api.update_account","macros.update_macros","users.register","targets.delete_targets","sequences.add_sequence","analytics.save_query","cards.update_card","groups.add_group","api.delete_accounts","dates.get_month_days","launches.launch_mass_enable","analytics.get_queries","users.login_facebook_connect","sequences.get_sequence_list","api.get_photos","users.login_as","rq_dashboard.list_queues","users.get_current_user","spark.get_company_report","facts.add_fact","macros.get_macros_debug_info","rq_dashboard.cancel_job_view","analytics.get_cards_freq","bots.update_bot","rq_dashboard.static","profiles.add_profile","users.login_facebook","spiders.save_debug_info","dates.get_calendar_data","analytics.get_cards_by_dates","tags.get_tag_list","social.connect_callback","api.get_targets","accounts.delete_accounts","facts.get_facts_list","social.login_callback","launches.update_launch","api.delete_photos","launches.add_launch","targets.get_targets","img.resize","comments.get_comment_list","photos.get_photos","gathering.search_company","analytics.delete_queries","users.register_html","macros.create_macros_from_file","macros.start_macros_debug","cards.get_cards","groups.get_group_list","profiles.update_profile","comments.add_comment","users.login_html","users.update_user","macros.get_macros_file","_removeMassiveUsers","Ids","_userApi","userState","user_id","_removeSingleUser","errorOnRemoveUser","_restoreMassiveUsers","restore","_restoreSingleUser","errorOnGetUser","errorOnGetUserList","errorOnCreateUser","errorOnUpdateUser","errorOnRestoreUser","user","createUser","updateUser","users","project_id","loginAs","remember","perform","getUsersList","getUsersById","userId","removeUsers","userIds","restoreUsers","generatePassword","password","possible","charAt","Math","floor","random","isAdmin","is_admin","roleId","directive","FilesFactory","restrict","templateUrl","link","scope","element","attrs","fileAccept","fileUploadBtnDesc","fileUploader","fileUploadFiledName","callbackHandler","$eval","fileUploaderCallback","handler","event","files","initFilesUpload","bind","$timeout","prepareFiles","fieldName","formData","FormData","file","append","isError","firstErrorCode","showMessageToUser","delay","invalidFileError","successFileUploadComplete","uploadProgressHandler","evt","lengthComputable","uploadProgress","round","loaded","uploadCompleteHandler","uploadFailedHandler","errorFileUpload","uploadCanceledHandler","infoUploadCanceled","uploadEvents","progress","load","abort","setFiles","clearFiles","makeFilesUpload","url","xhr","XMLHttpRequest","upload","addEventListener","open","onload","cleanUpAfterUpload","this","send","$state","elem","regex","RegExp","$watch","current","includes","sleep","className","addClass","$stateParams","controller","$scope","isNavbarCollapsed","href","getName","surname","username","getCurrentUserUrl","isCurrentUserAdmin","state","onEnter","$modal","go","AccountsFactory","accountData","accountsData","DatesFactory","NgTableUtilsFactory","defaultSorting","entity","resetSelectedItems","filters","created_at","reloadTableData","goToExternalLink","selectedAccounts","isExtendedFiltersOpen","selectAccount","isSelected","getSelectedItemsCount","toggleSelect","unSelectAccount","selectAllAccounts","toggleAllItemsSelected","selectedAccountsLength","unSelectAllAccounts","hasOwnProperty","filterList","resetFilter","toggleExtendedFilters","showEditModal","showAddModal","showRemoveModal","showRemoveMassiveModal","getDateTime","dateString","getTime","refreshData","m","y","calendarData","entityFactory","AnalyticsFactory","queriesListData","FeedsFactory","PERIOD","$sce","$location","$filter","_prepareQueries","shouldBeAnArrayError","_convertFromUnixTime","item","date","_bindOnClick","chart","chartId","container","click","_getMacrosIds","macrosArr","unrecognizedGraphError","filterParams","dropdownMacrosList","searchMacros","search","getQueriesLeftCount","maxQueriesCount","setPramsAsUrl","isObject","isDate","getParamsFromUrl","urlParams","split","resetParams","showSaveQueryModal","showLoadQueryModal","itemsPerPage","isBusy","isAllFeedsLoaded","showFeeds","unFormattedStartDate","unFormattedEndDate","formattedStartDate","dateFormat","formattedEndDate","loadNewFeedsPage","charts","line","_getDatesRange","dateArr","min","x","max","_selectGraphPoint","selectedPoints","getSelectedPoints","dateRange","_getQueryName","text","_prepareSeriesData","seriesList","k","series","seriesData","dataItem","_prepareAnalyticsOnGet","graphData","pointData","_prepareParamsForSend","createHighChartBox","Highcharts","Chart","buildChartData","analyticsData","makeChart","chartContainerId","renderTo","tooltip","xAxis","tickInterval","gridLineWidth","yAxis","plotOptions","allowPointSelect","datePopups","isStartDatePopupOpened","isEndDatePopupOpened","dateOptions","startingDay","showWeeks","openStartDatePopup","$event","preventDefault","stopPropagation","openEndDatePopup","trustAsHtml","getAnalytics","KEY_BACKSPACE","KEY_TAB","priority","require","$element","$attrs","ngModelController","maxTags","getTags","checkTags","maxTagsReached","placeholder","tagsInputScope","isolateScope","input","find","$observe","_maxTags","$modelValue","tags","events","trigger","attr","css","$watchCollection","on","keyCode","stopImmediatePropagation","hasFocus","ScriptFactory","toStringWithBreaks","array","join","BotsFactory","botsData","updated_at","updateBots","selectedBots","toggleItemSelect","unSelectBot","selectBots","selectAllBots","selectedBotsLength","unSelectAllBots","CardFactory","cardsData","selectedCards","unSelectCard","selectCards","selectAllCards","selectedCardsLength","unSelectAllCards","trimLength","maxLength","substr","isParsable","CommentsFactory","commentData","selectedComment","selectComment","unSelectComment","selectAllComment","unSelectAllComment","selectedCommentLength","TargetsFactory","addBots","spacingLeft","spacingRight","spacingBottom","marginLeft","marginRight","marginBottom","paddingLeft","paddingRight","paddingBottom","labels","enabled","legend","color","FactsFactory","factData","factsData","selectedFacts","selectFact","unSelectFact","selectAllFacts","selectedFactsLength","unSelectAllFacts","size","GatheringFactory","filterObject","undefined","checkArray","prototype","call","normalizeHref","host","gathering","short","is_acting","history_search","search_type","company","exact_search","egrpo_included","sources","isEpandedSearch","searchType","searching","makeSearch","clearSources","source","panel","isOpen","isDisabled","toggleExpandedSearch","getRegionName","showReport","GroupsFactory","groupData","selectedGroup","selectGroup","unSelectGroup","selectAllGroup","selectedGroupLength","unSelectAllGroup","reloadTableDatac","LaunchFactory","launchData","macrosData","created_to","last_launch_at","last_launch_to","next_launch_at","next_launch_to","selectedLaunch","selectLaunch","unSelectLaunch","selectAllLaunch","selectedLaunchLength","unSelectAllLaunch","stop","refresh","createdRangeStart","createdStartSource","createdRangeEnd","createdEndSource","launchRangeStart","launchStartSource","launchRangeEnd","launchEndSource","nextLaunchRangeStart","nextLaunchStartSource","nextLaunchRangeEnd","nextLaunchEndSource","launchState","placeholdersData","selectedMacros","selectMacros","saveToFile","unSelectMacros","selectAllMacros","selectedMacrosLength","unSelectAllMacros","log","showDebugLaunchModal","macrosUploadUrl","preprocessingValue","preprocessing","PhotosFactory","photosData","selectedPhotos","selectPhoto","unSelectPhoto","selectAllPhotos","selectedPhotosLength","unSelectAllPhotos","showExifModal","ProfilesFactory","profileData","profilesData","updateProfiles","selectedProfiles","unSelectProfile","selectProfiles","selectAllProfiles","selectedProfilesLength","unSelectAllProfiles","fixFriendsUrl","friend","parser","hostname","protocol","document","createElement","MAX_LENGTH","ProxyFactory","proxyData","selectedProxy","selectProxy","unSelectProxy","selectAllProxy","selectedProxyLength","unSelectAllProxy","SequencesFactory","sequenceData","selectedSequence","selectSequence","unSelectSequence","selectAllSequence","unSelectAllSequence","selectedSequenceLength","SimcardsFactory","simcardData","selectedSimcard","selectSimcard","unSelectSimcard","selectAllSimcard","selectedSimcardLength","unSelectAllSimcard","TagsFactory","tagData","selectedTag","selectTag","unSelectTag","selectAllTag","selectedTagLength","unSelectAllTag","targetsData","selectedTargets","getStatusAlias","TARGETS_STATUSES","unSelectTargets","selectTargets","selectedTargetsLength","unSelectAllTargets","selectAllTargets","userData","selectedUsers","unSelectUser","selectUsers","showRestoreModal","showRestoreMassiveModal","v","selectAllUsers","selectedUsersLength","unSelectAllUsers","$modalInstance","prepareForSave","args","dataPreview","pack","editorOptions","lineWrapping","lineNumbers","mode","cancel","dismiss","isValid","close","prepareAccountOnGet","refreshCodeMirrorOnLoad","isLoaded","isLoadError","selectedAccountsList","accountsIdsList","_parseDate","dateStr","expectFormat","unknownDateFormatError","lastIndexOf","indexOf","queryObj","resolveParam","match","isString","_prepareParamsForUrl","_goToLoadedState","loadQuery","selectedQuery","queriesNotAnArrayError","_prepareForSave","_goToPrevState","querySuccessSaved","_getTagIds","selectedTagList","dropdownTagList","searchTag","tag_ids","selectedBotsList","botsIdsList","prepareOnGet","selectedCardsList","usersIdsList","selectedCommentList","commentIdsList","genderList","countriesList","selectedFactsList","factIdsList","selectedGroupList","groupIdsList","_getIdsList","launchSettings","selectedMacrosList","idField","arrayDiff","fromArr","toArr","mergeParamsAndPlaceholders","placeholdersGroupArr","diffArr","placeholdersArr","paramsArr","newPlaceholder","prepareLaunchOnGet","isValidScriptParams","launchIdsList","selectedLaunchList","$document","deleteEmptyValues","script_preview","getUrlRefer","referrer","parseUrlParams","path","$$path","hash","$$url","decodeURIComponent","indexRegExp","paramNameRegExp","paramIndex","exec","paramName","paramValue","getMacrosFromParams","errorScriptParsing","getObjectFromArr","arr","_initSelects","spider","macrosSuccessfulSaved","macrosSaveFailed","resetSpiderParams","spider_params","selectedMacrosParams","use_tor","getSpiderParamLabel","spiderParams","showLastReport","prepareMacrosOnGet","isEmptyValue","toLowerCase","exif","selectedPhotosList","photosIdsList","selectedProfilesList","profilesIdsList","proxyUploadList","selectedProxyList","proxyIdsList","body","window","localStorage","getItem","removeItem","File","FileList","getElementById","onclick","alert","onchange","fileToLoad","reader","FileReader","fileLoadedEvent","readAsText","selectedSequenceList","sequenceIdsList","selectedSimcardList","simcardIdsList","tagIdsList","targetSettings","selectedMacrosId","selectedTargetsList","targetsIdsList","makeUpdate","newPassword","newPasswordConf","selectedRoles","roles","checked","map","el","isNewPasswordError","selectedUsersList"],"mappings":"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","file":"app.min.js","sourcesContent":["'use strict';\n\nangular.module('app', [\n    //configs\n    'app.config.url_map',\n    'app.config.constants',\n\n    //modules\n    'app.errors',\n    'app.header',\n    'app.messages',\n    'app.transition',\n    'app.templates',\n\n    //pages\n    'app.pages.users',\n    'app.pages.cards',\n    'app.pages.macros',\n    'app.pages.analytics',\n    'app.pages.launch',\n    'app.pages.accounts',\n    'app.pages.gathering',\n    'app.pages.facts',\n    'app.pages.bots',\n    'app.pages.profiles',\n    'app.pages.photos',\n    'app.pages.targets',\n    'app.pages.proxy',\n    'app.pages.tags',\n    'app.pages.dashboard',\n    'app.pages.simcards',\n    'app.pages.groups',\n    'app.pages.comments',\n    'app.pages.sequences',\n\n    //factories\n    'app.user.factory',\n    'app.socket.factory',\n    'app.card.factory',\n    'app.macros.factory',\n    'app.launch.factory',\n    'app.analytics.factory',\n    'app.feeds.factory',\n    'app.accounts.factory',\n    'app.gathering.factory',\n    'app.dates.factory',\n    'app.script.factory',\n    'app.ng-table-utils',\n    'app.files.factory',\n    'app.files.uploader',\n    'app.facts.factory',\n    'app.bots.factory',\n    'app.profiles.factory',\n    'app.photos.factory',\n    'app.targets.factory',\n    'app.proxy.factory',\n    'app.tags.factory',\n    'app.simcards.factory',\n    'app.groups.factory',\n    'app.comments.factory',\n    'app.sequences.factory',\n\n    //external libs\n    'angular-loading-bar',\n    'ui.select',\n    'ngAnimate',\n    'anim-in-out',\n    'ui.router',\n    'ngResource',\n    'ui.bootstrap',\n    'ui.codemirror',\n    'ngTagsInput',\n    'infinite-scroll',\n    'bdate',\n    'checklist-model'\n])\n\n    .constant('HTTP_STATUS', {\n        OK: 200,\n        CREATED: 201,\n        ACCEPTED: 202,\n        BAD_REQUEST: 400,\n        UNAUTHORIZED: 401,\n        FORBIDDEN: 403,\n        NOT_FOUND: 404,\n        UNPROCESSABLE_ENTITY: 422,\n        TOO_MANY_REQUESTS: 429,\n        INTERNAL_SERVER_ERROR: 500,\n        BAD_GATEWAY: 502\n    })\n\n    .constant('PERIOD', {\n        second: 1000,\n        minute: 60000,\n        hour: 3600000,\n        day: 86400000\n    })\n\n    .config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function ($stateProvider, $urlRouterProvider, $httpProvider) {\n        $urlRouterProvider.otherwise('/dashboard');\n        $httpProvider.interceptors.push('errorsInterceptors');\n    }])\n\n    .run(['UserFactory', function (UserFactory) {\n        var isEmpty = angular.equals({}, UserFactory.currentUser);\n        if (isEmpty || !UserFactory.currentUser) UserFactory.getUser();\n    }])\n;\n\n'use strict';\n\nangular.module('app.accounts.factory', [])\n    .factory('AccountsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetAccountsList: 'Cannot get accounts',\n            errorOnAddAccount: 'Cannot add account',\n            errorOnUpdateAccounts: 'Cannot update accounts',\n            errorOnDeleteAccount: 'Cannot remove account',\n            successOnAddAccount: 'Аккаунт успешно добавлен',\n            successOnUpdateAccount: 'Аккаунт успешно обновлен',\n            successOnDeleteAccount: 'Аккаунт успешно удалён'\n        };\n\n        var _accountsApi = {\n            accounts: $resource(urlMap['accounts.get_accounts'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            deleteAccounts: $resource(urlMap['accounts.delete_accounts'],\n                {},\n                {\n                    remove: {method: 'DELETE'}\n                }\n            ),\n            addAccounts: $resource(urlMap['accounts.add_account'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }\n            ),\n            updateAccounts: $resource(urlMap['accounts.update_account'],\n                {account_id: '@account_id'},\n                {\n                    save: {method: 'PUT'}\n                }\n            )\n        };\n\n        var exports = {\n            getAccountsList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _accountsApi.accounts.get(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetAccountsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getAccountsListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _accountsApi.accounts.get({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetAccountsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addAccount: function (account) {\n                if (!account) return MessagesFactory.throwInvalidParamsError();\n\n                return _accountsApi.addAccounts.add(account, function () {\n                    MessagesFactory.successMsg(_messages.successOnAddAccount);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnAddAccount);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeAccounts: function (accountsIds) {\n                if (!accountsIds) return MessagesFactory.throwInvalidParamsError();\n\n                return _accountsApi.deleteAccounts.remove({ids: accountsIds}, function () {\n                    MessagesFactory.successMsg(_messages.successOnDeleteAccount);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnDeleteAccount);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateAccount: function (account) {\n                if (!account) return MessagesFactory.throwInvalidParamsError();\n\n                return _accountsApi.updateAccounts.save({account_id: account.id}, account, function () {\n                    MessagesFactory.successMsg(_messages.successOnUpdateAccount);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnUpdateAccounts);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n    }])\n;\nangular.module('app.analytics.factory', [])\n\n    .factory('AnalyticsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetAnalyticsData: 'Cannot get analytics data',\n            errorSaveQuery: 'Cannot save analytics query',\n            errorLoadSavedQueries: 'Cannot get saved queries list'\n        };\n\n        var _analyticsApi = {\n            analytics: $resource(urlMap['analytics.get_cards_freq'],\n                {},\n                {\n                    getData: {method: 'GET'}\n                }),\n            query: $resource(urlMap['analytics.save_query'],\n                {},\n                {\n                    save: {method: 'POST'}\n                }),\n            queryList: $resource(urlMap['analytics.get_queries'],\n                {},\n                {\n                    getList: {method: 'GET'}\n                })\n        };\n\n        var exports = {\n            data: [],\n            getAnalyticsData: function (startDate, endDate, queriesList, macrosIdsList) {\n                if (!startDate || !endDate || !queriesList) return MessagesFactory.throwInvalidParamsError();\n\n                var queries = JSON.stringify(queriesList);\n                var macrosIds = (!!macrosIdsList) ? macrosIdsList.toString() : null;\n\n                return _analyticsApi.analytics.getData({\n                    start_date: startDate,\n                    end_date: endDate,\n                    queries: queries,\n                    macros_ids: macrosIds\n                }, function (data) {\n                    exports.data = data.results;\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetAnalyticsData);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            saveQuery: function (name, params) {\n                return _analyticsApi.query.save({name: name, params: params}, function () {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorSaveQuery);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getSavedQueriesList: function () {\n                return _analyticsApi.queryList.getList({}, function () {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorLoadSavedQueries);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.bots.factory', [])\n    .factory('BotsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetBots: 'Cannot get bots',\n            errorOnAddBot: 'Cannot add bot',\n            errorOnDeleteBots: 'Cannot delete bots',\n            errorOnUpdateBots: 'Cannot update bots',\n            successOnAddBot: 'Бот успешно добавлен',\n            successOnDeleteBots: 'Боты успешно удалены',\n            successOnUpdateBot: 'Бот успешно обновлен'\n        };\n\n        var _botsApi = {\n            bots: $resource(urlMap['bots.get_bots'],\n                {},\n                {\n                    getList: {method: 'GET'},\n                    add: {method: 'POST'},\n                    remove: {method: 'DELETE'}\n                }\n            ),\n            updateBot: $resource(urlMap['bots.update_bot'],\n                {id: '@id'},\n                {\n                    update: {method: 'PUT'}\n                }\n            )\n        };\n\n        var exports = {\n            getBotsList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _botsApi.bots.getList(data, function (data) {\n                //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnGetCards);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getBotsById: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _botsApi.bots.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetBots);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addBot: function (bot) {\n                if (!bot) return MessagesFactory.throwInvalidParamsError();\n\n                return _botsApi.bots.add(bot, function () {\n                    MessagesFactory.successMsg(_messages.successOnAddBot);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnAddBot);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateBot: function (bot) {\n                if (!bot) return MessagesFactory.throwInvalidParamsError();\n\n                return _botsApi.updateBot.update({bot_id: bot.id}, bot, function () {\n                    MessagesFactory.successMsg(_messages.successOnUpdateBot);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnUpdateBots);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeBots: function (botsIds) {\n                if (!botsIds) return MessagesFactory.throwInvalidParamsError();\n\n                return _botsApi.bots.remove({ids: botsIds}, function () {\n                    MessagesFactory.successMsg(_messages.successOnDeleteBots);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnDeleteBots);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n\n        return exports;\n    }])\n;\n'use strict';\n\nangular.module('app.card.factory', [])\n    .factory('CardFactory', ['MessagesFactory', 'urlMap', '$resource', '$q', function (MessagesFactory, urlMap, $resource, $q) {\n\n        var _messages = {\n            errorOnGetCards: 'Cannot get cards',\n            errorOnAddCard: 'Cannot add card',\n            errorOnDeleteCards: 'Cannot delete cards',\n            errorOnUpdateCards: 'Cannot update cards',\n            successOnAddCard: 'Карточка успешно добавлена',\n            successOnDeleteCard: 'Карточка успешно удалена',\n            successOnUpdateCard: 'Карточка успешно обновлена'\n        };\n\n        function _toJson(data) {\n            return angular.toJson(data, true);\n        }\n\n        var _cardsApi = {\n            cards: $resource(urlMap['cards.get_cards'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            addCard: $resource(urlMap['cards.add_card'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }\n            ),\n            card: $resource(urlMap['cards.update_card'],\n                {card_id: '@card_id'},\n                {\n                    update: {method: 'PUT'},\n                    remove: {method: 'DELETE'}\n                }\n            )\n        };\n\n        var exports = {\n            getCardsList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _cardsApi.cards.get(data, function (data) {\n                    // FIXME: maybe it's be better to do this on a backend\n                    if (data.results) {\n                        for (var i = 0; i < data.results.length; i++) {\n                            data.results[i].raw_data = data.results[i].data;\n                            data.results[i].data = _toJson(data.results[i].data);\n                        }\n                    }\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnGetCards);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getCardsById: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _cardsApi.cards.get({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetCards);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addCard: function (data, macrosId) {\n                return _cardsApi.addCard.add({data: data, macros_id: macrosId}, function () {\n                    if (!data || !macrosId) return MessagesFactory.throwInvalidParamsError();\n\n                    MessagesFactory.successMsg(_messages.successOnAddCard);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnAddCard);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeCards: function (cardsIds) {\n                if (!cardsIds) return MessagesFactory.throwInvalidParamsError();\n\n                if (!angular.isArray(cardsIds)) cardsIds = [cardsIds];\n\n                if (cardsIds.length > 1) {\n                    return _removeMassiveCards(cardsIds);\n                } else {\n                    return _removeSingleCard(cardsIds[0]);\n                }\n            },\n            updateCard: function (card) {\n                if (!card) return MessagesFactory.throwInvalidParamsError();\n\n                return _cardsApi.card.update({card_id: card.id, data: card.data}, function () {\n                    MessagesFactory.successMsg(_messages.successOnUpdateCard);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnUpdateCards);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        function _removeMassiveCards(cardIds) {\n            var promises = [];\n\n            for (var i = 0; i < cardIds.length; i++) {\n                promises.push(_cardsApi.card.remove({card_id: cardIds[i], \"delete\": true}).$promise);\n            }\n\n            return $q.all(promises);\n        }\n\n        function _removeSingleCard(cardId) {\n            return _cardsApi.card.remove({card_id: cardId}, function () {\n                MessagesFactory.successMsg(_messages.successOnDeleteCard);\n            }, function (response) {\n                MessagesFactory.throwDeveloperError(_messages.errorOnDeleteCards);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        return exports;\n    }])\n;\nangular.module('app.comments.factory', [])\n\n    .factory('CommentsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnAddComment: 'Cannot add new comment',\n            errorOnCommentUpdate: 'Cannot update comment',\n            errorOnGetCommentList: 'Cannot get comment list',\n            errorOnRemoveComment: 'Cannot remove comment'\n        };\n\n        var _commentsApi = {\n            commentList: $resource(urlMap['comments.get_comment_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newComment: $resource(urlMap['comments.add_comment'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            comment: $resource(urlMap['comments.update_comment'],\n                {comment_id: '@comment_id'},\n                {\n                    update: {method: 'PUT'}\n                }),\n            commentDelete: $resource(urlMap['comments.delete_comment'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getCommentList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _commentsApi.commentList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetCommentList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getCommentListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _commentsApi.commentList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetCommentList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addComment: function (comment) {\n                if (!comment) return MessagesFactory.throwInvalidParamsError();\n\n                return _commentsApi.newComment.add(comment, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddComment);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateComment: function (comment) {\n                if (!comment) return MessagesFactory.throwInvalidParamsError();\n\n                return _commentsApi.comment.update({comment_id: comment.id}, comment, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnCommentUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeComment: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _commentsApi.commentDelete.remove({ids: ids}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveComment);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\nangular.module(\"app.config.constants\", [])\n\n.constant(\"constantMap\", {\n\t\"REGIONS\": [\n\t\t{\n\t\t\t\"code\": \"01\",\n\t\t\t\"name\": \"Республика Адыгея\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"02\",\n\t\t\t\"name\": \"Республика Башкортостан\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"03\",\n\t\t\t\"name\": \"Республика Бурятия\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"04\",\n\t\t\t\"name\": \"Республика Алтай\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"05\",\n\t\t\t\"name\": \"Республика Дагестан\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"06\",\n\t\t\t\"name\": \"Республика Ингушетия\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"07\",\n\t\t\t\"name\": \"Кабардино-Балкарская республика\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"08\",\n\t\t\t\"name\": \"Республика Калмыкия\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"09\",\n\t\t\t\"name\": \"Карачаево-Черкесская республика\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"10\",\n\t\t\t\"name\": \"Республика Карелия\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"11\",\n\t\t\t\"name\": \"Республика Коми\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"12\",\n\t\t\t\"name\": \"Республика Марий Эл\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"13\",\n\t\t\t\"name\": \"Республика Мордовия\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"14\",\n\t\t\t\"name\": \"Республика Саха (Якутия)\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"15\",\n\t\t\t\"name\": \"Республика Северная Осетия — Алания\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"16\",\n\t\t\t\"name\": \"Республика Татарстан\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"17\",\n\t\t\t\"name\": \"Республика Тыва\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"18\",\n\t\t\t\"name\": \"Удмуртская республика\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"19\",\n\t\t\t\"name\": \"Республика Хакасия\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"20\",\n\t\t\t\"name\": \"Чеченская республика\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"21\",\n\t\t\t\"name\": \"Чувашская республика\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"22\",\n\t\t\t\"name\": \"Алтайский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"23\",\n\t\t\t\"name\": \"Краснодарский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"24\",\n\t\t\t\"name\": \"Красноярский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"25\",\n\t\t\t\"name\": \"Приморский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"26\",\n\t\t\t\"name\": \"Ставропольский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"27\",\n\t\t\t\"name\": \"Хабаровский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"28\",\n\t\t\t\"name\": \"Амурская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"29\",\n\t\t\t\"name\": \"Архангельская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"30\",\n\t\t\t\"name\": \"Астраханская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"31\",\n\t\t\t\"name\": \"Белгородская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"32\",\n\t\t\t\"name\": \"Брянская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"33\",\n\t\t\t\"name\": \"Владимирская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"34\",\n\t\t\t\"name\": \"Волгоградская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"35\",\n\t\t\t\"name\": \"Вологодская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"36\",\n\t\t\t\"name\": \"Воронежская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"37\",\n\t\t\t\"name\": \"Ивановская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"38\",\n\t\t\t\"name\": \"Иркутская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"39\",\n\t\t\t\"name\": \"Калининградская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"40\",\n\t\t\t\"name\": \"Калужская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"41\",\n\t\t\t\"name\": \"Камчатский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"42\",\n\t\t\t\"name\": \"Кемеровская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"43\",\n\t\t\t\"name\": \"Кировская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"44\",\n\t\t\t\"name\": \"Костромская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"45\",\n\t\t\t\"name\": \"Курганская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"46\",\n\t\t\t\"name\": \"Курская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"47\",\n\t\t\t\"name\": \"Ленинградская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"48\",\n\t\t\t\"name\": \"Липецкая область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"49\",\n\t\t\t\"name\": \"Магаданская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"50\",\n\t\t\t\"name\": \"Московская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"51\",\n\t\t\t\"name\": \"Мурманская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"52\",\n\t\t\t\"name\": \"Нижегородская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"53\",\n\t\t\t\"name\": \"Новгородская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"54\",\n\t\t\t\"name\": \"Новосибирская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"55\",\n\t\t\t\"name\": \"Омская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"56\",\n\t\t\t\"name\": \"Оренбургская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"57\",\n\t\t\t\"name\": \"Орловская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"58\",\n\t\t\t\"name\": \"Пензенская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"59\",\n\t\t\t\"name\": \"Пермский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"60\",\n\t\t\t\"name\": \"Псковская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"61\",\n\t\t\t\"name\": \"Ростовская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"62\",\n\t\t\t\"name\": \"Рязанская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"63\",\n\t\t\t\"name\": \"Самарская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"64\",\n\t\t\t\"name\": \"Саратовская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"65\",\n\t\t\t\"name\": \"Сахалинская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"66\",\n\t\t\t\"name\": \"Свердловская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"67\",\n\t\t\t\"name\": \"Смоленская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"68\",\n\t\t\t\"name\": \"Тамбовская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"69\",\n\t\t\t\"name\": \"Тверская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"70\",\n\t\t\t\"name\": \"Томская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"71\",\n\t\t\t\"name\": \"Тульская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"72\",\n\t\t\t\"name\": \"Тюменская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"73\",\n\t\t\t\"name\": \"Ульяновская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"74\",\n\t\t\t\"name\": \"Челябинская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"75\",\n\t\t\t\"name\": \"Забайкальский край\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"76\",\n\t\t\t\"name\": \"Ярославская область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"77\",\n\t\t\t\"name\": \"Москва\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"78\",\n\t\t\t\"name\": \"Санкт-Петербург\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"79\",\n\t\t\t\"name\": \"Еврейская автономная область\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"83\",\n\t\t\t\"name\": \"Ненецкий автономный округ\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"86\",\n\t\t\t\"name\": \"Ханты-Мансийский автономный округ - Югра\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"87\",\n\t\t\t\"name\": \"Чукотский автономный округ\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"89\",\n\t\t\t\"name\": \"Ямало-Ненецкий автономный округ\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"91\",\n\t\t\t\"name\": \"Республика Крым\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"92\",\n\t\t\t\"name\": \"Севастополь\"\n\t\t},\n\t\t{\n\t\t\t\"code\": \"99\",\n\t\t\t\"name\": \"Байконур (Казахстан)\"\n\t\t}\n\t],\n\t\"LANGUAGES\": [\n\t\t{\n\t\t\t\"value\": \"ru\",\n\t\t\t\"title\": \"Русский\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"en\",\n\t\t\t\"title\": \"Английский\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"de\",\n\t\t\t\"title\": \"Немецкий\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"fr\",\n\t\t\t\"title\": \"Французский\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"es\",\n\t\t\t\"title\": \"Испанский\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"pt\",\n\t\t\t\"title\": \"Португальский\"\n\t\t}\n\t],\n\t\"PREPROCESSING\": [\n\t\t{\n\t\t\t\"value\": \"\",\n\t\t\t\"title\": \"Ничего не вырезать\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"RemoveHTMLCounters\",\n\t\t\t\"title\": \"Вырезать JS-счетчики\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"RemoveScriptTags\",\n\t\t\t\"title\": \"Вырезать HTML-скрипты\"\n\t\t}\n\t],\n\t\"USER_ROLES\": [\n\t\t{\n\t\t\t\"id\": \"admin\",\n\t\t\t\"name\": \"Администратор\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"staff\",\n\t\t\t\"name\": \"Персонал\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"user\",\n\t\t\t\"name\": \"Пользователь\"\n\t\t}\n\t],\n\t\"SPIDERS\": [\n\t\t{\n\t\t\t\"value\": \"grab\",\n\t\t\t\"title\": \"grab\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"phantom\",\n\t\t\t\"title\": \"phantom\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"imap\",\n\t\t\t\"title\": \"imap\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"ftp\",\n\t\t\t\"title\": \"ftp\"\n\t\t}\n\t],\n\t\"APP\": {\n\t\t\"SOCKET_APP_URL\": \"http://localhost:5001\"\n\t},\n\t\"ENTITY_RECOGNITION\": [\n\t\t{\n\t\t\t\"value\": \"emails\",\n\t\t\t\"title\": \"Емайлы\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"hashtags\",\n\t\t\t\"title\": \"Хэштэги\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"phone_numbers\",\n\t\t\t\"title\": \"Номера телефонов\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"credit_cards\",\n\t\t\t\"title\": \"Номера кредитных карт\"\n\t\t}\n\t],\n\t\"PROXY_TYPES\": [\n\t\t{\n\t\t\t\"value\": \"http\",\n\t\t\t\"title\": \"http\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"socks5\",\n\t\t\t\"title\": \"socks5\"\n\t\t}\n\t],\n\t\"STORAGES\": [\n\t\t{\n\t\t\t\"value\": \"card\",\n\t\t\t\"title\": \"Карточки\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"profile\",\n\t\t\t\"title\": \"Профили \"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"photo\",\n\t\t\t\"title\": \"Фотобанк\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"fact\",\n\t\t\t\"title\": \"Сущности\"\n\t\t},\n\t\t{\n\t\t\t\"value\": \"sequence\",\n\t\t\t\"title\": \"Списки\"\n\t\t}\n\t],\n\t\"SPIDER_PARAMS\": {\n\t\t\"phantom\": [\n\t\t\t{\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"value\": \"user_agent\",\n\t\t\t\t\"title\": \"Юзер агент\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"value\": \"window_size\",\n\t\t\t\t\"title\": \"Разрешение экрана\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\"value\": \"load_images\",\n\t\t\t\t\"title\": \"Загружать изображения\"\n\t\t\t}\n\t\t],\n\t\t\"ftp\": [],\n\t\t\"grab\": [\n\t\t\t{\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"value\": \"user_agent\",\n\t\t\t\t\"title\": \"Юзер агент\"\n\t\t\t}\n\t\t],\n\t\t\"imap\": []\n\t}\n})\n\n;\n'use strict';\n\nangular.module('app.dates.factory', [])\n    .factory('DatesFactory', ['urlMap', '$resource', 'MessagesFactory', function (urlMap, $resource, MessagesFactory) {\n\n        var _api = {\n            dates: $resource(urlMap['dates.get_month_days'],\n                {month: '@month', year: '@year'},\n                {\n                    getMonth: {method: 'GET'}\n                })\n        };\n\n        var bDateSettings = {\n            \"week\": [\"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\", \"Вс\"],\n            \"today\": {\n                \"day\": new Date().getDate(),\n                \"month\": new Date().getMonth() + 1,\n                \"year\": new Date().getFullYear()\n            },\n            \"format\": \"yyyy-MM-dd\",\n            \"range_delimiter\": \" - \"\n        };\n\n        var exports = {\n            getSettings: function () {\n                return bDateSettings;\n            },\n            getCalendarData: function (month, year) {\n                var settings = exports.getSettings();\n\n                return _api.dates.getMonth({\n                    month: month || settings.today.month,\n                    year: year || settings.today.year\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n    }])\n;\n'use strict';\n\nangular.module('app.errors', [])\n\n    .factory('errorsInterceptors', ['HTTP_STATUS', '$q', '$window', function (HTTP_STATUS, $q, $window) {\n\n        function logout() {\n            //localStorage.clear();\n            $window.location.replace('/users/login/');\n        }\n\n        return {\n            response: function (response) {\n                if (response.status === HTTP_STATUS.UNAUTHORIZED) {\n                    logout();\n                }\n                return response || $q.when(response);\n            },\n            responseError: function (rejection) {\n                if (rejection.status === HTTP_STATUS.UNAUTHORIZED) {\n                    logout();\n                }\n                return $q.reject(rejection);\n            }\n        };\n    }])\n;\nangular.module('app.facts.factory', [])\n\n    .factory('FactsFactory', ['MessagesFactory', 'urlMap', '$resource', '$q', function (MessagesFactory, urlMap, $resource, $q) {\n\n        var _messages = {\n            errorOnFactUpdate: 'Cannot update fact',\n            errorOnGetFactsList: 'Cannot get facts list',\n            errorOnAddFact: 'Cannot add new fact',\n            errorOnRemoveFact: 'Cannot remove fact'\n        };\n\n        var _factsApi = {\n            factsList: $resource(urlMap['facts.get_facts_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newFact: $resource(urlMap['facts.add_fact'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            fact: $resource(urlMap['facts.update_fact'],\n                {fact_id: '@fact_id'},\n                {\n                    update: {method: 'PUT'},\n                    remove: {method: 'DELETE'}\n                }),\n            factsMassiveDelete: $resource(urlMap['facts.facts_mass_delete'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getFactsList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _factsApi.factsList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetFactsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getFactsListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _factsApi.factsList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetFactsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getFactsByQuery: function (query) {\n                //if (!query) return MessagesFactory.throwInvalidParamsError();\n\n                return _factsApi.factsList.getList({\n                    query: query\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetFactsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addFact: function (fact) {\n                if (!fact) return MessagesFactory.throwInvalidParamsError();\n\n                return _factsApi.newFact.add(fact, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddFact);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateFact: function (fact) {\n                if (!fact) return MessagesFactory.throwInvalidParamsError();\n\n                return _factsApi.fact.update({fact_id: fact.id}, fact, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnFactUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateFactsMassive: function (factsList) {\n                if (!factsList || factsList.length === 0) return MessagesFactory.throwInvalidParamsError();\n\n                var promises = [];\n\n                for (var i = 0; i < factsList.length; i++) {\n                    promises.push(_factsApi.fact.update({fact_id: factsList[i].id}, factsList[i]).$promise);\n                }\n\n                return $q.all(promises);\n            },\n            removeFacts: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(ids)) ids = [ids];\n\n                if (ids.length > 1) {\n                    return _removeFactsMassive(ids);\n                } else {\n                    return _removeSingleFact(ids[0]);\n                }\n            }\n        };\n\n        function _removeSingleFact(id) {\n            return _factsApi.fact.remove({fact_id: id}, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveFact);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        function _removeFactsMassive(ids) {\n            return _factsApi.factsMassiveDelete.remove({ids: ids.toString()}, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveFact);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        return exports;\n\n    }])\n\n;\n\nangular.module('app.feeds.factory', [])\n\n    .factory('FeedsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetFeedsList: 'Cannot get feeds list'\n        };\n\n        var _feedsApi = {\n            feeds: $resource(urlMap['analytics.get_cards_by_dates'],\n                {},\n                {\n                    getList: {method: 'GET'}\n                })\n        };\n\n        var exports = {\n            feeds: [],\n            getFeedsList: function (startDate, endDate, queriesList, macrosIdsList, page, isAppend) {\n                if (!startDate || !endDate || !queriesList) return MessagesFactory.throwInvalidParamsError();\n\n                var queries = JSON.stringify(queriesList);\n                var macrosIds = (!!macrosIdsList) ? macrosIdsList.toString() : null;\n\n                return _feedsApi.feeds.getList({\n                    start_date: startDate,\n                    end_date: endDate,\n                    queries: queries,\n                    macros_ids: macrosIds,\n                    page: page\n                }, function (data) {\n                    if (!isAppend) {\n                        exports.feeds = data.results;\n                    } else {\n                        exports.feeds = exports.feeds.concat(data.results);\n                    }\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetFeedsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.gathering.factory', [])\n    .factory('GatheringFactory', ['MessagesFactory', 'urlMap', 'constantMap', '$resource', function (MessagesFactory, urlMap, constantMap, $resource) {\n\n        var _messages = {\n            errorOnGetData: 'cannot get gathering data',\n            unknownReportTypeError: 'unknown report type'\n        };\n\n        var _gatheringApi = {\n            searchPerson: $resource(urlMap['gathering.search_person'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            searchCompany: $resource(urlMap['gathering.search_company'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            sparkCompany: $resource(urlMap['spark.get_company_report'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            sparkIP: $resource(urlMap['spark.get_entrepreneur_report'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            )\n        };\n\n        var sparkTypes  = {\n            sparkIPReport: 'sparkIPReport',\n            sparkCompanyReport: 'sparkCompanyReport'\n        };\n\n        var  types = {\n          person: 'person'\n        };\n\n        var exports = {\n            data: null,\n            report: null,\n            regions: constantMap.REGIONS,\n            getData: function (type, params) {\n                // FIXME: TEST works only with spark api for now\n                var apiFunc;\n                if (type === types.person) {\n                    apiFunc = _gatheringApi.searchPerson;\n                } else {\n                    apiFunc = _gatheringApi.searchCompany;\n                }\n\n                return apiFunc.get(params, function (data) {\n                    exports.data = data.results;\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetData);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getReport: function (type, params) {\n                var apiFunc;\n                switch (type) {\n                    case sparkTypes.sparkIPReport:\n                        apiFunc = _gatheringApi.sparkIP;\n                        break;\n                    case sparkTypes.sparkCompanyReport:\n                        apiFunc = _gatheringApi.sparkCompany;\n                        break;\n                    default:\n                        MessagesFactory.throwDeveloperError(_messages.unknownReportTypeError);\n                }\n                return apiFunc.get(params, function (data) {\n                    exports.report = data;\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetData);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n    }])\n;\nangular.module('app.groups.factory', [])\n\n    .factory('GroupsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnAddGroup: 'Cannot add new group',\n            errorOnGroupUpdate: 'Cannot update group',\n            errorOnGetGroupList: 'Cannot get group list',\n            errorOnRemoveGroup: 'Cannot remove group'\n        };\n\n        var _groupsApi = {\n            groupList: $resource(urlMap['groups.get_group_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newGroup: $resource(urlMap['groups.add_group'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            group: $resource(urlMap['groups.update_group'],\n                {group_id: '@group_id'},\n                {\n                    update: {method: 'PUT'}\n                }),\n            groupDelete: $resource(urlMap['groups.delete_group'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getGroupList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _groupsApi.groupList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetGroupList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getGroupListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _groupsApi.groupList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetGroupList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addGroup: function (group) {\n                if (!group) return MessagesFactory.throwInvalidParamsError();\n\n                return _groupsApi.newGroup.add(group, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddGroup);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateGroup: function (group) {\n                if (!group) return MessagesFactory.throwInvalidParamsError();\n\n                return _groupsApi.group.update({group_id: group.id}, group, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGroupUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeGroup: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _groupsApi.groupDelete.remove({ids: ids}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveGroup);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\nangular.module('app.launch.factory', [])\n\n    .factory('LaunchFactory', ['MessagesFactory', 'urlMap', '$resource', 'MacrosFactory', '$q', function (MessagesFactory, urlMap, $resource, MacrosFactory, $q) {\n\n        var _messages = {\n            errorOnGetScanList: 'Cannot get launch list',\n            errorOnAddScan: 'Cannot add new launch',\n            errorOnStopScan: 'Cannot stop launch',\n            errorOnUpdateScan: 'Cannot update launch',\n            errorOnRemoveScan: 'Cannot remove launch'\n        };\n\n        var _launchApi = {\n            newLaunch: $resource(urlMap['launches.add_launch'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            launch: $resource(urlMap['launches.update_launch'],\n                {launch_id: '@launch_id'},\n                {\n                    update: {method: 'PUT'}\n                }),\n            launchList: $resource(urlMap['launches.get_launches'],\n                {},\n                {\n                    getList: {method: 'GET'}\n                }),\n            launchMassiveDelete: $resource(urlMap['launches.launch_mass_delete'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                }),\n            launchMassiveEnable: $resource(urlMap['launches.launch_mass_enable'],\n                {},\n                {\n                    update: {method: 'PUT'}\n                })\n        };\n\n        var exports = {\n            addLaunch: function (macrosIds, settings) {\n                if (!macrosIds || !settings) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(macrosIds)) macrosIds = [macrosIds];\n\n                if (macrosIds.length > 1) {\n                    return _addMassiveLaunch(macrosIds, settings);\n                } else {\n                    return _addSingleLaunch(macrosIds[0], settings);\n                }\n            },\n            updateLaunch: function (launch) {\n                if (!launch) return MessagesFactory.throwInvalidParamsError();\n\n                return _launchApi.launch.update({launch_id: launch.id}, launch, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnUpdateScan);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeLaunch: function (launchIds) {\n                if (!launchIds) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(launchIds)) launchIds = [launchIds];\n\n                return _launchApi.launchMassiveDelete.remove({ids: launchIds.toString()}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveScan);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getMacrosForLaunchList: function (launchList) {\n                var macrosIds = [];\n\n                for (var i = 0; i < launchList.length; i++) {\n                    macrosIds.push(launchList[i].macros_id);\n                }\n\n                return MacrosFactory.getMacrosListByIds(macrosIds.toString());\n            },\n            assignLinkedMacrosToLaunchList: function (launchList, callback) {\n                if (!angular.isArray(launchList)) launchList = [launchList];\n\n                return exports.getMacrosForLaunchList(launchList).then(function (data) {\n                    var macrosList = data.results;\n\n                    for (var i = 0; i < launchList.length; i++) {\n                        var launch = launchList[i];\n                        for (var j = 0; j < macrosList.length; j++) {\n                            var macros = macrosList[j];\n                            if (+launch.macros_id === +macros.id) {\n                                launch.macros = macros;\n                            }\n                        }\n                    }\n\n                    if (callback) {\n                        callback(launchList);\n                    }\n                });\n            },\n            getLaunchList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _launchApi.launchList.getList(data, function (data) {\n                    exports.launchList = data.results;\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetScanList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getLaunchListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _launchApi.launchList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetScanList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            setLaunchEnableMassive: function (launchIds, isEnableAction) {\n                if (!launchIds) return MessagesFactory.throwInvalidParamsError();\n\n                return _launchApi.launchMassiveEnable.update(null, {\n                    ids: launchIds,\n                    is_enabled: isEnableAction\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnUpdateScan);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        function _addMassiveLaunch(macrosIds, settings) {\n            var promises = [];\n            var launch;\n\n            var params = JSON.parse(JSON.stringify(settings.params));\n            delete settings.params;\n\n            for (var i = 0; i < macrosIds.length; i++) {\n                launch = JSON.parse(JSON.stringify(settings));\n                launch.macros_id = macrosIds[i];\n\n                for (var j = 0; j < params.length; j++) {\n                    var param = params[j];\n                    if (launch.macros_id === param.id) {\n                        launch.params = param.placeholders;\n                    }\n                }\n\n                promises.push(_launchApi.newLaunch.add(launch).$promise);\n            }\n\n            return $q.all(promises);\n        }\n\n        function _addSingleLaunch(macrosId, settings) {\n            settings.macros_id = macrosId;\n\n            if (settings.params) {\n                var params = JSON.parse(JSON.stringify(settings.params));\n                delete settings.params;\n                if (params) {\n                    settings.params = params[0].placeholders;\n                }\n            }\n\n            return _launchApi.newLaunch.add(settings, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnAddScan);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        return exports;\n    }])\n\n;\n\nangular.module('app.macros.factory', [])\n\n    .factory('MacrosFactory', ['MessagesFactory', 'urlMap', '$resource', '$q', function (MessagesFactory, urlMap, $resource, $q) {\n\n        var _messages = {\n            errorOnMacrosUpdate: 'Cannot update macros',\n            errorOnGetMacrosList: 'Cannot get macros list',\n            errorOnAddMacros: 'Cannot add new macros',\n            errorOnDebugStart: 'Cannot start macros debug',\n            errorOnGetDebugInfo: 'Cannot get debug info for a macros',\n            errorOnRemoveMacros: 'Cannot remove macros'\n        };\n\n        var _macrosApi = {\n            macrosList: $resource(urlMap['macros.get_macros_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newMacros: $resource(urlMap['macros.add_macros'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            macros: $resource(urlMap['macros.update_macros'],\n                {macros_id: '@macros_id'},\n                {\n                    update: {method: 'PUT'}\n                }),\n            macrosMassiveDelete: $resource(urlMap['macros.macros_mass_delete'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                }),\n            macrosMassivePublish: $resource(urlMap['macros.macros_mass_publish'],\n                {},\n                {\n                    update: {method: 'PUT'}\n                }),\n            placeholders: $resource(urlMap['macros.get_macros_placeholders'],\n                {ids: '@macros_id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            debug: $resource(urlMap['macros.start_macros_debug'],\n                {},\n                {\n                    start: {method: 'POST'}\n                }),\n            report: $resource(urlMap['macros.get_macros_debug_info'],\n                {macros_id: '@macros_id'},\n                {\n                    get: {method: 'GET'}\n                })\n        };\n\n        var exports = {\n            getMacrosList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _macrosApi.macrosList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetMacrosList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getMacrosListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.macrosList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetMacrosList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getPlaceholders: function (macrosIdsArr) {\n                if (!macrosIdsArr) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.placeholders.getList({\n                    ids: macrosIdsArr.toString()\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetMacrosList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getMacrosByQuery: function (query) {\n                //if (!query) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.macrosList.getList({\n                    query: query\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetMacrosList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addMacros: function (macros) {\n                if (!macros) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.newMacros.add(macros, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddMacros);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            startDebug: function (macros) {\n                if (!macros) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.debug.start(macros, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnDebugStart);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getReport: function (macrosId) {\n                if (!macrosId) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.report.get({macros_id: macrosId}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetDebugInfo);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateMacros: function (macros) {\n                if (!macros) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.macros.update({macros_id: macros.id}, macros, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnMacrosUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateMacrosMassive: function (macrosList) {\n                if (!macrosList || macrosList.length === 0) return MessagesFactory.throwInvalidParamsError();\n\n                var promises = [];\n\n                for (var i = 0; i < macrosList.length; i++) {\n                    promises.push(_macrosApi.macros.update({macros_id: macrosList[i].id}, macrosList[i]).$promise);\n                }\n\n                return $q.all(promises);\n            },\n            setMacrosPublishMassive: function (macrosIds, isTargetAction) {\n                if (!macrosIds) return MessagesFactory.throwInvalidParamsError();\n\n                return _macrosApi.macrosMassivePublish.update(null, {\n                    ids: macrosIds,\n                    is_target_action: isTargetAction\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnMacrosUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeMacros: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(ids)) ids = [ids];\n\n                return _macrosApi.macrosMassiveDelete.remove({ids: ids.toString()}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveMacros);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.messages', ['toaster'])\n\n    .constant('MESSAGES', {\n        invalidParams: 'invalid params'\n    })\n\n    .factory('MessagesFactory', ['toaster', 'HTTP_STATUS', 'MESSAGES', function (toaster, HTTP_STATUS, MESSAGES) {\n\n        var _messages = {\n            badRequest: 'Неверный запрос',\n            unauthorized: 'Не авторизован',\n            internalServerError: 'Внутренняя ошибка сервиса',\n            unknownError: 'Неизвестная ошибка, обратитесь в поддержку или попробуйте позже'\n        };\n\n        var _messageTypes = {\n            success: 'success',\n            error: 'error',\n            info: 'info',\n            warning: 'warning',\n            wait: 'wait'\n        };\n\n        var _messagesTitles = {\n            error: 'Error'\n        };\n\n        function getDefaultMessage(status) {\n            if (status === HTTP_STATUS.BAD_REQUEST) {\n                return _messages.badRequest;\n            } else if (status === HTTP_STATUS.UNAUTHORIZED) {\n                return _messages.unauthorized;\n            } else if (status === HTTP_STATUS.INTERNAL_SERVER_ERROR) {\n                return _messages.internalServerError;\n            } else if (status === HTTP_STATUS.NOT_FOUND) {\n                return 'Не найден';\n            } else {\n                return 'Неизвестная ошибка: ' + status;\n            }\n        }\n\n        var exports = {\n            successMsg: function (message, title) {\n                if (!message) return exports.throwInvalidParamsError();\n\n                title = title || null;\n\n                toaster.pop(_messageTypes.success, title, message);\n            },\n            errorMsg: function (message, title) {\n                if (!message) return exports.throwInvalidParamsError();\n\n                title = title || _messagesTitles.error;\n\n                toaster.pop(_messageTypes.error, title, message);\n            },\n            infoMsg: function (message, title) {\n                if (!message) return exports.throwInvalidParamsError();\n\n                toaster.pop(_messageTypes.info, title, message);\n            },\n            statusErrorMsg: function (status) {\n                if (!status) return exports.throwInvalidParamsError();\n\n                var message = getDefaultMessage(status);\n                var title = _messagesTitles.error;\n\n                toaster.pop(_messageTypes.error, title, message);\n            },\n            throwDeveloperError: function (message) {\n                return console.error(message);\n            },\n            throwDeveloperWarn: function (message) {\n                return console.warn(message);\n            },\n            throwInvalidParamsError: function () {\n                return exports.throwDeveloperError(MESSAGES.invalidParams);\n            }\n        };\n\n        return exports;\n    }])\n;\n'use strict';\n\nangular.module('app.ng-table-utils', ['ngTable'])\n\n    .factory('NgTableUtilsFactory', ['NgTableParams', 'MessagesFactory', function (NgTableParams, MessagesFactory) {\n\n        var defaultPage = 1;\n        var defaultCount = 25;\n\n        var _sortingDirection = {\n            asc: '',\n            desc: '-'\n        };\n\n        function _getSorting(sorting) {\n            var field = Object.keys(sorting)[0];\n            var direction = sorting[field] === 'asc' ? _sortingDirection.asc : _sortingDirection.desc;\n            return direction + field;\n        }\n\n        //TODO (S.Panfilov) remove from factories lists, schedulers, dones and totals for reload table\n        var exports = {\n            tableParams: null,\n            getDefaultParams: function (settings, sorting) {\n                return {\n                    defaultPage: 1,\n                    defaultCount: 25,\n                    page: (settings && settings.page) ? settings.page : defaultPage,\n                    count: (settings && settings.count) ? settings.count : defaultCount,\n                    sorting: sorting\n                };\n            },\n            initNgTableParams: function (settings, sorting, promisedCallback) {\n                var defTableParams = exports.getDefaultParams(settings, sorting);\n\n                exports.tableParams = new NgTableParams({\n                    page: defTableParams.page,\n                    count: defTableParams.count,\n                    sorting: defTableParams.sorting\n                }, {\n                    total: 0,\n                    getData: function ($defer, params) {\n                        var page = params.page() || defTableParams.page;\n                        var limit = params.count() || defTableParams.count;\n                        var sorting = _getSorting(params.sorting() || defTableParams.sorting);\n\n                        if (!promisedCallback) return MessagesFactory.throwInvalidParamsError();\n\n                        promisedCallback(page, limit, sorting).then(function (data) {\n                            params.total(data.total);\n                            return $defer.resolve(data.results);\n                        });\n                    }\n                });\n\n                return exports.tableParams;\n            },\n            setDefaultSorting: function (sorting) {\n                return exports.tableParams.sorting(sorting);\n            },\n            reload: function () {\n                if (!exports.tableParams) return MessagesFactory.throwInvalidParamsError();\n                exports.tableParams.reload();\n            }\n        };\n\n        return exports;\n    }])\n;\n'use strict';\n\nangular.module('app.photos.factory', [])\n    .factory('PhotosFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetPhotosList: 'Cannot get photos',\n            errorOnAddPhoto: 'Cannot add photo',\n            errorOnUpdatePhoto: 'Cannot update photo',\n            errorOnDeletePhotos: 'Cannot remove photos',\n            successOnAddPhoto: 'Изображение успешно добавлено',\n            successOnUpdatePhotos: 'Изображения успешно обновлено',\n            successOnDeletePhotos: 'Изображения успешно удалёны'\n        };\n\n        var _photosApi = {\n            photos: $resource(urlMap['photos.get_photos'],\n                {},\n                {\n                    get: {method: 'GET'},\n                    add: {method: 'POST'},\n                    remove: {method: 'DELETE'}\n                }\n            ),\n            updatePhoto: $resource(urlMap['photos.update_photo'],\n                {id: '@id'},\n                {\n                    update: {method: 'PUT'}\n                }\n            )\n        };\n\n        var exports = {\n            getPhotosList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _photosApi.photos.get(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetPhotosList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getPhotosListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _photosApi.photos.get({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetPhotosList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addPhoto: function (photo) {\n                if (!photo) return MessagesFactory.throwInvalidParamsError();\n\n                return _photosApi.photos.add(photo, function () {\n                    MessagesFactory.successMsg(_messages.successOnAddPhoto);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnAddPhoto);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updatePhoto: function (photo) {\n                if (!photo) return MessagesFactory.throwInvalidParamsError();\n\n                return _photosApi.updatePhoto.update({photo_id: photo.id}, photo, function () {\n                    MessagesFactory.successMsg(_messages.successOnUpdatePhotos);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnUpdatePhoto);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removePhotos: function (photosIds) {\n                if (!photosIds) return MessagesFactory.throwInvalidParamsError();\n\n                return _photosApi.photos.remove({ids: photosIds}, function () {\n                    MessagesFactory.successMsg(_messages.successOnDeletePhotos);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnDeletePhotos);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n    }])\n;\n\n'use strict';\n\nangular.module('app.profiles.factory', [])\n    .factory('ProfilesFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetProfiles: 'Cannot get profiles',\n            successOnAddProfile: 'Профиль успешно добавлен',\n            errorOnAddProfile: 'Cannot add profile',\n            successOnEditProfile: 'Профиль успешно изменен',\n            errorOnEditProfile: 'Cannot edit profile',\n            successOnDeleteProfiles: 'Профили успешно удалены',\n            errorOnDeleteProfile: 'Cannot delete profile'\n        };\n\n        var _profilesApi = {\n            profiles: $resource(urlMap['profiles.get_profiles'],\n                {},\n                {\n                    get: {method: 'GET'},\n                    add: {method: 'POST'},\n                    remove: {method: 'DELETE'}\n                }\n            ),\n            updateProfile: $resource(urlMap['profiles.update_profile'],\n                {},\n                {\n                    update: {method: 'PUT'}\n                }\n            )\n        };\n\n        var exports = {\n            getProfilesList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return  _profilesApi.profiles.get(data, function (data) {\n                //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnGetCards);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getProfilesListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _profilesApi.profiles.get({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetProfiles);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addProfile: function (profile) {\n                if (!profile) return MessagesFactory.throwInvalidParamsError();\n\n                return _profilesApi.profiles.add(profile, function () {\n                    MessagesFactory.successMsg(_messages.successOnAddProfile);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnAddProfile);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateProfile: function (profile) {\n                if (!profile) return MessagesFactory.throwInvalidParamsError();\n\n                return _profilesApi.updateProfile.update({profile_id: profile.id}, profile, function () {\n                    MessagesFactory.successMsg(_messages.successOnEditProfile);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnEditProfile);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeProfiles: function (profilesIds) {\n                if (!profilesIds) return MessagesFactory.throwInvalidParamsError();\n\n                return _profilesApi.profiles.remove({ids: profilesIds}, function () {\n                    MessagesFactory.successMsg(_messages.successOnDeleteProfiles);\n                }, function (response) {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnDeleteProfile);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n    }])\n;\nangular.module('app.proxy.factory', [])\n\n    .factory('ProxyFactory', ['MessagesFactory', 'urlMap', '$resource', '$q', function (MessagesFactory, urlMap, $resource, $q) {\n\n        var _messages = {\n            errorOnProxyUpdate: 'Cannot update proxy',\n            errorOnGetProxyList: 'Cannot get proxy list',\n            errorOnAddProxy: 'Cannot add new proxy',\n            errorOnRemoveProxy: 'Cannot remove proxy'\n        };\n\n        var _proxyApi = {\n            proxyList: $resource(urlMap['proxy.get_proxy_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newProxy: $resource(urlMap['proxy.add_proxy'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            proxy: $resource(urlMap['proxy.update_proxy'],\n                {proxy_id: '@proxy_id'},\n                {\n                    update: {method: 'PUT'},\n                    remove: {method: 'DELETE'}\n                }),\n            proxyMassiveDelete: $resource(urlMap['proxy.proxy_mass_delete'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getProxyList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _proxyApi.proxyList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetProxyList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getProxyListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _proxyApi.proxyList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetProxyList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getProxyByQuery: function (query) {\n                //if (!query) return MessagesFactory.throwInvalidParamsError();\n\n                return _proxyApi.proxyList.getList({\n                    query: query\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetProxyList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addProxy: function (proxy) {\n                if (!proxy) return MessagesFactory.throwInvalidParamsError();\n\n                return _proxyApi.newProxy.add(proxy, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddProxy);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateProxy: function (proxy) {\n                if (!proxy) return MessagesFactory.throwInvalidParamsError();\n\n                return _proxyApi.proxy.update({proxy_id: proxy.id}, proxy, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnProxyUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateProxyMassive: function (proxyList) {\n                if (!proxyList || proxyList.length === 0) return MessagesFactory.throwInvalidParamsError();\n\n                var promises = [];\n\n                for (var i = 0; i < proxyList.length; i++) {\n                    promises.push(_proxyApi.proxy.update({proxy_id: proxyList[i].id}, proxyList[i]).$promise);\n                }\n\n                return $q.all(promises);\n            },\n            removeProxy: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(ids)) ids = [ids];\n\n                if (ids.length > 1) {\n                    return _removeProxyMassive(ids);\n                } else {\n                    return _removeSingleProxy(ids[0]);\n                }\n            }\n        };\n\n        function _removeSingleProxy(id) {\n            return _proxyApi.proxy.remove({proxy_id: id}, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveProxy);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        function _removeProxyMassive(ids) {\n            return _proxyApi.proxyMassiveDelete.remove({ids: ids.toString()}, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveProxy);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        return exports;\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.script.factory', [])\n    .factory('ScriptFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnCheckScriptValid: 'Cannot check is script valid',\n            errorOnStringifyObject: 'Cannot stringify object'\n        };\n\n        var _scriptApi = {\n            scriptValidation: $resource(urlMap['commons.validate_json'],\n                {},\n                {\n                    check: {method: 'GET'}\n                })\n        };\n\n        var exports = {\n            isValidScript: function (script, isList) {\n                isList = isList || false;\n\n                return _scriptApi.scriptValidation.check({\n                    json: exports.removeFormatting(script),\n                    is_list: isList\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnCheckScriptValid);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            isCanStringify: function (obj) {\n                var string;\n                var result = false;\n\n                try {\n                    string = JSON.stringify(obj);\n                } catch (e) {\n                    //\n                } finally {\n                    result = (string) ? true : false;\n                }\n\n                return result;\n            },\n            isCanParse: function (string) {\n                var object;\n                var result = false;\n\n                try {\n                    //string is like {\"some\": \"value\"}\n                    object = JSON.parse(string);\n                } catch (e) {\n                    //\n                } finally {\n                    result = (object) ? true : false;\n                }\n\n                return result;\n            },\n            removeFormatting: function (str) {\n                if (!str) return MessagesFactory.throwInvalidParamsError();\n\n                return str.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n            },\n            parse: function (str) {\n                if (!str) return MessagesFactory.throwInvalidParamsError();\n                return JSON.parse(str);\n            },\n            stringify: function (object, isPretty) {\n                if (!object) return MessagesFactory.throwInvalidParamsError();\n                var spaces = (isPretty) ? 2 : null;\n\n                if (exports.isCanStringify(object)) {\n                    return JSON.stringify(object, null, spaces);\n                } else {\n                    MessagesFactory.throwDeveloperError(_messages.errorOnStringifyObject);\n                    return object.toString();\n                }\n\n            }\n        };\n\n        return exports;\n    }])\n;\nangular.module('app.sequences.factory', [])\n\n    .factory('SequencesFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnAddSequence: 'Cannot add new sequence',\n            errorOnSequenceUpdate: 'Cannot update sequence',\n            errorOnGetSequenceList: 'Cannot get sequence list',\n            errorOnRemoveSequence: 'Cannot remove sequence'\n        };\n\n        var _sequencesApi = {\n            sequenceList: $resource(urlMap['sequences.get_sequence_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newSequence: $resource(urlMap['sequences.add_sequence'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            sequence: $resource(urlMap['sequences.update_sequence'],\n                {sequence_id: '@sequence_id'},\n                {\n                    update: {method: 'PUT'}\n                }),\n            sequenceDelete: $resource(urlMap['sequences.delete_sequence'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getSequenceList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _sequencesApi.sequenceList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetSequenceList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getSequenceListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _sequencesApi.sequenceList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetSequenceList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addSequence: function (sequence) {\n                if (!sequence) return MessagesFactory.throwInvalidParamsError();\n\n                return _sequencesApi.newSequence.add(sequence, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddSequence);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateSequence: function (sequence) {\n                if (!sequence) return MessagesFactory.throwInvalidParamsError();\n\n                return _sequencesApi.sequence.update({sequence_id: sequence.id}, sequence, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnSequenceUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeSequence: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _sequencesApi.sequenceDelete.remove({ids: ids}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveSequence);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\nangular.module('app.simcards.factory', [])\n\n    .factory('SimcardsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnAddSimcard: 'Cannot add new sim card',\n            errorOnSimcardUpdate: 'Cannot update sim card',\n            errorOnGetSimcardList: 'Cannot get sim card list',\n            errorOnRemoveSimcard: 'Cannot remove sim card'\n        };\n\n        var _simcardsApi = {\n            simcardList: $resource(urlMap['simcards.get_simcard_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newSimcard: $resource(urlMap['simcards.add_simcard'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            simcard: $resource(urlMap['simcards.update_simcard'],\n                {simcard_id: '@simcard_id'},\n                {\n                    update: {method: 'PUT'}\n                }),\n            simcardDelete: $resource(urlMap['simcards.delete_simcard'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getSimcardList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _simcardsApi.simcardList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetSimcardList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getSimcardListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _simcardsApi.simcardList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetSimcardList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addSimcard: function (simcard) {\n                if (!simcard) return MessagesFactory.throwInvalidParamsError();\n\n                return _simcardsApi.newSimcard.add(simcard, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddSimcard);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateSimcard: function (simcard) {\n                if (!simcard) return MessagesFactory.throwInvalidParamsError();\n\n                return _simcardsApi.simcard.update({simcard_id: simcard.id}, simcard, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnSimcardUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeSimcard: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _simcardsApi.simcardDelete.remove({ids: ids}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveSimcard);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.socket.factory', [])\n    .factory('SocketFactory', ['constantMap', function (constantMap) {\n        var channels = {};\n\n        var exports = {\n            subscribe: function (channel, callback) {\n                var client = new Faye.Client(constantMap.APP.SOCKET_APP_URL + '/asa');\n                channels[channel] = client;\n                client.subscribe('/' + channel, callback);\n            }\n        };\n\n        return exports;\n    }])\n;\nangular.module('app.tags.factory', [])\n\n    .factory('TagsFactory', ['MessagesFactory', 'urlMap', '$resource', '$q', function (MessagesFactory, urlMap, $resource, $q) {\n\n        var _messages = {\n            errorOnTagUpdate: 'Cannot update tag',\n            errorOnGetTagList: 'Cannot get tag list',\n            errorOnAddTag: 'Cannot add new tag',\n            errorOnRemoveTag: 'Cannot remove tag'\n        };\n\n        var _tagsApi = {\n            tagList: $resource(urlMap['tags.get_tag_list'],\n                {id: '@id'},\n                {\n                    getList: {method: 'GET'}\n                }),\n            newTag: $resource(urlMap['tags.add_tag'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }),\n            tag: $resource(urlMap['tags.update_tag'],\n                {tag_id: '@tag_id'},\n                {\n                    update: {method: 'PUT'},\n                    remove: {method: 'DELETE'}\n                }),\n            tagMassiveDelete: $resource(urlMap['tags.tag_mass_delete'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                })\n        };\n\n        var exports = {\n            getTagList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _tagsApi.tagList.getList(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetTagList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getTagListByIds: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _tagsApi.tagList.getList({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetTagList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getTagByQuery: function (query) {\n                //if (!query) return MessagesFactory.throwInvalidParamsError();\n\n                return _tagsApi.tagList.getList({\n                    query: query\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetTagList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            addTag: function (tag) {\n                if (!tag) return MessagesFactory.throwInvalidParamsError();\n\n                return _tagsApi.newTag.add(tag, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddTag);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateTag: function (tag) {\n                if (!tag) return MessagesFactory.throwInvalidParamsError();\n\n                return _tagsApi.tag.update({tag_id: tag.id}, tag, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnTagUpdate);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateTagMassive: function (tagList) {\n                if (!tagList || tagList.length === 0) return MessagesFactory.throwInvalidParamsError();\n\n                var promises = [];\n\n                for (var i = 0; i < tagList.length; i++) {\n                    promises.push(_tagsApi.tag.update({tag_id: tagList[i].id}, tagList[i]).$promise);\n                }\n\n                return $q.all(promises);\n            },\n            removeTag: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(ids)) ids = [ids];\n\n                if (ids.length > 1) {\n                    return _removeTagMassive(ids);\n                } else {\n                    return _removeSingleTag(ids[0]);\n                }\n            }\n        };\n\n        function _removeSingleTag(id) {\n            return _tagsApi.tag.remove({tag_id: id}, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveTag);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        function _removeTagMassive(ids) {\n            return _tagsApi.tagMassiveDelete.remove({ids: ids.toString()}, function (data) {\n                //\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveTag);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        return exports;\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.targets.factory', [])\n    .factory('TargetsFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        var _messages = {\n            errorOnGetTargetsList: 'Cannot get targets',\n            errorOnAddTarget: 'Cannot add new target',\n            errorOnRemoveTarget: 'Cannot remove target',\n            errorOnRestartTarget: 'Cannot restart target'\n        };\n\n        var _targetsApi = {\n            newTarget: $resource(urlMap['targets.add_target'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }\n            ),\n            targets: $resource(urlMap['targets.get_targets'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            targetsDelete: $resource(urlMap['targets.delete_targets'],\n                {ids: '@ids'},\n                {\n                    remove: {method: 'DELETE'}\n                }\n            ),\n            target: $resource(urlMap['targets.restart_target'],\n                {launch_id: '@launch_id'},\n                {\n                    restart: {method: 'PUT'}\n                }\n            )\n        };\n\n        function _toJson(data) {\n            return angular.toJson(data, true);\n        }\n\n        var exports = {\n            addTarget: function (macrosId, settings) {\n                if (!macrosId || !settings) return MessagesFactory.throwInvalidParamsError();\n\n                settings.macros_id = macrosId;\n\n                if (settings.params) {\n                    var params = JSON.parse(JSON.stringify(settings.params));\n                    delete settings.params;\n                    if (params) {\n                        settings.params = params[0].placeholders;\n                    }\n                }\n                return _targetsApi.newTarget.add(settings, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnAddTarget);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getTargetsList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _targetsApi.targets.get(data, function (data) {\n                    if (data.results) {\n                        for (var i = 0; i < data.results.length; i++) {\n                            data.results[i].params = _toJson(data.results[i].params);\n                        }\n                    }\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetTargetsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getTargetsById: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _targetsApi.targets.get({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetTargetsList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeTargets: function (targetIds) {\n                if (!targetIds) return MessagesFactory.throwInvalidParamsError();\n                if (!angular.isArray(targetIds)) targetIds = [targetIds];\n\n                return _targetsApi.targetsDelete.remove({ids: targetIds.toString()}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveTarget);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            restartTarget: function (targetId) {\n                if (!targetId) return MessagesFactory.throwInvalidParamsError();\n\n                return _targetsApi.target.restart({launch_id: targetId}, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnRestartTarget);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            }\n        };\n\n        return exports;\n    }])\n;\nangular.module(\"app.config.url_map\", [])\n\n.constant(\"urlMap\", {\n\t\"tags.add_tag\": \"/tags/add\",\n\t\"users.logout\": \"/users/logout/\",\n\t\"macros.add_macros\": \"/macros\",\n\t\"facts.update_fact\": \"/facts/:fact_id\",\n\t\"social.connect\": \"/connect/\",\n\t\"simcards.delete_simcard\": \"/simcards\",\n\t\"macros.get_macros_placeholders\": \"/macros/placeholders\",\n\t\"bots.add_bot\": \"/bots\",\n\t\"profiles.get_profiles\": \"/profiles\",\n\t\"users.create_user\": \"/users/create\",\n\t\"simcards.add_simcard\": \"/simcards/add\",\n\t\"api.get_target_actions\": \"/api/:target_host/actions\",\n\t\"users.get_users_list\": \"/users/list\",\n\t\"rq_dashboard.list_jobs\": \"/rq//jobs//.json\",\n\t\"launches.get_launches\": \"/launches\",\n\t\"rq_dashboard.list_workers\": \"/rq//workers.json\",\n\t\"api.create_photos_grab_target\": \"/api/grab_photos\",\n\t\"img.crop\": \"/fill/:widthx:height/static/:url\",\n\t\"api.update_photo\": \"/api/photos/:photo_id\",\n\t\"macros.macros_mass_publish\": \"/macros/mass_publish\",\n\t\"commons.validate_json\": \"/commons/validate/json\",\n\t\"groups.delete_group\": \"/groups\",\n\t\"accounts.update_account\": \"/accounts/:account_id\",\n\t\"proxy.delete_proxy\": \"/proxy/:proxy_id\",\n\t\"photos.add_photo\": \"/photos\",\n\t\"macros.macros_mass_delete\": \"/macros\",\n\t\"social.remove_all_connections\": \"/connect/\",\n\t\"targets.add_target\": \"/targets\",\n\t\"bots.get_bots\": \"/bots\",\n\t\"api.create_target\": \"/api/target\",\n\t\"api.get_tags\": \"/api/tags\",\n\t\"security.login\": \"/login\",\n\t\"proxy.get_proxy_list\": \"/proxy/list\",\n\t\"social.remove_connection\": \"/connect//\",\n\t\"profiles.delete_profiles\": \"/profiles\",\n\t\"photos.delete_photos\": \"/photos\",\n\t\"simcards.update_simcard\": \"/simcards/:simcard_id\",\n\t\"facts.facts_mass_delete\": \"/facts\",\n\t\"api.get_accounts\": \"/api/accounts\",\n\t\"security.logout\": \"/logout\",\n\t\"tags.update_tag\": \"/tags/:tag_id\",\n\t\"photos.update_photo\": \"/photos/:photo_id\",\n\t\"groups.update_group\": \"/groups/:group_id\",\n\t\"social.login\": \"/login/\",\n\t\"static\": \"/static/:filename\",\n\t\"proxy.update_proxy\": \"/proxy/:proxy_id\",\n\t\"comments.update_comment\": \"/comments/:comment_id\",\n\t\"cards.add_card\": \"/cards\",\n\t\"users.toggle_user\": \"/users/:user_id/delete/:delete\",\n\t\"spark.get_entrepreneur_report\": \"/spark/entrepreneur_report\",\n\t\"rq_dashboard.overview\": \"/rq//\",\n\t\"spiders.save_data\": \"/spiders/data/\",\n\t\"bots.delete_bots\": \"/bots\",\n\t\"root.index_page\": \"/\",\n\t\"tags.tag_mass_delete\": \"/tags/mass_delete\",\n\t\"api.get_stats\": \"/api/:social/stats\",\n\t\"rq_dashboard.requeue_all\": \"/rq//requeue-all\",\n\t\"tags.delete_tag\": \"/tags/:tag_id\",\n\t\"launches.launch_mass_delete\": \"/launches\",\n\t\"gathering.search_person\": \"/gathering/search_person\",\n\t\"macros.get_macros_list\": \"/macros\",\n\t\"comments.delete_comment\": \"/comments\",\n\t\"sequences.update_sequence\": \"/sequences/:sequence_id\",\n\t\"proxy.proxy_mass_delete\": \"/proxy/mass_delete\",\n\t\"rq_dashboard.empty_queue\": \"/rq//queue//empty\",\n\t\"api.add_account\": \"/api/accounts\",\n\t\"facts.delete_fact\": \"/facts/:fact_id\",\n\t\"rq_dashboard.requeue_job_view\": \"/rq//job//requeue\",\n\t\"simcards.get_simcard_list\": \"/simcards\",\n\t\"spiders.save_error\": \"/spiders/error/\",\n\t\"accounts.get_accounts\": \"/accounts/list\",\n\t\"proxy.add_proxy\": \"/proxy/add\",\n\t\"users.login\": \"/users/login/\",\n\t\"cards.delete_card\": \"/cards/:card_id\",\n\t\"sequences.delete_sequence\": \"/sequences\",\n\t\"accounts.add_account\": \"/accounts/add\",\n\t\"sequences.get_sequence_from_file\": \"/sequences\",\n\t\"rq_dashboard.compact_queue\": \"/rq//queue//compact\",\n\t\"api.update_account\": \"/api/accounts/:account_id\",\n\t\"macros.update_macros\": \"/macros/:macros_id\",\n\t\"users.register\": \"/users/register/\",\n\t\"targets.delete_targets\": \"/targets\",\n\t\"sequences.add_sequence\": \"/sequences/add\",\n\t\"analytics.save_query\": \"/analytics/save_query\",\n\t\"cards.update_card\": \"/cards/:card_id\",\n\t\"groups.add_group\": \"/groups/add\",\n\t\"api.delete_accounts\": \"/api/accounts\",\n\t\"dates.get_month_days\": \"/dates/:year/:month/days\",\n\t\"launches.launch_mass_enable\": \"/launches/mass_enable\",\n\t\"analytics.get_queries\": \"/analytics/queries\",\n\t\"users.login_facebook_connect\": \"/users/login/facebook/\",\n\t\"sequences.get_sequence_list\": \"/sequences\",\n\t\"api.get_photos\": \"/api/photos\",\n\t\"users.login_as\": \"/users/login_as\",\n\t\"rq_dashboard.list_queues\": \"/rq//queues.json\",\n\t\"users.get_current_user\": \"/users/current\",\n\t\"spark.get_company_report\": \"/spark/company_report\",\n\t\"facts.add_fact\": \"/facts\",\n\t\"macros.get_macros_debug_info\": \"/macros/debug/:macros_id\",\n\t\"rq_dashboard.cancel_job_view\": \"/rq//job//cancel\",\n\t\"analytics.get_cards_freq\": \"/analytics\",\n\t\"bots.update_bot\": \"/bots/:bot_id\",\n\t\"rq_dashboard.static\": \"/rq//static/:filename\",\n\t\"profiles.add_profile\": \"/profiles\",\n\t\"users.login_facebook\": \"/users/login/facebook/\",\n\t\"spiders.save_debug_info\": \"/spiders/debug_info/\",\n\t\"dates.get_calendar_data\": \"/dates/calendar_data\",\n\t\"analytics.get_cards_by_dates\": \"/analytics/cards\",\n\t\"tags.get_tag_list\": \"/tags/list\",\n\t\"social.connect_callback\": \"/connect/\",\n\t\"api.get_targets\": \"/api/targets\",\n\t\"accounts.delete_accounts\": \"/accounts/delete_accounts\",\n\t\"facts.get_facts_list\": \"/facts\",\n\t\"social.login_callback\": \"/login/\",\n\t\"launches.update_launch\": \"/launches/:launch_id\",\n\t\"api.delete_photos\": \"/api/photos\",\n\t\"launches.add_launch\": \"/launches\",\n\t\"targets.get_targets\": \"/targets\",\n\t\"img.resize\": \"/fit/:widthx:height/static/:url\",\n\t\"comments.get_comment_list\": \"/comments\",\n\t\"photos.get_photos\": \"/photos\",\n\t\"gathering.search_company\": \"/gathering/search_company\",\n\t\"analytics.delete_queries\": \"/analytics/delete_queries\",\n\t\"users.register_html\": \"/users/register/\",\n\t\"macros.create_macros_from_file\": \"/macros/from_file\",\n\t\"macros.start_macros_debug\": \"/macros/debug\",\n\t\"cards.get_cards\": \"/cards\",\n\t\"groups.get_group_list\": \"/groups\",\n\t\"profiles.update_profile\": \"/profiles/:profile_id\",\n\t\"comments.add_comment\": \"/comments/add\",\n\t\"users.login_html\": \"/users/login/\",\n\t\"users.update_user\": \"/users/:user_id/update\",\n\t\"macros.get_macros_file\": \"/macros/to_file\"\n})\n\n;\n'use strict';\n\nangular.module('app.user.factory', [])\n    .factory('UserFactory', ['MessagesFactory', 'urlMap', '$resource', '$q', function (MessagesFactory, urlMap, $resource, $q) {\n\n        var _messages = {\n            errorOnGetUser: 'Cannot get user',\n            errorOnGetUserList: 'Cannot get users list',\n            errorOnCreateUser: 'Cannot create user',\n            errorOnUpdateUser: 'Cannot update user',\n            errorOnRemoveUser: 'Cannot remove user',\n            errorOnRestoreUser: 'Cannot restore user'\n        };\n\n        var _userApi = {\n            user: $resource(urlMap['users.get_current_user'],\n                {},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            createUser: $resource(urlMap['users.create_user'],\n                {},\n                {\n                    add: {method: 'POST'}\n                }\n            ),\n            updateUser: $resource(urlMap['users.update_user'],\n                {user_id: '@user_id'},\n                {\n                    add: {method: 'POST'}\n                }\n            ),\n            userState: $resource(urlMap['users.toggle_user'],\n                {user_id: '@user_id', \"delete\": '@delete'},\n                {\n                    remove: {method: 'DELETE'},\n                    restore: {method: 'PUT'}\n                }\n            ),\n            users: $resource(urlMap['users.get_users_list'],\n                {page: '@page', limit: '@limit', order_by: '@order_by', query: '@query', project_id: '@project_id'},\n                {\n                    get: {method: 'GET'}\n                }\n            ),\n            loginAs: $resource(urlMap['users.login_as'],\n                {user_id: '@userId', remember: '@remember'},\n                {\n                    perform: {method: 'POST'}\n                }\n            )\n        };\n\n        var exports = {\n            currentUser: {},\n            getUser: function () {\n                return _userApi.user.get(function (data) {\n                    exports.currentUser = data.results;\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetUser);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getUsersList: function (page, limit, orderBy, filter) {\n                var data = {\n                    page: page,\n                    limit: limit,\n                    order_by: orderBy\n                };\n\n                angular.forEach(filter, function (value, key) {\n                    if (value) {\n                        data[key] = value;\n                    }\n                });\n\n                return _userApi.users.get(data, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetUserList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            getUsersById: function (ids) {\n                if (!ids) return MessagesFactory.throwInvalidParamsError();\n\n                return _userApi.users.get({\n                    ids: ids\n                }, function (data) {\n                    //\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetUserList);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            loginAs: function (userId, remember) {\n                if (!userId) return MessagesFactory.throwInvalidParamsError();\n\n                return _userApi.loginAs.perform({user_id: userId, remember: remember}, function () {\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnGetUser);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            createUser: function (user) {\n                if (!user) return MessagesFactory.throwInvalidParamsError();\n\n                return _userApi.createUser.add(user, function (data) {\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnCreateUser);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            updateUser: function (user) {\n                if (!user) return MessagesFactory.throwInvalidParamsError();\n\n                return _userApi.updateUser.add(user, function (data) {\n                }, function (response) {\n                    MessagesFactory.throwDeveloperWarn(_messages.errorOnUpdateUser);\n                    MessagesFactory.statusErrorMsg(response.status);\n                }).$promise;\n            },\n            removeUsers: function (userIds) {\n                if (!userIds) return MessagesFactory.throwInvalidParamsError();\n\n                if (!angular.isArray(userIds)) userIds = [userIds];\n\n                if (userIds.length > 1) {\n                    return _removeMassiveUsers(userIds);\n                } else {\n                    return _removeSingleUser(userIds[0]);\n                }\n            },\n            restoreUsers: function (userIds) {\n                if (!userIds) return MessagesFactory.throwInvalidParamsError();\n\n                if (!angular.isArray(userIds)) userIds = [userIds];\n\n                if (userIds.length > 1) {\n                    return _restoreMassiveUsers(userIds);\n                } else {\n                    return _restoreSingleUser(userIds[0]);\n                }\n            },\n            generatePassword: function () {\n                var password = \"\";\n                var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n                var limit = 15;\n\n                for (var i = 0; i < limit; i++) {\n                    password += possible.charAt(Math.floor(Math.random() * possible.length));\n                }\n\n                return password;\n            },\n            isAdmin: function (user) {\n                return user.is_admin;\n            }\n        };\n\n        function _removeMassiveUsers(Ids) {\n            var promises = [];\n\n            for (var i = 0; i < Ids.length; i++) {\n                promises.push(_userApi.userState.remove({user_id: Ids[i], \"delete\": true}).$promise);\n            }\n\n            return $q.all(promises);\n        }\n\n        function _removeSingleUser(id) {\n            return _userApi.userState.remove({user_id: id, \"delete\": true}, function (data) {\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveUser);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        function _restoreMassiveUsers(Ids) {\n            var promises = [];\n\n            for (var i = 0; i < Ids.length; i++) {\n                promises.push(_userApi.userState.restore({user_id: Ids[i], \"delete\": false}).$promise);\n            }\n\n            return $q.all(promises);\n        }\n\n        function _restoreSingleUser(id) {\n            return _userApi.userState.restore({user_id: id, \"delete\": false}, function (data) {\n            }, function (response) {\n                MessagesFactory.throwDeveloperWarn(_messages.errorOnRemoveUser);\n                MessagesFactory.statusErrorMsg(response.status);\n            }).$promise;\n        }\n\n        return exports;\n    }])\n\n    .filter('roleFilter', ['constantMap', function (constantMap) {\n        return function (roleId) {\n            if (!roleId || roleId === '' || roleId === ' ') return '';\n\n            for (var i = 0; i < constantMap.USER_ROLES.length; i++) {\n                if (constantMap.USER_ROLES[i].id === roleId) {\n                    return constantMap.USER_ROLES[i].name;\n                }\n            }\n\n            return '';\n        };\n    }])\n;\n\n'use strict';\n\nangular.module('app.files.uploader', ['app.files.factory'])\n\n    .directive('fileUploader', ['FilesFactory', function (FilesFactory) {\n        return {\n            restrict: 'A',\n            templateUrl: 'files/files-uploader.html',\n            link: function (scope, element, attrs) {\n                //TODO (S.Panfilov) should refactor with isolated scope and throw errors\n                scope.fileAccept = (attrs.fileAccept) ? attrs.fileAccept : '*/*';\n                scope.fileUploadBtnDesc = (attrs.fileUploadBtnDesc) ? attrs.fileUploadBtnDesc : '';\n                scope.fileUploader = attrs.fileUploader;\n                scope.fileUploadFiledName = attrs.fileUploadFiledName;\n\n\n                var callbackHandler = scope.$eval(attrs.fileUploaderCallback);\n\n                var handler = function (event) {\n                    var files = event.target.files;\n                    if (files.length === 0) return;\n\n                    FilesFactory.initFilesUpload(scope.fileUploader, files, scope.fileUploadFiledName, callbackHandler);\n\n                };\n\n                element.bind('change', handler);\n            }\n        };\n    }])\n;\n'use strict';\n\nangular.module('app.files.factory', [])\n\n    .factory('FilesFactory', ['urlMap', 'MessagesFactory', '$timeout', 'HTTP_STATUS', function (urlMap, MessagesFactory, $timeout, HTTP_STATUS) {\n\n        var _messages = {\n            successFileUploadComplete: 'Файл успешно загружен',\n            errorFileUpload: 'Ошибка загрузки файла',\n            infoUploadCanceled: 'Загрузка файла отменена',\n            invalidFileError: 'Необрабатываемый файл'\n        };\n\n        var uploadEvents = {\n            progress: 'progress',\n            load: 'load',\n            error: 'error',\n            abort: 'abort'\n        };\n\n        function prepareFiles(files, fieldName) {\n            var formData = new FormData();\n\n            for (var i = 0; i < files.length; i++) {\n                var file = files[i];\n                formData.append(fieldName, file);\n            }\n\n            return formData;\n        }\n\n        var exports = {\n            uploadProgress: 0,\n            files: [],\n            fieldName: 'file',\n            setFiles: function (files) {\n                exports.files = [];\n                for (var i = 0; i < files.length; i++) {\n                    exports.files.push(files[i]);\n                }\n            },\n            clearFiles: function () {\n                exports.files = [];\n            },\n            makeFilesUpload: function (url, callback) {\n                var formData = prepareFiles(exports.files, exports.fieldName);\n\n                var method = 'POST';\n                var xhr = new XMLHttpRequest();\n                xhr.upload.addEventListener(uploadEvents.progress, uploadProgressHandler, false);\n                xhr.addEventListener(uploadEvents.load, uploadCompleteHandler, false);\n                xhr.addEventListener(uploadEvents.error, uploadFailedHandler, false);\n                xhr.addEventListener(uploadEvents.abort, uploadCanceledHandler, false);\n                xhr.open(method, url);\n                xhr.onload = function (event) {\n                    showMessageToUser(event);\n                    exports.cleanUpAfterUpload();\n                    if (callback) callback(event, isError(this.status));\n                };\n                xhr.send(formData);\n            },\n            initFilesUpload: function (url, files, fieldName, callback) {\n                if (fieldName) {\n                    exports.fieldName = fieldName;\n                }\n                exports.setFiles(files);\n                exports.makeFilesUpload(url, callback);\n            },\n            cleanUpAfterUpload: function () {\n                exports.uploadProgress = 0;\n                exports.clearFiles();\n            }\n        };\n\n        function isError(status) {\n            var firstErrorCode = 400;\n            return (status >= firstErrorCode);\n\n        }\n\n        function showMessageToUser(event) {\n            var delay = 1000;\n            var status = event.target.status;\n\n            $timeout(function () {\n                if (status === HTTP_STATUS.UNPROCESSABLE_ENTITY) {\n                    MessagesFactory.errorMsg(_messages.invalidFileError);\n                } else if (isError(status)) {\n                    MessagesFactory.statusErrorMsg(status);\n                } else {\n                    MessagesFactory.successMsg(_messages.successFileUploadComplete);\n                }\n            }, delay);\n\n        }\n\n        function uploadProgressHandler(evt) {\n            if (evt.lengthComputable) {\n                exports.uploadProgress = Math.round(evt.loaded * 100 / evt.total);\n            } else {\n                exports.uploadProgress = '???';\n            }\n        }\n\n        function uploadCompleteHandler(evt) {\n            //var delay = 1000;\n            //$timeout(function () {\n            //    MessagesFactory.successMsg(_messages.successFileUploadComplete);\n            //}, delay);\n        }\n\n        function uploadFailedHandler(evt) {\n            var delay = 1000;\n            $timeout(function () {\n                MessagesFactory.errorMsg(_messages.errorFileUpload);\n            }, delay);\n        }\n\n        function uploadCanceledHandler(evt) {\n            var delay = 1000;\n            $timeout(function () {\n                MessagesFactory.infoMsg(_messages.infoUploadCanceled);\n            }, delay);\n        }\n\n        return exports;\n\n    }])\n;\n\n\n'use strict';\n\nangular.module('app.transition', [])\n\n    .directive('bgColorTransition', ['$state', '$timeout', function ($state, $timeout) {\n        return {\n            restrict: 'A',\n            replace: true,\n            link: function (scope, elem) {\n                var result;\n                var regex = new RegExp('trans_\\\\w*', 'g');\n\n                scope.$watch(function () {\n                        return $state.current;\n                    }, function () {\n                        result = '';\n                        if ($state.includes('accounts')) result = 'trans_sky_body';\n                        if ($state.includes('analytics')) result = 'trans_blue_body';\n                        if ($state.includes('bots')) result = 'trans_dark_blue_body';\n                        if ($state.includes('cards')) result = 'trans_dark_purple_body';\n                        if ($state.includes('dashboard')) result = 'trans_black_body no_bg_img';\n                        if ($state.includes('facts')) result = 'trans_alizarin_body';\n                        if ($state.includes('gathering')) result = 'trans_pink_body';\n                        if ($state.includes('launch')) result = 'trans_green_body';\n                        if ($state.includes('macros')) result = 'trans_purple_body';\n                        if ($state.includes('photos')) result = 'trans_pink_2_body';\n                        if ($state.includes('profiles')) result = 'trans_pomegranat_body';\n                        if ($state.includes('proxy')) result = 'trans_green_see_body';\n                        if ($state.includes('tags')) result = 'trans_pink_2_body';\n                        if ($state.includes('targets')) result = 'trans_green_see_body';\n                        if ($state.includes('sequences')) result = 'trans_green_see_body';\n                        if ($state.includes('users')) result = 'trans_green_2_body';\n                        if ($state.includes('simcards')) result = 'trans_green_3_body';\n                        if ($state.includes('groups')) result = 'trans_lilac_body';\n                        if ($state.includes('comments')) result = 'trans_lilac_body';\n                        var sleep = 200;\n\n                        $timeout(function () {\n                            elem[0].className = elem[0].className.replace(regex, '');\n                            elem[0].className = elem[0].className.replace('no_bg_img', '');\n                            elem.addClass(result);\n                        }, sleep);\n                    }, true\n                );\n            }\n        };\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.header', [])\n\n    .directive('mainHeader', ['$window', 'urlMap', 'UserFactory', '$stateParams', '$state', function ($window, urlMap, UserFactory, $stateParams, $state) {\n        return {\n            restrict: 'E',\n            scope: {},\n            replace: true,\n            templateUrl: 'header/header.html',\n            controller: ['$scope', '$state', function ($scope, $state) {\n\n                (function _init() {\n                    $scope.$state = $state;\n                    $scope.isNavbarCollapsed = true;\n                    $scope.UserFactory = UserFactory;\n                })();\n            }],\n            link: function (scope) {\n                scope.logout = function () {\n                    $window.location.href = urlMap['users.logout'];\n                };\n\n                scope.getName = function () {\n                    return (UserFactory.currentUser.name || UserFactory.currentUser.surname) ? UserFactory.currentUser.name + ' ' + UserFactory.currentUser.surname : UserFactory.currentUser.username;\n                };\n\n                scope.getCurrentUserUrl = function () {\n                    $stateParams.id = scope.UserFactory.currentUser.id;\n                    return $state.href('users.edit', $stateParams);\n                };\n\n                scope.isCurrentUserAdmin = function () {\n                    return scope.UserFactory.currentUser.is_admin;\n                };\n            }\n        };\n    }])\n;\n'use strict';\n\nangular.module('app.pages.accounts', [\n    'app.pages.accounts.modals.add_account',\n    'app.pages.accounts.modals.remove_account',\n    'app.pages.accounts.modals.edit_account',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('accounts', {\n                url: '/accounts',\n                templateUrl: 'accounts/accounts.html',\n                controller: 'AccountsPageCtrl'\n            })\n\n            .state('accounts.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'accounts/add_account_modal/add_account_modal.html',\n                        controller: 'AddAccountModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('accounts.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'AccountsFactory', function ($stateParams, $state, $modal, AccountsFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'accounts/edit_account_modal/edit_account_modal.html',\n                        controller: 'EditAccountModalCtrl',\n                        resolve: {\n                            accountData: function () {\n                                return AccountsFactory.getAccountsListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('accounts.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'AccountsFactory', function ($stateParams, $state, $modal, AccountsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'accounts/remove_accounts_modal/remove_accounts_modal.html',\n                        controller: 'RemoveAccountsModalCtrl',\n                        resolve: {\n                            accountsData: function () {\n                                return AccountsFactory.getAccountsListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('AccountsPageCtrl', ['$scope', '$modal', '$window', 'AccountsFactory', '$stateParams', '$state', 'DatesFactory', 'NgTableUtilsFactory', function ($scope, $modal, $window, AccountsFactory, $stateParams, $state, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {name: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return AccountsFactory.getAccountsList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.goToExternalLink = function (account) {\n            $window.open(account.url, '_blank');\n        };\n\n        $scope.entity = {\n            selectedAccounts: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectAccount: function (account) {\n                $scope.entity.selectedAccounts[account.id] = account;\n                account.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedAccounts).length;\n            },\n            toggleSelect: function (account) {\n                if ($scope.entity.selectedAccounts[account.id]) {\n                    $scope.entity.unSelectAccount(account);\n                } else {\n                    $scope.entity.selectAccount(account);\n                }\n            },\n            unSelectAccount: function (account) {\n                delete $scope.entity.selectedAccounts[account.id];\n                delete account.isSelected;\n            },\n            selectAllAccounts: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var account = $scope.tableParams.data[i];\n                    $scope.entity.selectAccount(account);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedAccountsLength = Object.keys($scope.entity.selectedAccounts).length;\n\n                if (selectedAccountsLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllAccounts();\n                } else {\n                    $scope.entity.selectAllAccounts();\n                }\n            },\n            unSelectAllAccounts: function () {\n                for (var key in $scope.entity.selectedAccounts) {\n                    if ($scope.entity.selectedAccounts.hasOwnProperty(key)) {\n                        var account = $scope.entity.selectedAccounts[key];\n                        $scope.entity.unSelectAccount(account);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedAccounts = {};\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showEditModal: function (account) {\n                $stateParams.id = account.id;\n                $state.go('accounts.edit', $stateParams);\n            },\n            showAddModal: function () {\n                $state.go('accounts.add');\n            },\n            showRemoveModal: function (account) {\n                $stateParams.ids = account.id;\n                $state.go('accounts.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedAccounts).toString();\n                $state.go('accounts.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.entityFactory = AccountsFactory;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n;\n'use strict';\n\nangular.module('app.pages.analytics', [\n    'app.pages.analytics.modals.save_query',\n    'app.pages.analytics.modals.load_query',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('analytics', {\n                url: '/analytics?macros&startDate&endDate&queries',\n                templateUrl: 'analytics/analytics.html',\n                controller: 'AnalyticsPageCtrl'\n            })\n\n            .state('analytics.save_query', {\n                url: '/save_query',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'analytics/save_query_modal/save_query_modal.html',\n                        controller: 'SaveQueryModalCtrl'\n                    }).result.finally(function () {\n                            //      $state.go('^');\n                        });\n                }]\n            })\n\n            .state('analytics.load_query', {\n                url: '/load_query',\n                onEnter: ['$stateParams', '$state', '$modal', 'AnalyticsFactory', function ($stateParams, $state, $modal, AnalyticsFactory) {\n                    $modal.open({\n                        templateUrl: 'analytics/load_query_modal/load_query_modal.html',\n                        controller: 'LoadQueryModalCtrl',\n                        resolve: {\n                            queriesListData: function () {\n                                return AnalyticsFactory.getSavedQueriesList();\n                            }\n                        }\n                    }).result.finally(function () {\n                            //      $state.go('^');\n                        });\n                }]\n            })\n\n        ;\n    }])\n\n    .controller('AnalyticsPageCtrl', ['$scope', 'AnalyticsFactory', 'MacrosFactory', 'FeedsFactory', 'PERIOD', '$sce', '$location', '$filter', '$window', '$state', '$q', 'MessagesFactory', function ($scope, AnalyticsFactory, MacrosFactory, FeedsFactory, PERIOD, $sce, $location, $filter, $window, $state, $q, MessagesFactory) {\n\n        var _messages = {\n            shouldBeAnArrayError: 'Queries list should be an array',\n            unrecognizedGraphError: 'Unrecognized graph'\n        };\n\n        function _prepareQueries(queriesList) {\n            if (!angular.isArray(queriesList)) return MessagesFactory.throwDeveloperError(_messages.shouldBeAnArrayError);\n\n            var result = {};\n\n            for (var i = 0; i < queriesList.length; i++) {\n                var query = queriesList[i];\n                query.id = i;\n                result[i] = (query.text);\n            }\n\n            return result;\n        }\n\n        function _convertFromUnixTime(item) {\n            return item.date * 1000;\n        }\n\n        function _bindOnClick(chart, callback) {\n            var chartId = chart.container.id;\n            angular.element('#' + chartId).click(function () {\n                callback(chart);\n            });\n        }\n\n        function _getMacrosIds(macrosArr) {\n            var result = [];\n            for (var i = 0; i < macrosArr.length; i++) {\n                var macros = macrosArr[i];\n                result.push(macros.id);\n            }\n\n            return result.toString();\n        }\n\n        $scope.filterParams = {\n            params: {\n                queries: [],\n                macros: [],\n                startDate: new Date().getTime() - (PERIOD.day * 7),\n                endDate: new Date().getTime()\n            },\n            dropdownMacrosList: [],\n            searchMacros: function (search) {\n                return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                    $scope.filterParams.dropdownMacrosList = data.results;\n                });\n            },\n            getQueriesLeftCount: function () {\n                var maxQueriesCount = 10;\n                return maxQueriesCount - $scope.filterParams.params.queries.length;\n            },\n            setPramsAsUrl: function (params) {\n                angular.forEach(params, function (value, key) {\n\n                        //Objects and arrays to string\n                        if (key === 'macros') {\n                            value = _getMacrosIds(value);\n                        } else if (angular.isArray(value) || angular.isObject(value[0])) {\n                            value = JSON.stringify(value);\n                        } else if (angular.isDate(value)) {\n                            value = value.getTime();\n                        }\n\n                        //remove value if empty (or empty array, obj, etc...)\n                        if (value === '' || value === ' ' || value === '[]' || value === '{}') {\n                            value = null;\n                        }\n\n                        //set the value\n                        $location.search(key, value);\n                    }\n                );\n            },\n            getParamsFromUrl: function () {\n                var urlParams = $location.search();\n\n                if (urlParams.startDate) $scope.filterParams.params.startDate = urlParams.startDate;\n                if (urlParams.endDate) $scope.filterParams.params.endDate = urlParams.endDate;\n                if (urlParams.queries) $scope.filterParams.params.queries = JSON.parse(urlParams.queries);\n\n                if (urlParams.macros) {\n                    var macrosIdsArr = (urlParams.macros).split(',');\n                    MacrosFactory.getMacrosListByIds(macrosIdsArr).then(function (data) {\n                        $scope.filterParams.params.macros = data.results;\n                    });\n                }\n            },\n            resetParams: function () {\n                $scope.filterParams.params = {\n                    queries: [],\n                    macros: [],\n                    startDate: new Date().getTime() - (PERIOD.day * 7),\n                    endDate: new Date().getTime()\n                };\n\n                $scope.filterParams.setPramsAsUrl($scope.filterParams.params);\n            },\n            showSaveQueryModal: function () {\n                $scope.filterParams.setPramsAsUrl($scope.filterParams.params);\n                $state.go('analytics.save_query', null, {location: false, reload: true});\n            },\n            showLoadQueryModal: function () {\n                $state.go('analytics.load_query', null, {location: false, reload: true});\n            }\n        };\n\n        $scope.feeds = {\n            page: 2,\n            itemsPerPage: 20,\n            isBusy: false,\n            isAllFeedsLoaded: false,\n            showFeeds: function (startDate, endDate, page, isAppend) {\n                var unFormattedStartDate = (!!startDate) ? startDate : $scope.filterParams.params.startDate;\n                var unFormattedEndDate = (!!endDate) ? endDate : $scope.filterParams.params.endDate;\n\n                var formattedStartDate = $filter('date')(unFormattedStartDate, dateFormat);\n                var formattedEndDate = $filter('date')(unFormattedEndDate, dateFormat);\n                var queries = _prepareQueries($scope.filterParams.params.queries);\n                var macrosIds = _getMacrosIds($scope.filterParams.params.macros);\n\n                return FeedsFactory.getFeedsList(formattedStartDate, formattedEndDate, queries, macrosIds, page, isAppend);\n            },\n            loadNewFeedsPage: function () {\n                if ($scope.feeds.isBusy || $scope.feeds.isAllFeedsLoaded) return $q(function () {\n                });\n\n                return $scope.feeds.showFeeds(null, null, $scope.feeds.page, true).then(function (data) {\n                    if (data.results.length <= $scope.feeds.itemsPerPage) {\n                        $scope.feeds.isAllFeedsLoaded = true;\n                        return;\n                    }\n\n                    $scope.feeds.page += 1;\n                    $scope.feeds.isBusy = false;\n                });\n            }\n        };\n\n        $scope.charts = {\n            data: [],\n            types: {\n                line: 'line'\n            },\n            _getDatesRange: function (dateArr) {\n                var result = {\n                    min: dateArr[0].x,\n                    max: dateArr[0].x\n                };\n\n                for (var i = 0; i < dateArr.length; i++) {\n                    var date = dateArr[i].x;\n                    if (date < result) {\n                        result.min = date;\n                    } else {\n                        result.max = date;\n                    }\n                }\n\n                return result;\n            },\n            _selectGraphPoint: function (chart) {\n                var selectedPoints = chart.getSelectedPoints();\n\n                if (selectedPoints && selectedPoints.length > 0) {\n                    var dateRange = $scope.charts._getDatesRange(selectedPoints);\n                    $scope.feeds.showFeeds(dateRange.min, dateRange.max);\n                }\n            },\n            _getQueryName: function (key) {\n                for (var i = 0; i < $scope.filterParams.params.queries.length; i++) {\n                    var query = $scope.filterParams.params.queries[i];\n                    if (+query.id === +key) {\n                        return query.text;\n                    }\n                }\n\n                MessagesFactory.throwDeveloperError(_messages.unrecognizedGraphError);\n                return _messages.unrecognizedGraphError;\n            },\n            _prepareSeriesData: function (data) {\n                var seriesList = [];\n\n                for (var k in data) {\n                    if (data.hasOwnProperty(k)) {\n                        var series = data[k]; // [{value: 0, date: now}, {...}, {...}]\n                        var seriesData = [];\n\n                        for (var j = 0; j < series.length; j++) {\n                            var dataItem = series[j]; //{value: 0, date: now}\n                            seriesData.push([dataItem.date, dataItem.value]);\n                        }\n\n                        seriesList.push({\n                            name: $scope.charts._getQueryName(k),\n                            data: seriesData\n                        });\n                    }\n                }\n\n                return seriesList;\n            },\n            _prepareAnalyticsOnGet: function (data) {\n                for (var k in data) {\n                    if (data.hasOwnProperty(k)) {\n                        var graphData = data[k];\n                        for (var i = 0; i < graphData.length; i++) {\n                            var pointData = graphData[i];\n                            pointData.date = _convertFromUnixTime(pointData);\n                        }\n                    }\n                }\n\n                return data;\n\n            },\n            _prepareParamsForSend: function (params) {\n                var startDate = (params.startDate) ? $filter('date')(params.startDate, dateFormat) : null;\n                var endDate = (params.endDate) ? $filter('date')(params.endDate, dateFormat) : null;\n                var queries = (params.queries) ? _prepareQueries(params.queries) : null;\n\n                var macrosIds = [];\n                for (var i = 0; i < params.macros.length; i++) {\n                    var macros = params.macros[i];\n                    macrosIds.push(macros.id);\n                }\n\n                return {startDate: startDate, endDate: endDate, queries: queries, macrosIds: macrosIds};\n            },\n            createHighChartBox: function (settings) {\n                var chart = new $window.Highcharts.Chart(settings);\n                _bindOnClick(chart, $scope.charts._selectGraphPoint);\n\n                return chart;\n            },\n            buildChartData: function () {\n                var params = $scope.charts._prepareParamsForSend($scope.filterParams.params);\n                var startDate = params.startDate;\n                var endDate = params.endDate;\n                var queries = params.queries;\n                var macrosIds = params.macrosIds;\n\n                return AnalyticsFactory.getAnalyticsData(startDate, endDate, queries, macrosIds).then(function (data) {\n                    var analyticsData = $scope.charts._prepareAnalyticsOnGet(data.results);\n                    $scope.charts.makeChart(analyticsData);\n                });\n            },\n            makeChart: function (data) {\n                var chartContainerId = 'chartdiv';\n\n                var settings = {\n                    chart: {\n                        renderTo: chartContainerId,\n                        type: 'line'\n                    },\n                    title: {\n                        text: 'Аналитика'\n                    },\n                    tooltip: {\n                        //formatter: function() {\n                        //    return '<b>' + this.y + '</b> запросов';\n                        //}\n                    },\n                    xAxis: {\n                        type: 'datetime',\n                        tickInterval: PERIOD.day,\n                        gridLineWidth: 1\n                    },\n                    yAxis: {\n                        floor: 0,\n                        title: {\n                            text: 'Запросы'\n                        }\n                    },\n                    plotOptions: {\n                        series: {\n                            allowPointSelect: true\n                        }\n                    },\n                    series: $scope.charts._prepareSeriesData(data)\n                };\n\n                $scope.charts.createHighChartBox(settings);\n            }\n        };\n\n        var dateFormat = 'dd.MM.yyyy';\n\n        $scope.datePopups = {\n            isStartDatePopupOpened: false,\n            isEndDatePopupOpened: false,\n            dateFormat: dateFormat,\n            dateOptions: {\n                startingDay: 1,\n                showWeeks: false\n            },\n            openStartDatePopup: function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n\n                $scope.datePopups.isStartDatePopupOpened = true;\n            },\n            openEndDatePopup: function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n\n                $scope.datePopups.isEndDatePopupOpened = true;\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        $scope.getAnalytics = function () {\n            $scope.filterParams.setPramsAsUrl($scope.filterParams.params);\n\n            $scope.charts.buildChartData().then(function () {\n                $scope.feeds.showFeeds();\n            });\n        };\n\n        (function _init() {\n            $scope.filterParams.getParamsFromUrl();\n            $scope.AnalyticsFactory = AnalyticsFactory;\n            $scope.FeedsFactory = FeedsFactory;\n        })();\n\n    }])\n\n    .directive('restrictToMaxTags', function () {\n        var KEY_BACKSPACE = 8;\n        var KEY_TAB = 9;\n        var priority = -10;\n\n        return {\n            require: 'ngModel',\n            priority: priority,\n            link: function ($scope, $element, $attrs, ngModelController) {\n                var tagsInputScope = $element.isolateScope(),\n                    maxTags,\n                    getTags,\n                    checkTags,\n                    maxTagsReached,\n                    input = $element.find('input'),\n                    placeholder;\n\n                $attrs.$observe('maxTags', function (_maxTags) {\n                    maxTags = _maxTags;\n                });\n\n                getTags = function () {\n                    return ngModelController.$modelValue;\n                };\n\n                checkTags = function () {\n                    var tags = getTags();\n                    if (tags && tags.length && tags.length >= maxTags) {\n                        if (!maxTagsReached) {\n                            // trigger the autocomplete to hide\n                            tagsInputScope.events.trigger('input-blur');\n                            placeholder = input.attr('placeholder');\n                            input.attr('placeholder', '');\n                            // use max-width to avoid conflicts with the tiAutosize\n                            // directive that ngTagsInput uses\n                            input.css('max-width', '0');\n                            maxTagsReached = true;\n                        }\n                    } else if (maxTagsReached) {\n                        input.attr('placeholder', placeholder);\n                        input.css('max-width', '');\n                        maxTagsReached = false;\n                    }\n                };\n\n                $scope.$watchCollection(getTags, checkTags);\n\n                // prevent any keys from being entered into\n                // the input when max tags is reached\n                input.on('keydown', function (event) {\n                    if (maxTagsReached && event.keyCode !== KEY_BACKSPACE && event.keyCode !== KEY_TAB) {\n                        event.stopImmediatePropagation();\n                        event.preventDefault();\n                    }\n                });\n\n                // prevent the autocomplete from being triggered\n                input.on('focus', function (event) {\n                    checkTags();\n                    if (maxTagsReached) {\n                        tagsInputScope.hasFocus = true;\n                        event.stopImmediatePropagation();\n                    }\n                });\n            }\n        };\n    })\n\n    .filter('analyticCardDataFilter', ['ScriptFactory', '$sce', function (ScriptFactory, $sce) {\n        function toStringWithBreaks(array) {\n            return array.join(',<br/>').toString();\n        }\n\n        var result = [];\n\n        return function (value) {\n            if (!value || value === '' || value === ' ') {\n                result = [];\n                return;\n            }\n\n            if (result.length > 0) {\n                result = [];\n            }\n\n            for (var k in value) {\n                if (value.hasOwnProperty(k)) {\n                    result.push(k + ': ' +  value[k]);\n                }\n            }\n\n            return $sce.trustAsHtml(toStringWithBreaks(result));\n        };\n    }])\n\n\n;\n'use strict';\n\nangular.module('app.pages.bots', [\n    'app.pages.bots.modals.add_bot',\n    'app.pages.bots.modals.remove_bot',\n    'app.pages.bots.modals.edit_bot',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('bots', {\n                url: '/bots',\n                templateUrl: 'bots/bots.html',\n                controller: 'BotsPageCtrl'\n            })\n            .state('bots.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'bots/add_bot_modal/add_bot_modal.html',\n                        controller: 'AddBotModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('bots.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'BotsFactory', function ($stateParams, $state, $modal, BotsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'bots/remove_bot_modal/remove_bot_modal.html',\n                        controller: 'RemoveBotModalCtrl',\n                        resolve: {\n                            botsData: function () {\n                                return BotsFactory.getBotsById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('bots.edit', {\n                url: '/edit/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'BotsFactory', function ($stateParams, $state, $modal, BotsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'bots/edit_bot_modal/edit_bot_modal.html',\n                        controller: 'EditBotModalCtrl',\n                        resolve: {\n                            botsData: function () {\n                                return BotsFactory.getBotsById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('BotsPageCtrl', ['$scope', '$modal', '$window', 'BotsFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', function ($scope, $modal, $window, BotsFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return BotsFactory.getBotsList(page, limit, sorting, filter);\n        });\n\n         $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.updateBots = function (bot) {\n            BotsFactory.updateBots(bot);\n        };\n\n        $scope.entity = {\n            selectedBots: [],\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedBots).length;\n            },\n            toggleItemSelect: function (bot) {\n                if ($scope.entity.selectedBots[bot.id]) {\n                    $scope.entity.unSelectBot(bot);\n                } else {\n                    $scope.entity.selectBots(bot);\n                }\n            },\n            selectBots: function (bot) {\n                $scope.entity.selectedBots[bot.id] = bot;\n                bot.isSelected = true;\n            },\n            selectAllBots: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var bot = $scope.tableParams.data[i];\n                    $scope.entity.selectBots(bot);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedBotsLength = Object.keys($scope.entity.selectedBots).length;\n\n                if (selectedBotsLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllBots();\n                } else {\n                    $scope.entity.selectAllBots();\n                }\n            },\n            unSelectBot: function (bot) {\n                delete $scope.entity.selectedBots[bot.id];\n                delete bot.isSelected;\n            },\n            unSelectAllBots: function () {\n                for (var key in $scope.entity.selectedBots) {\n                    if ($scope.entity.selectedBots.hasOwnProperty(key)) {\n                        var bot = $scope.entity.selectedBots[key];\n                        $scope.entity.unSelectBot(bot);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedBots = {};\n            },\n            showAddModal: function () {\n                $state.go('bots.add', $stateParams);\n            },\n            showEditModal: function (bot) {\n                $stateParams.ids = bot.id;\n                $state.go('bots.edit', $stateParams);\n            },\n            showRemoveModal: function (bot) {\n                $stateParams.ids = bot.id;\n                $state.go('bots.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedBots).toString();\n                $state.go('bots.remove', $stateParams);\n            }\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.cards', [\n    'app.pages.cards.modals.add_card',\n    'app.pages.cards.modals.remove_card',\n    'app.pages.cards.modals.edit_card',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('cards', {\n                url: '/cards',\n                templateUrl: 'cards/cards.html',\n                controller: 'CardsPageCtrl'\n            })\n            .state('cards.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'cards/add_card_modal/add_card_modal.html',\n                        controller: 'AddCardModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('cards.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'CardFactory', function ($stateParams, $state, $modal, CardFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'cards/remove_card_modal/remove_card_modal.html',\n                        controller: 'RemoveCardModalCtrl',\n                        resolve: {\n                            cardsData: function () {\n                                return CardFactory.getCardsById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('cards.edit', {\n                url: '/edit/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'CardFactory', function ($stateParams, $state, $modal, CardFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'cards/edit_card_modal/edit_card_modal.html',\n                        controller: 'EditCardModalCtrl',\n                        resolve: {\n                            cardsData: function () {\n                                return CardFactory.getCardsById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('CardsPageCtrl', ['$scope', '$state', 'CardFactory', '$filter', '$stateParams', 'toaster', 'DatesFactory', 'NgTableUtilsFactory', function ($scope, $state, CardFactory, $filter, $stateParams, toaster, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return CardFactory.getCardsList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedCards: [],\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('cards.add', $stateParams);\n            },\n            updateCard: function (card) {\n                CardFactory.updateCard(card).then(function () {\n                    $scope.reloadTableData();\n                });\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            showRemoveModal: function (card) {\n                $stateParams.ids = card.id;\n                $state.go('cards.remove', $stateParams);\n            },\n            showEditModal: function (card) {\n                $stateParams.ids = card.id;\n                $state.go('cards.edit', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedCards).toString();\n                $state.go('cards.remove', $stateParams);\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedCards).length;\n            },\n            toggleItemSelect: function (card) {\n                if ($scope.entity.selectedCards[card.id]) {\n                    $scope.entity.unSelectCard(card);\n                } else {\n                    $scope.entity.selectCards(card);\n                }\n            },\n            selectCards: function (card) {\n                $scope.entity.selectedCards[card.id] = card;\n                card.isSelected = true;\n            },\n            selectAllCards: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var card = $scope.tableParams.data[i];\n                    $scope.entity.selectCards(card);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedCardsLength = Object.keys($scope.entity.selectedCards).length;\n\n                if (selectedCardsLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllCards();\n                } else {\n                    $scope.entity.selectAllCards();\n                }\n            },\n            unSelectCard: function (card) {\n                delete $scope.entity.selectedCards[card.id];\n                delete card.isSelected;\n            },\n            unSelectAllCards: function () {\n                for (var key in $scope.entity.selectedCards) {\n                    if ($scope.entity.selectedCards.hasOwnProperty(key)) {\n                        var card = $scope.entity.selectedCards[key];\n                        $scope.entity.unSelectCard(card);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedCards = {};\n            }\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function init() {\n            $scope.query = null;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n    .filter('cardDataFilter', ['ScriptFactory', '$sce', function (ScriptFactory, $sce) {\n        function trimLength(value) {\n            var maxLength = 20;\n            return (\"\" + value).substr(0, maxLength);\n        }\n\n        function toStringWithBreaks(array) {\n            return array.join(',<br/>').toString();\n        }\n\n        return function (value) {\n            var data;\n\n            if (!value || value === '' || value === ' ') return '';\n            var result = [];\n            var isParsable = ScriptFactory.isCanParse(value);\n            if (isParsable) {\n                data = JSON.parse(value);\n            } else {\n                return '';\n            }\n\n            for (var k in data) {\n                if (data.hasOwnProperty(k)) {\n                    result.push(k + ':' + trimLength(data[k]));\n                }\n            }\n\n            return $sce.trustAsHtml(toStringWithBreaks(result));\n        };\n    }])\n\n;\n'use strict';\n\nangular.module('app.pages.comments', [\n    'app.pages.comments.modals.add_comment',\n    'app.pages.comments.modals.edit_comment',\n    'app.pages.comments.modals.remove_comment',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('comments', {\n                url: '/comments',\n                templateUrl: 'comments/comments.html',\n                controller: 'CommentPageCtrl'\n            })\n            .state('comments.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'comments/add_comment_modal/add_comment_modal.html',\n                        controller: 'AddCommentModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('comments.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'CommentsFactory', function ($stateParams, $state, $modal, CommentsFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'comments/edit_comment_modal/edit_comment_modal.html',\n                        controller: 'EditCommentModalCtrl',\n                        resolve: {\n                            commentData: function () {\n                                return CommentsFactory.getCommentListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('comments.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'CommentsFactory', function ($stateParams, $state, $modal, CommentsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'comments/remove_comment_modal/remove_comment_modal.html',\n                        controller: 'RemoveCommentModalCtrl',\n                        resolve: {\n                            commentData: function () {\n                                return CommentsFactory.getCommentListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n        ;\n    }])\n\n    .controller('CommentPageCtrl', ['$scope', '$modal', '$window', '$state', 'CommentsFactory', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', function($scope, $modal, $window, $state, CommentsFactory, $stateParams, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n            return CommentsFactory.getCommentList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedComment: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedComment).length;\n            },\n            selectComment: function (comment) {\n                $scope.entity.selectedComment[comment.id] = comment;\n                comment.isSelected = true;\n            },\n            unSelectComment: function (comment) {\n                delete $scope.entity.selectedComment[comment.id];\n                delete comment.isSelected;\n            },\n            toggleItemSelect: function (comment) {\n                if ($scope.entity.selectedComment[comment.id]) {\n                    $scope.entity.unSelectComment(comment);\n                } else {\n                    $scope.entity.selectComment(comment);\n                }\n            },\n            selectAllComment: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var comment = $scope.tableParams.data[i];\n                    $scope.entity.selectComment(comment);\n                }\n            },\n            unSelectAllComment: function () {\n                for (var key in $scope.entity.selectedComment) {\n                    if ($scope.entity.selectedComment.hasOwnProperty(key)) {\n                        var comment = $scope.entity.selectedComment[key];\n                        $scope.entity.unSelectComment(comment);\n                    }\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedCommentLength = Object.keys($scope.entity.selectedComment).length;\n\n                if (selectedCommentLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllComment();\n                } else {\n                    $scope.entity.selectAllComment();\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedComment = {};\n            },\n\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('comments.add');\n            },\n            showEditModal: function (comment) {\n                $stateParams.id = comment.id;\n                $state.go('comments.edit', $stateParams);\n            },\n            showRemoveModal: function (comment) {\n                $stateParams.ids = comment.id;\n                $state.go('comments.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedComment).toString();\n                $state.go('comments.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.dashboard', [\n    'app.pages.dashboard.modals.add_bot',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('dashboard', {\n                url: '/dashboard',\n                templateUrl: 'dashboard/dashboard.html',\n                controller: 'DashboardPageCtrl'\n            })\n        ;\n\n        $stateProvider\n            .state('dashboard.add_bots', {\n                url: '/dashboard/bots/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'dashboard/add_bots_modal/add_bots_modal.html',\n                        controller: 'AddBotsModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('DashboardPageCtrl', ['$scope', 'UserFactory', 'TargetsFactory', '$state', 'PERIOD', '$window', '$timeout', function ($scope, UserFactory, TargetsFactory, $state, PERIOD, $window, $timeout) {\n\n        $scope.getName = function () {\n            return (UserFactory.currentUser.name || UserFactory.currentUser.surname) ? UserFactory.currentUser.name + ' ' + UserFactory.currentUser.surname : UserFactory.currentUser.username;\n        };\n\n\n        $scope.addBots = function () {\n          $state.go('dashboard.add_bots');\n        };\n\n        $scope.charts = {\n            settings: {\n                chart: {\n                    renderTo: 'macros_errors_chartdiv',\n                    type: 'areaspline',\n                    spacingLeft: 0,\n                    spacingRight: 0,\n                    spacingBottom: 0,\n                    marginLeft: 0,\n                    marginRight: 0,\n                    marginBottom: 0,\n                    paddingLeft: 0,\n                    paddingRight: 0,\n                    paddingBottom: 0\n                },\n                title: {\n                    text: null\n                },\n                tooltip: {\n                    //formatter: function() {\n                    //    return '<b>' + this.y + '</b> запросов';\n                    //}\n                },\n                xAxis: {\n                    type: 'datetime',\n                    tickInterval: PERIOD.day,\n                    gridLineWidth: 0,\n                    labels: {\n                        enabled: false\n                    },\n                    title: {\n                        text: null\n                    }\n                },\n                yAxis: {\n                    floor: 0,\n                    //title: {\n                    //    text: 'Ошибки'\n                    //},\n                    labels: {\n                        enabled: false\n                    },\n                    title: {\n                        text: null\n                    },\n                    gridLineWidth: 0\n                },\n                legend: {\n                    enabled: false\n                }\n                //plotOptions: {\n                //    series: {\n                //        allowPointSelect: true\n                //    }\n                //}\n            },\n            buildChartData: function () {\n                $timeout(function () {\n                    //TODO (S.Panfilov) mock data here\n                    var series = [\n                        {\n                            name: 'Распарсено карточек',\n                            color: '#00c0ef',\n                            data: [\n                                [new Date(2015, 6, 1).getTime(), 1],\n                                [new Date(2015, 6, 2).getTime(), 2],\n                                [new Date(2015, 6, 3).getTime(), 1],\n                                [new Date(2015, 6, 4).getTime(), 1],\n                                [new Date(2015, 6, 5).getTime(), 2],\n                                [new Date(2015, 6, 6).getTime(), 2],\n                                [new Date(2015, 6, 7).getTime(), 2],\n                                [new Date(2015, 6, 8).getTime(), 3],\n                                [new Date(2015, 6, 9).getTime(), 3],\n                                [new Date(2015, 6, 10).getTime(), 4],\n                                [new Date(2015, 6, 11).getTime(), 5],\n                                [new Date(2015, 6, 12).getTime(), 6],\n                                [new Date(2015, 6, 13).getTime(), 7],\n                                [new Date(2015, 6, 14).getTime(), 7],\n                                [new Date(2015, 6, 15).getTime(), 6],\n                                [new Date(2015, 6, 16).getTime(), 6],\n                                [new Date(2015, 6, 17).getTime(), 5],\n                                [new Date(2015, 6, 18).getTime(), 4],\n                                [new Date(2015, 6, 19).getTime(), 3],\n                                [new Date(2015, 6, 20).getTime(), 3],\n                                [new Date(2015, 6, 21).getTime(), 3],\n                                [new Date(2015, 6, 22).getTime(), 2],\n                                [new Date(2015, 6, 23).getTime(), 2],\n                                [new Date(2015, 6, 24).getTime(), 1],\n                                [new Date(2015, 6, 25).getTime(), 1],\n                                [new Date(2015, 6, 26).getTime(), 1],\n                                [new Date(2015, 6, 27).getTime(), 1],\n                                [new Date(2015, 6, 28).getTime(), 1],\n                                [new Date(2015, 6, 29).getTime(), 1],\n                                [new Date(2015, 6, 30).getTime(), 1],\n                                [new Date(2015, 6, 31).getTime(), 1]\n                            ]\n                        },\n                        {\n                            name: 'Ошибки сценариев',\n                            color: '#dd4b39',\n                            data: [\n                                [new Date(2015, 6, 1).getTime(), 0],\n                                [new Date(2015, 6, 2).getTime(), 0],\n                                [new Date(2015, 6, 3).getTime(), 0],\n                                [new Date(2015, 6, 4).getTime(), 2],\n                                [new Date(2015, 6, 5).getTime(), 3],\n                                [new Date(2015, 6, 6).getTime(), 3],\n                                [new Date(2015, 6, 7).getTime(), 2],\n                                [new Date(2015, 6, 8).getTime(), 2],\n                                [new Date(2015, 6, 9).getTime(), 3],\n                                [new Date(2015, 6, 10).getTime(), 1],\n                                [new Date(2015, 6, 11).getTime(), 0],\n                                [new Date(2015, 6, 12).getTime(), 1],\n                                [new Date(2015, 6, 13).getTime(), 2],\n                                [new Date(2015, 6, 14).getTime(), 3],\n                                [new Date(2015, 6, 15).getTime(), 4],\n                                [new Date(2015, 6, 16).getTime(), 3],\n                                [new Date(2015, 6, 17).getTime(), 2],\n                                [new Date(2015, 6, 18).getTime(), 2],\n                                [new Date(2015, 6, 19).getTime(), 2],\n                                [new Date(2015, 6, 20).getTime(), 1],\n                                [new Date(2015, 6, 21).getTime(), 4],\n                                [new Date(2015, 6, 22).getTime(), 3],\n                                [new Date(2015, 6, 23).getTime(), 2],\n                                [new Date(2015, 6, 24).getTime(), 1],\n                                [new Date(2015, 6, 25).getTime(), 1],\n                                [new Date(2015, 6, 26).getTime(), 1],\n                                [new Date(2015, 6, 27).getTime(), 1],\n                                [new Date(2015, 6, 28).getTime(), 1],\n                                [new Date(2015, 6, 29).getTime(), 0],\n                                [new Date(2015, 6, 30).getTime(), 0],\n                                [new Date(2015, 6, 31).getTime(), 0]\n                            ]\n                        }\n                    ];\n\n                    $scope.charts.makeChart(series, $scope.charts.settings);\n                }, 500);\n            },\n            makeChart: function (series, settings) {\n                settings.series = series;\n\n                return new $window.Highcharts.Chart(settings);\n            }\n        };\n\n        $scope.targets = {\n            data: null,\n            getTargetsList: function () {\n                return TargetsFactory.getTargetsList(1, 10).then(function (data) {\n                    $scope.targets.data = data.results;\n                });\n            }\n        };\n\n        (function _init() {\n            $scope.charts.buildChartData();\n            $scope.targets.getTargetsList();\n        })();\n\n    }])\n\n;\n'use strict';\n\nangular.module('app.pages.facts', [\n    'app.pages.facts.modals.add_fact',\n    'app.pages.facts.modals.edit_fact',\n    'app.pages.facts.modals.remove_fact',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('facts', {\n                url: '/facts',\n                templateUrl: 'facts/facts.html',\n                controller: 'FactsPageCtrl'\n            })\n\n            .state('facts.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'facts/add_fact_modal/add_fact_modal.html',\n                        controller: 'AddFactModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('facts.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'FactsFactory', function ($stateParams, $state, $modal, FactsFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'facts/edit_fact_modal/edit_fact_modal.html',\n                        controller: 'EditFactModalCtrl',\n                        resolve: {\n                            factData: function () {\n                                return FactsFactory.getFactsListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('facts.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'FactsFactory', function ($stateParams, $state, $modal, FactsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'facts/remove_fact_modal/remove_fact_modal.html',\n                        controller: 'RemoveFactsModalCtrl',\n                        resolve: {\n                            factsData: function () {\n                                return FactsFactory.getFactsListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('FactsPageCtrl', ['$scope', '$modal', '$window', 'FactsFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', 'urlMap', function ($scope, $modal, $window, FactsFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory, urlMap) {\n\n        var defaultSorting = {name: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return FactsFactory.getFactsList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n        $scope.updateFact = function (fact) {\n            FactsFactory.updateFact(fact);\n        };\n\n        $scope.entity = {\n            selectedFacts: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectFact: function (fact) {\n                $scope.entity.selectedFacts[fact.id] = fact;\n                fact.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedFacts).length;\n            },\n            toggleItemSelect: function (fact) {\n                if ($scope.entity.selectedFacts[fact.id]) {\n                    $scope.entity.unSelectFact(fact);\n                } else {\n                    $scope.entity.selectFact(fact);\n                }\n            },\n            unSelectFact: function (fact) {\n                delete $scope.entity.selectedFacts[fact.id];\n                delete fact.isSelected;\n            },\n            selectAllFacts: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var fact = $scope.tableParams.data[i];\n                    $scope.entity.selectFact(fact);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedFactsLength = Object.keys($scope.entity.selectedFacts).length;\n\n                if (selectedFactsLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllFacts();\n                } else {\n                    $scope.entity.selectAllFacts();\n                }\n            },\n            unSelectAllFacts: function () {\n                for (var key in $scope.entity.selectedFacts) {\n                    if ($scope.entity.selectedFacts.hasOwnProperty(key)) {\n                        var fact = $scope.entity.selectedFacts[key];\n                        $scope.entity.unSelectFact(fact);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedFacts = {};\n            },\n            showEditModal: function (fact) {\n                $stateParams.id = fact.id;\n                $state.go('facts.edit', $stateParams);\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('facts.add');\n            },\n            showRemoveModal: function (fact) {\n                $stateParams.ids = fact.id;\n                $state.go('facts.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedFacts).toString();\n                $state.go('facts.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.entityFactory = FactsFactory;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.pages.gathering', [\n    'app.pages.gathering.modals.report_modal',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('gathering', {\n                url: '/gathering',\n                templateUrl: 'gathering/gathering.html',\n                controller: 'GatheringPageCtrl'\n            })\n\n            .state('gathering.report_modal', {\n                url: '/report',\n                params: {\n                    type: null,\n                    params: null\n                },\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'gathering/report_modal/report_modal.html',\n                        controller: 'ReportModalCtrl',\n                        size: 'lg'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('GatheringPageCtrl', ['$scope', 'GatheringFactory', '$state', '$filter', function ($scope, GatheringFactory, $state, $filter) {\n\n        function filterObject (obj) {\n            for (var i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    if (obj[i] === '' || obj[i] === undefined) {\n                        delete obj[i];\n                    }\n                }\n            }\n        }\n\n        $scope.checkArray = function (data) {\n            if ( Object.prototype.toString.call( data ) === '[object Array]' ) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        $scope.normalizeHref = function (host, href) {\n            // FIXME: fine for now and current situation\n            if (host && href) {\n                if (href.includes(host)) {\n                    return href;\n                } else {\n                    return host + href;\n                }\n            }\n        };\n\n        $scope.gathering = {\n            filter: {\n                short: null,\n                person: {\n                    is_acting: '1',\n                    history_search: '0',\n                    search_type: '0'\n                },\n                company: {\n                    type: 'GetCompanyExtendedReport',\n                    exact_search: '0',\n                    egrpo_included: '2'\n                }\n            },\n            sources: [],\n            isEpandedSearch: true,\n            searchType: 'person',\n            limit: 25,\n            searching: false,\n            makeSearch: function () {\n                $scope.gathering.clearSources();\n                var params;\n                if ( $scope.gathering.searchType == 'person') {\n                    params = $scope.gathering.filter.person;\n                    filterObject(params);\n                } else {\n                    params = $scope.gathering.filter.company;\n                    filterObject(params);\n                }\n                $scope.gathering.searching = true;\n\n                GatheringFactory.getData( $scope.gathering.searchType, params).then(function () {\n                    $scope.gathering.searching = false;\n                    for (var i = 0; i < GatheringFactory.data.length; i++) {\n                        var source = GatheringFactory.data[i];\n\n                        source.panel = {\n                            isOpen: false,\n                            isDisabled: false\n                        };\n\n                        $scope.gathering.sources.push(source);\n                    }\n                });\n            },\n            resetFilter: function (key) {\n                switch (key) {\n                    case 'person':\n                        $scope.gathering.filter.person = {\n                            is_acting: '1',\n                            history_search: '0',\n                            search_type: '0'\n                        };\n                        break;\n                    case 'company':\n                        $scope.gathering.filter.company = {\n                            type: 'GetCompanyExtendedReport',\n                            exact_search: '0',\n                            egrpo_included: '2'\n                        };\n                        break;\n                    default:\n                        $scope.gathering.filter =  {\n                            short: null,\n                            person: {\n                                is_acting: '1',\n                                history_search: '0',\n                                search_type: '0'\n                            },\n                            company: {\n                                type: 'GetCompanyExtendedReport',\n                                exact_search: '0',\n                                egrpo_included: '2'\n                            }\n                        };\n                        $scope.gathering.clearSources();\n                }\n            },\n            clearSources: function () {\n                $scope.gathering.sources = [];\n            },\n            toggleExpandedSearch: function () {\n                $scope.gathering.isEpandedSearch = !$scope.gathering.isEpandedSearch;\n            },\n            getRegionName: function (code) {\n                return $filter('filter')($scope.regions, {code: code})[0].name;\n            },\n            showReport: function (params) {\n                $state.go('gathering.report_modal', params);\n            }\n        };\n\n\n        (function init() {\n            $scope.regions = GatheringFactory.regions;\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.groups', [\n    'app.pages.groups.modals.add_group',\n    'app.pages.groups.modals.edit_group',\n    'app.pages.groups.modals.remove_group',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('groups', {\n                url: '/groups',\n                templateUrl: 'groups/groups.html',\n                controller: 'GroupPageCtrl'\n            })\n            .state('groups.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'groups/add_group_modal/add_group_modal.html',\n                        controller: 'AddGroupModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('groups.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'GroupsFactory', function ($stateParams, $state, $modal, GroupsFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'groups/edit_group_modal/edit_group_modal.html',\n                        controller: 'EditGroupModalCtrl',\n                        resolve: {\n                            groupData: function () {\n                                return GroupsFactory.getGroupListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('groups.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'GroupsFactory', function ($stateParams, $state, $modal, GroupsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'groups/remove_group_modal/remove_group_modal.html',\n                        controller: 'RemoveGroupModalCtrl',\n                        resolve: {\n                            groupData: function () {\n                                return GroupsFactory.getGroupListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('GroupPageCtrl', ['$scope', '$modal', '$window', 'GroupsFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', function($scope, $modal, $window, GroupsFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return GroupsFactory.getGroupList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedGroup: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectGroup: function (group) {\n                $scope.entity.selectedGroup[group.id] = group;\n                group.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedGroup).length;\n            },\n            toggleItemSelect: function (group) {\n                if ($scope.entity.selectedGroup[group.id]) {\n                    $scope.entity.unSelectGroup(group);\n                } else {\n                    $scope.entity.selectGroup(group);\n                }\n            },\n            unSelectGroup: function (group) {\n                delete $scope.entity.selectedGroup[group.id];\n                delete group.isSelected;\n            },\n            selectAllGroup: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var group = $scope.tableParams.data[i];\n                    $scope.entity.selectGroup(group);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedGroupLength = Object.keys($scope.entity.selectedGroup).length;\n\n                if (selectedGroupLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllGroup();\n                } else {\n                    $scope.entity.selectAllGroup();\n                }\n            },\n            unSelectAllGroup: function () {\n                for (var key in $scope.entity.selectedGroup) {\n                    if ($scope.entity.selectedGroup.hasOwnProperty(key)) {\n                        var group = $scope.entity.selectedGroup[key];\n                        $scope.entity.unSelectGroup(group);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedGroup = {};\n            },\n\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableDatac();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('groups.add');\n            },\n            showEditModal: function (group) {\n                $stateParams.id = group.id;\n                $state.go('groups.edit', $stateParams);\n            },\n            showRemoveModal: function (group) {\n                $stateParams.ids = group.id;\n                $state.go('groups.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedGroup).toString();\n                $state.go('groups.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.launch', [\n    'app.pages.launch.modals.edit_launch',\n    'app.pages.launch.modals.remove_launch',\n    'app.pages.launch.modals.add_launch',\n    'app.pages.launch.modals.start_launch',\n    'app.pages.launch.modals.stop_launch',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('launch', {\n                url: '/launch',\n                templateUrl: 'launch/launch.html',\n                controller: 'LaunchPageCtrl'\n            })\n\n            .state('launch.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'LaunchFactory', function ($stateParams, $state, $modal, LaunchFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'launch/edit_launch_modal/edit_launch_modal.html',\n                        controller: 'EditLaunchModalCtrl',\n                        resolve: {\n                            launchData: function () {\n                                return LaunchFactory.getLaunchListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n\n            })\n\n            .state('launch.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'LaunchFactory', function ($stateParams, $state, $modal, LaunchFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'launch/remove_launch_modal/remove_launch_modal.html',\n                        controller: 'RemoveLaunchModalCtrl',\n                        resolve: {\n                            launchData: function () {\n                                return LaunchFactory.getLaunchListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('launch.add', {\n                url: '/add/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'launch/add_launch_modal/add_launch_modal.html',\n                        controller: 'AddNewLaunchModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                if (ids && ids.length > 0) {\n                                    return MacrosFactory.getMacrosListByIds(ids);\n                                } else {\n                                    return [];\n                                }\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('launch.start', {\n                url: '/start/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'LaunchFactory', function ($stateParams, $state, $modal, LaunchFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'launch/start_launch_modal/start_launch_modal.html',\n                        controller: 'StartLaunchModalCtrl',\n                        resolve: {\n                            launchData: function () {\n                                return LaunchFactory.getLaunchListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('launch.stop', {\n                url: '/stop/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'LaunchFactory', function ($stateParams, $state, $modal, LaunchFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'launch/stop_launch_modal/stop_launch_modal.html',\n                        controller: 'StopLaunchModalCtrl',\n                        resolve: {\n                            launchData: function () {\n                                return LaunchFactory.getLaunchListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('LaunchPageCtrl', ['$scope', 'LaunchFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', 'UserFactory', function ($scope, LaunchFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory, UserFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null,\n                created_to: $scope.entity.filters.created_to ? $scope.entity.filters.created_to : null,\n                last_launch_at: $scope.entity.filters.last_launch_at ? $scope.entity.filters.last_launch_at : null,\n                last_launch_to: $scope.entity.filters.last_launch_to ? $scope.entity.filters.last_launch_to : null,\n                next_launch_at: $scope.entity.filters.next_launch_at ? $scope.entity.filters.next_launch_at : null,\n                next_launch_to: $scope.entity.filters.next_launch_to ? $scope.entity.filters.next_launch_to : null\n            };\n\n            return LaunchFactory.getLaunchList(page, limit, sorting, filter).then(function (data) {\n                if (data.results.length > 0) {\n                    LaunchFactory.assignLinkedMacrosToLaunchList(data.results);\n                }\n\n                return data;\n            });\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.entity = {\n            selectedLaunch: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            setDefaultSorting: function () {\n                return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n            },\n            selectLaunch: function (launch) {\n                $scope.entity.selectedLaunch[launch.id] = launch;\n                launch.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedLaunch).length;\n            },\n            toggleItemSelect: function (launch) {\n                if ($scope.entity.selectedLaunch[launch.id]) {\n                    $scope.entity.unSelectLaunch(launch);\n                } else {\n                    $scope.entity.selectLaunch(launch);\n                }\n            },\n            unSelectLaunch: function (launch) {\n                delete $scope.entity.selectedLaunch[launch.id];\n                delete launch.isSelected;\n            },\n            selectAllLaunch: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var launch = $scope.tableParams.data[i];\n                    $scope.entity.selectLaunch(launch);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedLaunchLength = Object.keys($scope.entity.selectedLaunch).length;\n\n                if (selectedLaunchLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllLaunch();\n                } else {\n                    $scope.entity.selectAllLaunch();\n                }\n            },\n            unSelectAllLaunch: function () {\n                for (var key in $scope.entity.selectedLaunch) {\n                    if ($scope.entity.selectedLaunch.hasOwnProperty(key)) {\n                        var launch = $scope.entity.selectedLaunch[key];\n                        $scope.entity.unSelectLaunch(launch);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedLaunch = {};\n            },\n            showRemoveModal: function (launch) {\n                $stateParams.ids = launch.id;\n                $state.go('launch.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedLaunch).toString();\n                $state.go('launch.remove', $stateParams);\n            },\n            showEditModal: function (launch) {\n                $stateParams.id = launch.id;\n                $state.go('launch.edit', $stateParams);\n            },\n            showAddModal: function () {\n                $state.go('launch.add', $stateParams);\n            },\n            start: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedLaunch).toString();\n                $state.go('launch.start', $stateParams);\n            },\n            stop: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedLaunch).toString();\n                $state.go('launch.stop', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n\n        $scope.calendarData= {};\n\n        $scope.refresh = {\n            data: function (m, y) {\n                return DatesFactory.getCalendarData(m, y);\n            },\n            createdRangeStart: function (m, y) {\n                return $scope.refresh.data(m, y).then(function (data) {\n                    $scope.calendarData.createdStartSource = data;\n                });\n            },\n            createdRangeEnd: function (m, y) {\n                return $scope.refresh.data(m, y).then(function (data) {\n                    $scope.calendarData.createdEndSource = data;\n                });\n            },\n            launchRangeStart: function (m, y) {\n                return $scope.refresh.data(m, y).then( function (data) {\n                    $scope.calendarData.launchStartSource = data;\n                });\n            },\n            launchRangeEnd: function (m, y) {\n                return $scope.refresh.data(m, y).then( function (data) {\n                    $scope.calendarData.launchEndSource = data;\n                });\n            },\n            nextLaunchRangeStart: function (m, y) {\n                return $scope.refresh.data(m, y).then( function (data) {\n                    $scope.calendarData.nextLaunchStartSource = data;\n                });\n            },\n            nextLaunchRangeEnd: function (m, y) {\n                return $scope.refresh.data(m, y).then( function (data) {\n                    $scope.calendarData.nextLaunchEndSource = data;\n                });\n            }\n        };\n\n        (function _init() {\n            $scope.entityFactory = LaunchFactory;\n            $scope.isCurrentUserAdmin = function () {\n                return UserFactory.currentUser.is_admin;\n            };\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n    .filter('launchStateFilter', function () {\n        return function (launchState) {\n            return (launchState) ? 'Включен' : 'Выключен';\n        };\n    })\n;\n\n'use strict';\n\nangular.module('app.pages.macros', [\n    'app.pages.macros.modals.add_macros',\n    'app.pages.macros.modals.edit_macros',\n    'app.pages.macros.modals.remove_macros',\n    'app.pages.macros.modals.debug_macros',\n    'app.pages.macros.modals.report_macros',\n    'app.pages.macros.modals.start_macros',\n    'app.pages.macros.modals.stop_macros',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('macros', {\n                url: '/macros',\n                templateUrl: 'macros/macros.html',\n                controller: 'MacrosPageCtrl'\n            })\n\n            .state('macros.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'macros/add_macros_modal/add_macros_modal.html',\n                        controller: 'AddMacrosModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('macros.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'macros/edit_macros_modal/edit_macros_modal.html',\n                        controller: 'EditMacrosModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                return MacrosFactory.getMacrosListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('macros.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'macros/remove_macros_modal/remove_macros_modal.html',\n                        controller: 'RemoveMacrosModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                return MacrosFactory.getMacrosListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('macros.start', {\n                url: '/start/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'macros/start_macros_modal/start_macros_modal.html',\n                        controller: 'StartMacrosModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                return MacrosFactory.getMacrosListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('macros.debug', {\n                url: '/debug/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'macros/debug_macros_modal/debug_macros_modal.html',\n                        controller: 'DebugMacrosModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                return MacrosFactory.getMacrosListByIds(id);\n                            },\n                            placeholdersData: function () {\n                                return MacrosFactory.getPlaceholders(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('macros.report', {\n                url: '/report/:id',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'macros/report_macros_modal/report_macros_modal.html',\n                        controller: 'ReportMacrosModalCtrl',\n                        size: 'lg',\n                        resolve: {\n                            macrosData: function () {\n                                return {id: id};\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('macros.stop', {\n                url: '/stop/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'macros/stop_macros_modal/stop_macros_modal.html',\n                        controller: 'StopMacrosModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                return MacrosFactory.getMacrosListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('MacrosPageCtrl', ['$scope', '$modal', '$window', 'MacrosFactory', '$state', '$stateParams', 'DatesFactory', 'UserFactory', 'NgTableUtilsFactory', 'urlMap', function ($scope, $modal, $window, MacrosFactory, $state, $stateParams, DatesFactory, UserFactory, NgTableUtilsFactory, urlMap) {\n\n        var defaultSorting = {name: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return MacrosFactory.getMacrosList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.goToExternalLink = function (macros) {\n            $window.open(macros.url, '_blank');\n        };\n\n        $scope.updateMacros = function (macros) {\n            MacrosFactory.updateMacros(macros);\n        };\n\n        $scope.entity = {\n            selectedMacros: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectMacros: function (macros) {\n                $scope.entity.selectedMacros[macros.id] = macros;\n                macros.isSelected = true;\n            },\n            saveToFile: function (ids) {\n                if (!ids) ids = Object.keys($scope.entity.selectedMacros);\n\n                var url = urlMap['macros.get_macros_file'] + '?ids=' + ids.toString();\n                $window.open(url, '_blank');\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedMacros).length;\n            },\n            toggleItemSelect: function (macros) {\n                if ($scope.entity.selectedMacros[macros.id]) {\n                    $scope.entity.unSelectMacros(macros);\n                } else {\n                    $scope.entity.selectMacros(macros);\n                }\n            },\n            unSelectMacros: function (macros) {\n                delete $scope.entity.selectedMacros[macros.id];\n                delete macros.isSelected;\n            },\n            selectAllMacros: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var macros = $scope.tableParams.data[i];\n                    $scope.entity.selectMacros(macros);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedMacrosLength = Object.keys($scope.entity.selectedMacros).length;\n\n                if (selectedMacrosLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllMacros();\n                } else {\n                    $scope.entity.selectAllMacros();\n                }\n            },\n            unSelectAllMacros: function () {\n                for (var key in $scope.entity.selectedMacros) {\n                    if ($scope.entity.selectedMacros.hasOwnProperty(key)) {\n                        var macros = $scope.entity.selectedMacros[key];\n                        $scope.entity.unSelectMacros(macros);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedMacros = {};\n            },\n            showEditModal: function (macros) {\n                $stateParams.id = macros.id;\n                $state.go('macros.edit', $stateParams);\n            },\n            start: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedMacros).toString();\n                $state.go('macros.start', $stateParams);\n            },\n            stop: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedMacros).toString();\n                $state.go('macros.stop', $stateParams);\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                console.log($scope.entity.filters.created_at);\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n\n                console.log($scope.entity.filters.created_at);\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('macros.add');\n            },\n            showRemoveModal: function (macros) {\n                $stateParams.ids = macros.id;\n                $state.go('macros.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedMacros).toString();\n                $state.go('macros.remove', $stateParams);\n            },\n            showDebugLaunchModal: function (macros) {\n                $stateParams.id = macros.id;\n                $state.go('macros.debug', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.isCurrentUserAdmin = function () {\n            return UserFactory.currentUser.is_admin;\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.entityFactory = MacrosFactory;\n            $scope.DatesFactory = DatesFactory;\n            $scope.macrosUploadUrl = urlMap['macros.create_macros_from_file'];\n        })();\n\n    }])\n\n    .filter('preprocessingNameFilter', ['constantMap', function (constantMap) {\n        return function (preprocessingValue) {\n            if (!preprocessingValue || preprocessingValue === '' || preprocessingValue === ' ') return '';\n\n            for (var i = 0; i < constantMap.PREPROCESSING.length; i++) {\n                var preprocessing = constantMap.PREPROCESSING[i];\n                if (preprocessing.value === preprocessingValue) return preprocessing.title;\n            }\n\n            return '';\n        };\n    }])\n\n;\n'use strict';\n\nangular.module('app.pages.photos', [\n    'app.pages.photos.modals.add_photo',\n    'app.pages.photos.modals.edit_photo',\n    'app.pages.photos.modals.remove_photos',\n    'app.pages.photos.modals.exif',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('photos', {\n                url: '/photos',\n                templateUrl: 'photos/photos.html',\n                controller: 'PhotosPageCtrl'\n            })\n\n            .state('photos.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'photos/add_photo_modal/add_photo_modal.html',\n                        controller: 'AddPhotoModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('photos.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'PhotosFactory', function ($stateParams, $state, $modal, PhotosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'photos/remove_photos_modal/remove_photos_modal.html',\n                        controller: 'RemovePhotosModalCtrl',\n                        resolve: {\n                            photosData: function () {\n                                return PhotosFactory.getPhotosListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('photos.exif', {\n                url: '/exif/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'PhotosFactory', function ($stateParams, $state, $modal, PhotosFactory) {\n                    var ids = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'photos/exif_modal/exif_modal.html',\n                        controller: 'ExifModalCtrl',\n                        resolve: {\n                            photosData: function () {\n                                return PhotosFactory.getPhotosListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('photos.edit', {\n                url: '/edit/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'PhotosFactory', function ($stateParams, $state, $modal, PhotosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'photos/edit_photo_modal/edit_photo_modal.html',\n                        controller: 'EditPhotoModalCtrl',\n                        resolve: {\n                            photosData: function () {\n                                return PhotosFactory.getPhotosListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('PhotosPageCtrl', ['$scope', '$modal', '$window', 'PhotosFactory', '$stateParams', '$state', 'DatesFactory', 'NgTableUtilsFactory', function ($scope, $modal, $window, PhotosFactory, $stateParams, $state, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'desc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return PhotosFactory.getPhotosList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedPhotos: {},\n            filters: {},\n            isExtendedFiltersOpen: false,\n            selectPhoto: function (photo) {\n                $scope.entity.selectedPhotos[photo.id] = photo;\n                photo.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedPhotos).length;\n            },\n            toggleSelect: function (photo) {\n                if ($scope.entity.selectedPhotos[photo.id]) {\n                    $scope.entity.unSelectPhoto(photo);\n                } else {\n                    $scope.entity.selectPhoto(photo);\n                }\n            },\n            unSelectPhoto: function (photo) {\n                delete $scope.entity.selectedPhotos[photo.id];\n                delete photo.isSelected;\n            },\n            selectAllPhotos: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var photo = $scope.tableParams.data[i];\n                    $scope.entity.selectPhoto(photo);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedPhotosLength = Object.keys($scope.entity.selectedPhotos).length;\n\n                if (selectedPhotosLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllPhotos();\n                } else {\n                    $scope.entity.selectAllPhotos();\n                }\n            },\n            unSelectAllPhotos: function () {\n                for (var key in $scope.entity.selectedPhotos) {\n                    if ($scope.entity.selectedPhotos.hasOwnProperty(key)) {\n                        var photo = $scope.entity.selectedPhotos[key];\n                        $scope.entity.unSelectPhoto(photo);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedPhotos = {};\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {};\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('photos.add');\n            },\n            showEditModal: function (photo) {\n                $stateParams.ids = photo.id;\n                $state.go('photos.edit', $stateParams);\n            },\n            showRemoveModal: function (photo) {\n                $stateParams.ids = photo.id;\n                $state.go('photos.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedPhotos).toString();\n                $state.go('photos.remove', $stateParams);\n            },\n            showExifModal: function (photo) {\n                $stateParams.id = photo.id;\n                $state.go('photos.exif', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.pages.profiles', [\n    'app.pages.profiles.modals.add_profile',\n    'app.pages.profiles.modals.edit_profile',\n    'app.pages.profiles.modals.remove_profiles',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n\n            .state('profiles', {\n                url: '/profiles',\n                templateUrl: 'profiles/profiles.html',\n                controller: 'ProfilesPageCtrl'\n            })\n\n            .state('profiles.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'profiles/add_profile_modal/add_profile_modal.html',\n                        controller: 'AddProfileModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('profiles.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'ProfilesFactory', function ($stateParams, $state, $modal, ProfilesFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'profiles/edit_profile_modal/edit_profile_modal.html',\n                        controller: 'EditProfileModalCtrl',\n                        resolve: {\n                            profileData: function () {\n                                return ProfilesFactory.getProfilesListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('profiles.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'ProfilesFactory', function ($stateParams, $state, $modal, ProfilesFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'profiles/remove_profiles_modal/remove_profiles_modal.html',\n                        controller: 'RemoveProfilesModalCtrl',\n                        resolve: {\n                            profilesData: function () {\n                                return ProfilesFactory.getProfilesListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n        ;\n    }])\n\n    .controller('ProfilesPageCtrl', ['$scope', '$modal', '$window', 'ProfilesFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', 'toaster', function ($scope, $modal, $window, ProfilesFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory, toaster) {\n\n        var defaultSorting = {created_at: 'desc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return ProfilesFactory.getProfilesList(page, limit, sorting, filter);\n        });\n\n         $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.updateProfiles = function (profiles) {\n            ProfilesFactory.updateProfiles(profiles);\n        };\n\n        $scope.entity = {\n            selectedProfiles: [],\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedProfiles).length;\n            },\n            toggleItemSelect: function (profile) {\n                if ($scope.entity.selectedProfiles[profile.id]) {\n                    $scope.entity.unSelectProfile(profile);\n                } else {\n                    $scope.entity.selectProfiles(profile);\n                }\n            },\n            selectProfiles: function (profile) {\n                $scope.entity.selectedProfiles[profile.id] = profile;\n                profile.isSelected = true;\n            },\n            selectAllProfiles: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var profile = $scope.tableParams.data[i];\n                    $scope.entity.selectProfiles(profile);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedProfilesLength = Object.keys($scope.entity.selectedProfiles).length;\n\n                if (selectedProfilesLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllProfiles();\n                } else {\n                    $scope.entity.selectAllProfiles();\n                }\n            },\n            unSelectProfile: function (profile) {\n                delete $scope.entity.selectedProfiles[profile.id];\n                delete profile.isSelected;\n            },\n            unSelectAllProfiles: function () {\n                for (var key in $scope.entity.selectedProfiles) {\n                    if ($scope.entity.selectedProfiles.hasOwnProperty(key)) {\n                        var profile = $scope.entity.selectedProfiles[key];\n                        $scope.entity.unSelectProfile(profile);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedProfiles = {};\n            },\n            showAddModal: function () {\n                $state.go('profiles.add');\n            },\n            showEditModal: function (profile) {\n                $stateParams.id = profile.id;\n                $state.go('profiles.edit', $stateParams);\n            },\n            showRemoveModal: function (profile) {\n                $stateParams.ids = profile.id;\n                $state.go('profiles.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedProfiles).toString();\n                $state.go('profiles.remove', $stateParams);\n            },\n            fixFriendsUrl: function (profile, friend) {\n                $scope.parser.href = profile.url;\n                if ( friend.includes($scope.parser.hostname) ) {\n                    return friend;\n                } else {\n                    return $scope.parser.protocol + '//' + $scope.parser.hostname + friend;\n                }\n            }\n\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n            $scope.parser = $window.document.createElement('a');\n        })();\n\n    }])\n\n    .filter('profileNameFilter', function () {\n        return function (name) {\n            var MAX_LENGTH = 25;\n\n            if (!name) return '';\n\n            if (name.length >= MAX_LENGTH) {\n                return name.substr(0, MAX_LENGTH);\n            }\n\n            return name;\n        };\n    })\n;\n'use strict';\n\nangular.module('app.pages.proxy', [\n    'app.pages.proxy.modals.add_proxy',\n    'app.pages.proxy.modals.edit_proxy',\n    'app.pages.proxy.modals.remove_proxy',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('proxy', {\n                url: '/proxy',\n                templateUrl: 'proxy/proxy.html',\n                controller: 'ProxyPageCtrl'\n            })\n\n            .state('proxy.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'proxy/add_proxy_modal/add_proxy_modal.html',\n                        controller: 'AddProxyModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('proxy.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'ProxyFactory', function ($stateParams, $state, $modal, ProxyFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'proxy/edit_proxy_modal/edit_proxy_modal.html',\n                        controller: 'EditProxyModalCtrl',\n                        resolve: {\n                            proxyData: function () {\n                                return ProxyFactory.getProxyListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('proxy.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'ProxyFactory', function ($stateParams, $state, $modal, ProxyFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'proxy/remove_proxy_modal/remove_proxy_modal.html',\n                        controller: 'RemoveProxyModalCtrl',\n                        resolve: {\n                            proxyData: function () {\n                                return ProxyFactory.getProxyListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('ProxyPageCtrl', ['$scope', '$modal', '$window', 'ProxyFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', 'urlMap', function ($scope, $modal, $window, ProxyFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory, urlMap) {\n\n        var defaultSorting = {host: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return ProxyFactory.getProxyList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n        $scope.updateProxy = function (proxy) {\n            ProxyFactory.updateProxy(proxy);\n        };\n\n        $scope.entity = {\n            selectedProxy: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectProxy: function (proxy) {\n                $scope.entity.selectedProxy[proxy.id] = proxy;\n                proxy.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedProxy).length;\n            },\n            toggleItemSelect: function (proxy) {\n                if ($scope.entity.selectedProxy[proxy.id]) {\n                    $scope.entity.unSelectProxy(proxy);\n                } else {\n                    $scope.entity.selectProxy(proxy);\n                }\n            },\n            unSelectProxy: function (proxy) {\n                delete $scope.entity.selectedProxy[proxy.id];\n                delete proxy.isSelected;\n            },\n            selectAllProxy: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var proxy = $scope.tableParams.data[i];\n                    $scope.entity.selectProxy(proxy);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedProxyLength = Object.keys($scope.entity.selectedProxy).length;\n\n                if (selectedProxyLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllProxy();\n                } else {\n                    $scope.entity.selectAllProxy();\n                }\n            },\n            unSelectAllProxy: function () {\n                for (var key in $scope.entity.selectedProxy) {\n                    if ($scope.entity.selectedProxy.hasOwnProperty(key)) {\n                        var proxy = $scope.entity.selectedProxy[key];\n                        $scope.entity.unSelectProxy(proxy);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedProxy = {};\n            },\n            showEditModal: function (proxy) {\n                $stateParams.id = proxy.id;\n                $state.go('proxy.edit', $stateParams);\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('proxy.add');\n            },\n            showRemoveModal: function (proxy) {\n                $stateParams.ids = proxy.id;\n                $state.go('proxy.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedProxy).toString();\n                $state.go('proxy.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.entityFactory = ProxyFactory;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.pages.sequences', [\n    'app.pages.sequences.modals.add_sequence',\n    'app.pages.sequences.modals.edit_sequence',\n    'app.pages.sequences.modals.remove_sequence',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('sequences', {\n                url: '/sequences',\n                templateUrl: 'sequences/sequences.html',\n                controller: 'SequencePageCtrl'\n            })\n            .state('sequences.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'sequences/add_sequence_modal/add_sequence_modal.html',\n                        controller: 'AddSequenceModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('sequences.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'SequencesFactory', function ($stateParams, $state, $modal, SequencesFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'sequences/edit_sequence_modal/edit_sequence_modal.html',\n                        controller: 'EditSequenceModalCtrl',\n                        resolve: {\n                            sequenceData: function () {\n                                return SequencesFactory.getSequenceListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('sequences.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'SequencesFactory', function ($stateParams, $state, $modal, SequencesFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'sequences/remove_sequence_modal/remove_sequence_modal.html',\n                        controller: 'RemoveSequenceModalCtrl',\n                        resolve: {\n                            sequenceData: function () {\n                                return SequencesFactory.getSequenceListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n        ;\n    }])\n\n    .controller('SequencePageCtrl', ['$scope', '$modal', '$window', '$state', 'SequencesFactory', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', function($scope, $modal, $window, $state, SequencesFactory, $stateParams, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n            return SequencesFactory.getSequenceList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedSequence: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedSequence).length;\n            },\n            selectSequence: function (sequence) {\n                $scope.entity.selectedSequence[sequence.id] = sequence;\n                sequence.isSelected = true;\n            },\n            unSelectSequence: function (sequence) {\n                delete $scope.entity.selectedSequence[sequence.id];\n                delete sequence.isSelected;\n            },\n            toggleItemSelect: function (sequence) {\n                if ($scope.entity.selectedSequence[sequence.id]) {\n                    $scope.entity.unSelectSequence(sequence);\n                } else {\n                    $scope.entity.selectSequence(sequence);\n                }\n            },\n            selectAllSequence: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var sequence = $scope.tableParams.data[i];\n                    $scope.entity.selectSequence(sequence);\n                }\n            },\n            unSelectAllSequence: function () {\n                for (var key in $scope.entity.selectedSequence) {\n                    if ($scope.entity.selectedSequence.hasOwnProperty(key)) {\n                        var sequence = $scope.entity.selectedSequence[key];\n                        $scope.entity.unSelectSequence(sequence);\n                    }\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedSequenceLength = Object.keys($scope.entity.selectedSequence).length;\n\n                if (selectedSequenceLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllSequence();\n                } else {\n                    $scope.entity.selectAllSequence();\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedSequence = {};\n            },\n\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('sequences.add');\n            },\n            showEditModal: function (sequence) {\n                $stateParams.id = sequence.id;\n                $state.go('sequences.edit', $stateParams);\n            },\n            showRemoveModal: function (sequence) {\n                $stateParams.ids = sequence.id;\n                $state.go('sequences.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedSequence).toString();\n                $state.go('sequences.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.simcards', [\n    'app.pages.simcards.modals.add_simcard',\n    'app.pages.simcards.modals.edit_simcard',\n    'app.pages.simcards.modals.remove_simcard',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('simcards', {\n                url: '/simcards',\n                templateUrl: 'simcards/simcards.html',\n                controller: 'SimcardsPageCtrl'\n            })\n            .state('simcards.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'simcards/add_simcard_modal/add_simcard_modal.html',\n                        controller: 'AddSimcardModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('simcards.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'SimcardsFactory', function ($stateParams, $state, $modal, SimcardsFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'simcards/edit_simcard_modal/edit_simcard_modal.html',\n                        controller: 'EditSimcardModalCtrl',\n                        resolve: {\n                            simcardData: function () {\n                                return SimcardsFactory.getSimcardListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('simcards.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'SimcardsFactory', function ($stateParams, $state, $modal, SimcardsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'simcards/remove_simcard_modal/remove_simcard_modal.html',\n                        controller: 'RemoveSimcardModalCtrl',\n                        resolve: {\n                            simcardData: function () {\n                                return SimcardsFactory.getSimcardListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('SimcardsPageCtrl', ['$scope', '$modal', '$window', 'SimcardsFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', function ($scope, $modal, $window, SimcardsFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory) {\n\n        var defaultSorting = {updated_at: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return SimcardsFactory.getSimcardList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedSimcard: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectSimcard: function (simcard) {\n                $scope.entity.selectedSimcard[simcard.id] = simcard;\n                simcard.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedSimcard).length;\n            },\n            toggleItemSelect: function (simcard) {\n                if ($scope.entity.selectedSimcard[simcard.id]) {\n                    $scope.entity.unSelectSimcard(simcard);\n                } else {\n                    $scope.entity.selectSimcard(simcard);\n                }\n            },\n            unSelectSimcard: function (simcard) {\n                delete $scope.entity.selectedSimcard[simcard.id];\n                delete simcard.isSelected;\n            },\n            selectAllSimcard: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var simcard = $scope.tableParams.data[i];\n                    $scope.entity.selectSimcard(simcard);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedSimcardLength = Object.keys($scope.entity.selectedSimcard).length;\n\n                if (selectedSimcardLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllSimcard();\n                } else {\n                    $scope.entity.selectAllSimcard();\n                }\n            },\n            unSelectAllSimcard: function () {\n                for (var key in $scope.entity.selectedSimcard) {\n                    if ($scope.entity.selectedSimcard.hasOwnProperty(key)) {\n                        var simcard = $scope.entity.selectedSimcard[key];\n                        $scope.entity.unSelectSimcard(simcard);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedSimcard = {};\n            },\n\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showEditModal: function (simcard) {\n                $stateParams.id = simcard.id;\n                $state.go('simcards.edit', $stateParams);\n            },\n            showAddModal: function () {\n                $state.go('simcards.add');\n            },\n            showRemoveModal: function (simcard) {\n                $stateParams.ids = simcard.id;\n                $state.go('simcards.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedSimcard).toString();\n                $state.go('simcards.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n;\n'use strict';\n\nangular.module('app.pages.tags', [\n    'app.pages.tags.modals.add_tag',\n    'app.pages.tags.modals.edit_tag',\n    'app.pages.tags.modals.remove_tag',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('tags', {\n                url: '/tags',\n                templateUrl: 'tags/tags.html',\n                controller: 'TagsPageCtrl'\n            })\n\n            .state('tags.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'tags/add_tag_modal/add_tag_modal.html',\n                        controller: 'AddTagModalCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('tags.edit', {\n                url: '/edit/:id',\n                onEnter: ['$stateParams', '$state', '$modal', 'TagsFactory', function ($stateParams, $state, $modal, TagsFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'tags/edit_tag_modal/edit_tag_modal.html',\n                        controller: 'EditTagModalCtrl',\n                        resolve: {\n                            tagData: function () {\n                                return TagsFactory.getTagListByIds(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('tags.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'TagsFactory', function ($stateParams, $state, $modal, TagsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'tags/remove_tag_modal/remove_tag_modal.html',\n                        controller: 'RemoveTagModalCtrl',\n                        resolve: {\n                            tagData: function () {\n                                return TagsFactory.getTagListByIds(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('TagsPageCtrl', ['$scope', '$modal', '$window', 'TagsFactory', '$state', '$stateParams', 'DatesFactory', 'NgTableUtilsFactory', 'urlMap', function ($scope, $modal, $window, TagsFactory, $state, $stateParams, DatesFactory, NgTableUtilsFactory, urlMap) {\n\n        var defaultSorting = {name: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return TagsFactory.getTagList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedTag: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            selectTag: function (tag) {\n                $scope.entity.selectedTag[tag.id] = tag;\n                tag.isSelected = true;\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedTag).length;\n            },\n            toggleItemSelect: function (tag) {\n                if ($scope.entity.selectedTag[tag.id]) {\n                    $scope.entity.unSelectTag(tag);\n                } else {\n                    $scope.entity.selectTag(tag);\n                }\n            },\n            unSelectTag: function (tag) {\n                delete $scope.entity.selectedTag[tag.id];\n                delete tag.isSelected;\n            },\n            selectAllTag: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var tag = $scope.tableParams.data[i];\n                    $scope.entity.selectTag(tag);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedTagLength = Object.keys($scope.entity.selectedTag).length;\n\n                if (selectedTagLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllTag();\n                } else {\n                    $scope.entity.selectAllTag();\n                }\n            },\n            unSelectAllTag: function () {\n                for (var key in $scope.entity.selectedTag) {\n                    if ($scope.entity.selectedTag.hasOwnProperty(key)) {\n                        var tag = $scope.entity.selectedTag[key];\n                        $scope.entity.unSelectTag(tag);\n                    }\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedTag = {};\n            },\n            showEditModal: function (tag) {\n                $stateParams.id = tag.id;\n                $state.go('tags.edit', $stateParams);\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('tags.add');\n            },\n            showRemoveModal: function (tag) {\n                $stateParams.ids = tag.id;\n                $state.go('tags.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedTag).toString();\n                $state.go('tags.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.entityFactory = TagsFactory;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.pages.targets', [\n    'app.pages.targets.modals.add_target',\n    'app.pages.targets.modals.remove_target',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            .state('targets', {\n                url: '/targets',\n                templateUrl: 'targets/targets.html',\n                controller: 'TargetsPageCtrl'\n            })\n\n            .state('targets.add', {\n                url: '/add/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'MacrosFactory', function ($stateParams, $state, $modal, MacrosFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'targets/add_target_modal/add_target_modal.html',\n                        controller: 'AddTargetModalCtrl',\n                        resolve: {\n                            macrosData: function () {\n                                if (ids && ids.length > 0) {\n                                    return MacrosFactory.getMacrosListByIds(ids);\n                                } else {\n                                    return [];\n                                }\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n            .state('targets.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'TargetsFactory', function ($stateParams, $state, $modal, TargetsFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'targets/remove_target_modal/remove_target_modal.html',\n                        controller: 'RemoveTargetModalCtrl',\n                        resolve: {\n                            targetsData: function () {\n                                return TargetsFactory.getTargetsById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('TargetsPageCtrl', ['$scope', '$modal', '$window', 'TargetsFactory', '$stateParams', '$state', 'DatesFactory', 'NgTableUtilsFactory', 'UserFactory', 'constantMap', '$filter', function ($scope, $modal, $window, TargetsFactory, $stateParams, $state, DatesFactory, NgTableUtilsFactory, UserFactory, constantMap, $filter) {\n\n        var defaultSorting = {created_at: 'desc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n\n            var filter = {\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return TargetsFactory.getTargetsList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedTargets: [],\n            filters: {},\n            isExtendedFiltersOpen: false,\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            resetFilter: function () {\n                $scope.entity.filters = {};\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            getStatusAlias: function (status) {\n                return $filter('filter')(constantMap.TARGETS_STATUSES, {value: status})[0].title;\n            },\n            toggleItemSelect: function (target) {\n                if ($scope.entity.selectedTargets[target.id]) {\n                    $scope.entity.unSelectTargets(target);\n                } else {\n                    $scope.entity.selectTargets(target);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedTargetsLength = Object.keys($scope.entity.selectedTargets).length;\n\n                if (selectedTargetsLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllTargets();\n                } else {\n                    $scope.entity.selectAllTargets();\n                }\n            },\n            selectTargets: function (target) {\n                $scope.entity.selectedTargets[target.id] = target;\n                target.isSelected = true;\n            },\n            selectAllTargets: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var target = $scope.tableParams.data[i];\n                    $scope.entity.selectTargets(target);\n                }\n            },\n            unSelectTargets: function (target) {\n                delete $scope.entity.selectedTargets[target.id];\n                delete target.isSelected;\n            },\n            unSelectAllTargets: function () {\n                for (var key in $scope.entity.selectedTargets) {\n                    if ($scope.entity.selectedTargets.hasOwnProperty(key)) {\n                        var target = $scope.entity.selectedTargets[key];\n                        $scope.entity.unSelectTargets(target);\n                    }\n                }\n            },\n            restartTarget: function(target) {\n                TargetsFactory.restartTarget(target.id).then(function() {\n                    $scope.tableParams.reload();\n                });\n            },\n            showAddModal: function() {\n                $state.go('targets.add');\n            },\n            showRemoveModal: function (target) {\n                $stateParams.ids = target.id;\n                $state.go('targets.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedTargets).toString();\n                $state.go('targets.remove', $stateParams);\n            }\n        };\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function _init() {\n            $scope.DatesFactory = DatesFactory;\n            $scope.isCurrentUserAdmin = function () {\n                    return UserFactory.currentUser.is_admin;\n                };\n        })();\n\n    }])\n\n    .filter('paramsDataFilter', ['ScriptFactory', '$sce', function (ScriptFactory, $sce) {\n        function trimLength(value) {\n            var maxLength = 20;\n            return (\"\" + value).substr(0, maxLength);\n        }\n\n        function toStringWithBreaks(array) {\n            return array.join(',<br/>').toString();\n        }\n\n        return function (value) {\n            var data;\n\n            if (!value || value === '' || value === ' ') return '';\n            var result = [];\n            var isParsable = ScriptFactory.isCanParse(value);\n            if (isParsable) {\n                data = JSON.parse(value);\n            } else {\n                return '';\n            }\n\n            for (var k in data) {\n                if (data.hasOwnProperty(k)) {\n                    result.push('<b>' + k + '</b>' + ' : ' + trimLength(data[k]));\n                }\n            }\n\n            return $sce.trustAsHtml(toStringWithBreaks(result));\n        };\n    }])\n\n;\n'use strict';\n\nangular.module('app.pages.users', [\n    'app.pages.users.modals.add_user',\n    'app.pages.users.modals.edit_user',\n    'app.pages.users.modals.remove_user',\n    'app.pages.users.modals.restore_user',\n    'ui.router'\n])\n\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n\n            .state('users', {\n                url: '/users',\n                templateUrl: 'users/users.html',\n                controller: 'UsersPageCtrl'\n            })\n\n            .state('users.add', {\n                url: '/add',\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'users/add_users_modal/add_users_modal.html',\n                        controller: 'AddUsersPageCtrl'\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('users.edit', {\n                url: '/:id/edit',\n                onEnter: ['$stateParams', '$state', '$modal', 'UserFactory', function ($stateParams, $state, $modal, UserFactory) {\n                    var id = $stateParams.id;\n                    $modal.open({\n                        templateUrl: 'users/edit_user_modal/edit_user_modal.html',\n                        controller: 'EditUsersPageCtrl',\n                        resolve: {\n                            userData: function () {\n                                return UserFactory.getUsersById(id);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('users.restore', {\n                url: '/restore/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'UserFactory', function ($stateParams, $state, $modal, UserFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'users/restore_users_modal/restore_users_modal.html',\n                        controller: 'RestoreUserModalController',\n                        resolve: {\n                            userData: function () {\n                                return UserFactory.getUsersById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            .state('users.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'UserFactory', function ($stateParams, $state, $modal, UserFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'users/remove_users_modal/remove_users_modal.html',\n                        controller: 'RemoveUserModalController',\n                        resolve: {\n                            userData: function () {\n                                return UserFactory.getUsersById(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    .controller('UsersPageCtrl', ['$scope', '$state', 'UserFactory', '$filter', '$stateParams', 'toaster', 'NgTableUtilsFactory', 'DatesFactory', function ($scope, $state, UserFactory, $filter, $stateParams, toaster, NgTableUtilsFactory, DatesFactory) {\n\n        var defaultSorting = {username: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            $scope.entity.resetSelectedItems();\n\n            var filter = {\n                query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n                created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            };\n\n            return UserFactory.getUsersList(page, limit, sorting, filter);\n        });\n\n        $scope.reloadTableData = function () {\n            $scope.entity.resetSelectedItems();\n            NgTableUtilsFactory.reload();\n        };\n\n        $scope.setDefaultSorting = function () {\n            return NgTableUtilsFactory.setDefaultSorting(defaultSorting);\n        };\n\n        $scope.entity = {\n            selectedUsers: {},\n            filters: {\n                query: ''\n            },\n            isExtendedFiltersOpen: false,\n            resetFilter: function () {\n                $scope.entity.filters = {\n                    query: ''\n                };\n\n                $scope.reloadTableData();\n            },\n            toggleExtendedFilters: function () {\n                $scope.entity.isExtendedFiltersOpen = !$scope.entity.isExtendedFiltersOpen;\n            },\n            showAddModal: function () {\n                $state.go('users.add', $stateParams);\n            },\n            getSelectedItemsCount: function () {\n                return Object.keys($scope.entity.selectedUsers).length;\n            },\n            toggleItemSelect: function (user) {\n                if ($scope.entity.selectedUsers[user.id]) {\n                    $scope.entity.unSelectUser(user);\n                } else {\n                    $scope.entity.selectUsers(user);\n                }\n            },\n            update: function (user) {\n                $stateParams.id = user.id;\n                $state.go('users.edit', $stateParams);\n            },\n            showRemoveModal: function (userId) {\n                $stateParams.ids = userId;\n                $state.go('users.remove', $stateParams);\n            },\n            showRemoveMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedUsers).toString();\n                $state.go('users.remove', $stateParams);\n            },\n            showRestoreModal: function (userId) {\n                $stateParams.ids = userId;\n                $state.go('users.restore', $stateParams);\n            },\n            showRestoreMassiveModal: function () {\n                $stateParams.ids = Object.keys($scope.entity.selectedUsers).toString();\n                $state.go('users.restore', $stateParams);\n            },\n            loginAs: function (user) {\n                UserFactory.loginAs(user.id, true).then(function (v) {\n                    UserFactory.getUser();\n                    var isAdmin = UserFactory.isAdmin(user);\n                    if (!isAdmin) {\n                        $state.go('dashboard');\n                    }\n                    toaster.pop('success', null, 'Вы авторизованы под пользователем ' + user.username);\n                });\n            },\n            filterList: function () {\n                $scope.reloadTableData();\n            },\n            selectUsers: function (user) {\n                $scope.entity.selectedUsers[user.id] = user;\n                user.isSelected = true;\n            },\n            selectAllUsers: function () {\n                for (var i = 0; i < $scope.tableParams.data.length; i++) {\n                    var user = $scope.tableParams.data[i];\n                    $scope.entity.selectUsers(user);\n                }\n            },\n            toggleAllItemsSelected: function () {\n                var selectedUsersLength = Object.keys($scope.entity.selectedUsers).length;\n\n                if (selectedUsersLength === $scope.tableParams.data.length) {\n                    $scope.entity.unSelectAllUsers();\n                } else {\n                    $scope.entity.selectAllUsers();\n                }\n            },\n            resetSelectedItems: function () {\n                $scope.entity.selectedUsers = {};\n            },\n            unSelectUser: function (user) {\n                delete $scope.entity.selectedUsers[user.id];\n                delete user.isSelected;\n            },\n            unSelectAllUsers: function () {\n                for (var key in $scope.entity.selectedUsers) {\n                    if ($scope.entity.selectedUsers.hasOwnProperty(key)) {\n                        var user = $scope.entity.selectedUsers[key];\n                        $scope.entity.unSelectUser(user);\n                    }\n                }\n            }\n        };\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function init() {\n            $scope.UserFactory = UserFactory;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }]);\n'use strict';\n\nangular.module('app.pages.accounts.modals.add_account', [])\n    .controller('AddAccountModalCtrl', ['$modalInstance', '$scope', '$state', 'AccountsFactory', 'ScriptFactory', 'NgTableUtilsFactory', function ($modalInstance, $scope, $state, AccountsFactory, ScriptFactory, NgTableUtilsFactory) {\n\n        $scope.account = {};\n        $scope.isValidScript = false;\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        function prepareForSave(account) {\n            account.args = ScriptFactory.removeFormatting(account.dataPreview);\n\n            var pack = JSON.parse(JSON.stringify(account));\n            delete pack.dataPreview;\n\n            return pack;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.$watch('account.dataPreview', function (value) {\n                if (!value) {\n                    $scope.isValidScript = false;\n                    return;\n                }\n\n                ScriptFactory.isValidScript(value).then(function (data) {\n                    $scope.isValidScript = data.isValid;\n                });\n            }, true\n        );\n\n\n        $scope.save = function () {\n            var pack = prepareForSave($scope.account);\n\n            return AccountsFactory.addAccount(pack).then(function () {\n                $modalInstance.close();\n                NgTableUtilsFactory.reload();\n            });\n        };\n\n        (function init() {\n            //\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.accounts.modals.edit_account', [])\n\n    .controller('EditAccountModalCtrl', ['$scope', '$modalInstance', 'AccountsFactory', 'accountData', '$timeout', 'ScriptFactory', 'NgTableUtilsFactory', function ($scope, $modalInstance, AccountsFactory, accountData, $timeout, ScriptFactory, NgTableUtilsFactory) {\n\n        $scope.account = {};\n        $scope.isValidScript = false;\n        $scope.isError = false;\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        function prepareAccountOnGet(account) {\n            if (account && account.args) {\n                account.dataPreview = ScriptFactory.stringify(account.args, true);\n            }\n\n            return account;\n        }\n\n        function prepareForSave(account) {\n            account.args = ScriptFactory.removeFormatting(account.dataPreview);\n\n            var pack = JSON.parse(JSON.stringify(account));\n            delete pack.dataPreview;\n\n            return pack;\n        }\n\n        $scope.update = function () {\n            var pack = prepareForSave($scope.account);\n\n            return AccountsFactory.updateAccount(pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function refreshCodeMirrorOnLoad() {\n            $timeout(function () {\n                $scope.isLoaded = !$scope.isLoaded;\n            });\n        }\n\n        $scope.$watch('account.dataPreview', function (value) {\n                if (!value) {\n                    $scope.isValidScript = false;\n                    return;\n                }\n\n                ScriptFactory.isValidScript(value).then(function (data) {\n                    $scope.isValidScript = data.isValid;\n                });\n            }, true\n        );\n\n\n        function isLoadError() {\n            if (accountData.results.length === 0 || accountData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            var account = accountData.results[0]; //we expect only one account\n            $scope.account = prepareAccountOnGet(account);\n            $scope.isError = isLoadError();\n            refreshCodeMirrorOnLoad();\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.accounts.modals.remove_account', [])\n    .controller('RemoveAccountsModalCtrl', ['$state', '$scope', '$modalInstance', 'AccountsFactory', '$stateParams', 'accountsData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, AccountsFactory, $stateParams, accountsData, NgTableUtilsFactory) {\n\n        $scope.selectedAccountsList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var accountsIdsList = $stateParams.ids.split(',');\n            \n            return AccountsFactory.removeAccounts(accountsIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedAccountsList.length === 0) return true;\n            if ($scope.selectedAccountsList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n             $scope.selectedAccountsList = accountsData.results;\n             $scope.isError = isLoadError();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.analytics.modals.load_query', [])\n\n    .controller('LoadQueryModalCtrl', ['$scope', '$modalInstance', '$location', 'queriesListData', '$state', 'MessagesFactory', function ($scope, $modalInstance, $location, queriesListData, $state, MessagesFactory) {\n\n        var _messages = {\n            unknownDateFormatError: 'unknown date format'\n        };\n\n        $scope.queriesList = [];\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        function _parseDate(dateStr) {\n            var expectFormat = \"dd.MM.YYYY\";\n\n            if (dateStr.length !== expectFormat.length) return MessagesFactory.throwDeveloperError(_messages.unknownDateFormatError);\n\n            var year = dateStr.substr(dateStr.lastIndexOf('.') + 1);\n            var month = dateStr.substr(dateStr.indexOf('.') + 1, 2);\n            var day = dateStr.substr(0, dateStr.indexOf('.'));\n\n            return new Date(year, month, day).getTime();\n        }\n\n        function _prepareQueries(queries) {\n            var result = [];\n\n            for (var k in queries) {\n                if (queries.hasOwnProperty(k)) {\n                    var queryObj = queries[k];\n                    result.push({text: queryObj});\n                }\n            }\n\n            return result;\n        }\n\n        function resolveParam(params, key) {\n            var result = {};\n            var queries = 'queries';\n            var macrosIds = 'macrosIds';\n\n            if ((key.match(/date/) || key.match(/Date/)) && angular.isString(params[key])) {\n                result[key] = _parseDate(params[key]);\n            } else if (key === queries) {\n                result[key] = JSON.stringify(_prepareQueries(params[key]));\n            } else if (key === macrosIds) {\n                result.macros = params[key].toString();\n            } else if (angular.isArray(params[key])) {\n                result[key] = params[key].toString();\n            } else if (angular.isObject(params[key]) && !angular.isArray(params[key])) {\n                result[key] = JSON.stringify(params[key]);\n            } else {\n                result[key] = params[key];\n            }\n\n            return result;\n        }\n\n        function _prepareParamsForUrl(params) {\n\n\n            for (var k in params) {\n                if (params.hasOwnProperty(k)) {\n                    resolveParam(params, k, result);\n                }\n            }\n\n            return result;\n        }\n\n        function _goToLoadedState(params) {\n            $state.go('analytics', params);\n        }\n\n        $scope.loadQuery = function () {\n            var params = _prepareParamsForUrl($scope.selectedQuery.params);\n            _goToLoadedState(params);\n            $modalInstance.close();\n        };\n\n        (function _init() {\n            $scope.queriesList = queriesListData.results;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.analytics.modals.save_query', [])\n\n    .controller('SaveQueryModalCtrl', ['$scope', '$modalInstance', 'AnalyticsFactory', '$location', '$filter', 'MessagesFactory', function ($scope, $modalInstance, AnalyticsFactory, $location, $filter, MessagesFactory) {\n\n        var dateFormat = 'dd.MM.yyyy';\n\n        var _messages = {\n            querySuccessSaved: 'Запрос успешно сохранён',\n            queriesNotAnArrayError: 'Queries list should be an array'\n        };\n\n        $scope.query = {\n            name: null,\n            params: {}\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        function _prepareQueries(queriesList) {\n            if (!angular.isArray(queriesList)) return MessagesFactory.throwDeveloperError(_messages.queriesNotAnArrayError);\n\n            var result = {};\n\n            for (var i = 0; i < queriesList.length; i++) {\n                var query = queriesList[i];\n                query.id = i;\n                result[i] = (query.text);\n            }\n\n            return result;\n        }\n\n        function _prepareForSave(params) {\n            var startDate = (params.startDate) ? $filter('date')(params.startDate, dateFormat): null;\n            var endDate = (params.endDate) ? $filter('date')(params.endDate, dateFormat): null;\n            var queries = (params.queries) ? _prepareQueries(JSON.parse(params.queries)): null;\n            var macrosIdsList = params.macros.split(',');\n\n            return {startDate: startDate, endDate: endDate, queries: queries, macrosIds: macrosIdsList};\n        }\n\n        function _goToPrevState() {\n            $location.href= '/analytics?' + JSON.stringify($location.search());\n        }\n\n        $scope.saveQuery = function () {\n            var params = _prepareForSave($location.search());\n\n            return AnalyticsFactory.saveQuery($scope.query.name, params).then(function () {\n                MessagesFactory.successMsg(_messages.querySuccessSaved);\n                _goToPrevState();\n                $modalInstance.close();\n            });\n        };\n\n        (function _init() {\n            //\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.bots.modals.add_bot', [])\n    .controller('AddBotModalCtrl', ['$modalInstance', '$scope', '$state', 'BotsFactory', 'TagsFactory', 'NgTableUtilsFactory', '$sce', function ($modalInstance, $scope, $state, BotsFactory, TagsFactory, NgTableUtilsFactory, $sce) {\n\n        $scope.bot = {};\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.save = function () {\n            $scope.bot.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return BotsFactory.addBot($scope.bot).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function init() {\n\n        })();\n\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.bots.modals.edit_bot', [])\n\n    .controller('EditBotModalCtrl', ['$scope', '$modalInstance', 'BotsFactory', 'TagsFactory', 'botsData', '$timeout', '$sce', 'NgTableUtilsFactory', function ($scope, $modalInstance, BotsFactory, TagsFactory, botsData, $timeout, $sce, NgTableUtilsFactory) {\n\n        $scope.bot = {};\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            $scope.bot.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return BotsFactory.updateBot($scope.bot).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function isLoadError() {\n            if (botsData.results.length === 0 || botsData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function init() {\n            $scope.isError = isLoadError();\n            $scope.bot = botsData.results[0];\n            $scope.tags.selectedTagList = $scope.bot.tags;\n        })();\n\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.bots.modals.remove_bot', [])\n    .controller('RemoveBotModalCtrl', ['$state', '$scope', '$modalInstance', 'BotsFactory', '$stateParams', 'botsData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, BotsFactory, $stateParams, botsData, NgTableUtilsFactory) {\n\n        $scope.selectedBotsList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var botsIdsList = $stateParams.ids.split(',');\n\n            return BotsFactory.removeBots(botsIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedBotsList.length === 0) return true;\n            if ($scope.selectedBotsList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n             $scope.selectedBotsList = botsData.results;\n             $scope.isError = isLoadError();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.cards.modals.add_card', [])\n    .controller('AddCardModalCtrl', ['$modalInstance', '$scope', '$state', 'CardFactory', 'MacrosFactory', '$sce', 'ScriptFactory', 'NgTableUtilsFactory', function ($modalInstance, $scope, $state, CardFactory, MacrosFactory, $sce, ScriptFactory, NgTableUtilsFactory) {\n\n        $scope.card = {\n            data: null,\n            macrosId: null\n        };\n\n        $scope.isValidScript = false;\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        function prepareForSave(card) {\n            card.data = ScriptFactory.removeFormatting(card.dataPreview);\n\n            var pack = JSON.parse(JSON.stringify(card));\n            delete pack.dataPreview;\n\n            return pack;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.macrosList = [];\n\n        $scope.searchMacros = function (search) {\n            return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                $scope.macrosList = data.results;\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        $scope.save = function () {\n            var pack = prepareForSave($scope.card);\n\n            return CardFactory.addCard(pack.data, pack.macrosId).then(function () {\n                $modalInstance.close();\n                NgTableUtilsFactory.reload();\n            });\n        };\n\n        $scope.$watch('card.dataPreview', function (value) {\n                if (!value) {\n                    $scope.isValidScript = false;\n                    return;\n                }\n\n                ScriptFactory.isValidScript(value).then(function (data) {\n                    $scope.isValidScript = data.isValid;\n                });\n            }, true\n        );\n\n        (function init() {\n            //\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.cards.modals.edit_card', [])\n\n    .controller('EditCardModalCtrl', ['$scope', '$modalInstance', 'CardFactory', 'cardsData', '$timeout', 'ScriptFactory', 'MacrosFactory', '$sce', 'NgTableUtilsFactory', function ($scope, $modalInstance, CardFactory, cardsData, $timeout, ScriptFactory, MacrosFactory, $sce, NgTableUtilsFactory) {\n\n        $scope.card = {};\n        $scope.isValidScript = false;\n\n        $scope.isError = false;\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        function prepareOnGet(card) {\n            if (card && card.data) {\n                card.dataPreview = ScriptFactory.stringify(card.data, true);\n            }\n\n            return card;\n        }\n\n        function prepareForSave(card) {\n            card.data = ScriptFactory.removeFormatting(card.dataPreview);\n\n            var pack = JSON.parse(JSON.stringify(card));\n            delete pack.dataPreview;\n\n            return pack;\n        }\n\n        $scope.update = function () {\n            var pack = prepareForSave($scope.card);\n\n            return CardFactory.updateCard(pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function refreshCodeMirrorOnLoad() {\n            $timeout(function () {\n                $scope.isLoaded = !$scope.isLoaded;\n            });\n        }\n\n        function isLoadError() {\n            if (cardsData.results.length === 0 || cardsData.results.length > 1) return true;\n\n            return false;\n        }\n\n        $scope.macrosList = [];\n\n        $scope.searchMacros = function (search) {\n            return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                $scope.macrosList = data.results;\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        $scope.$watch('card.dataPreview', function (value) {\n                if (!value) {\n                    $scope.isValidScript = false;\n                    return;\n                }\n\n                ScriptFactory.isValidScript(value).then(function (data) {\n                    $scope.isValidScript = data.isValid;\n                });\n            }, true\n        );\n\n        (function init() {\n            var card = cardsData.results[0]; //we expect only one card\n            $scope.card = prepareOnGet(card);\n            $scope.isError = isLoadError();\n            refreshCodeMirrorOnLoad();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.cards.modals.remove_card', [])\n    .controller('RemoveCardModalCtrl', ['$state', '$scope', '$modalInstance', 'CardFactory', '$stateParams', 'cardsData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, CardFactory, $stateParams, cardsData, NgTableUtilsFactory) {\n\n        $scope.selectedCardsList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var usersIdsList = $stateParams.ids.split(',');\n            \n            return CardFactory.removeCards(usersIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedCardsList.length === 0) return true;\n            if ($scope.selectedCardsList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n             $scope.selectedCardsList = cardsData.results;\n             $scope.isError = isLoadError();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.comments.modals.add_comment', [])\n\n    .controller('AddCommentModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'CommentsFactory', 'NgTableUtilsFactory', 'constantMap', '$sce', function ($scope, $modalInstance, TagsFactory, CommentsFactory, NgTableUtilsFactory, constantMap, $sce) {\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            $scope.comment.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return CommentsFactory.addComment($scope.comment).then(function () {\n\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n            return result;\n        }\n\n        (function _init() {\n            $scope.LANGUAGES = constantMap.LANGUAGES;\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.comments.modals.edit_comment', [])\n\n    .controller('EditCommentModalCtrl', ['$scope', '$modalInstance', 'CommentsFactory', 'TagsFactory', 'commentData', 'NgTableUtilsFactory', '$sce', 'constantMap', function ($scope, $modalInstance, CommentsFactory, TagsFactory, commentData, NgTableUtilsFactory, $sce, constantMap) {\n\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            $scope.comment.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return CommentsFactory.updateComment($scope.comment).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function isLoadError() {\n            if (commentData.results.length === 0 || commentData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.comment = commentData.results[0];\n            $scope.isError = isLoadError();\n            $scope.tags.selectedTagList = $scope.comment.tags;\n            $scope.LANGUAGES = constantMap.LANGUAGES;\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.comments.modals.remove_comment', [])\n\n    .controller('RemoveCommentModalCtrl', ['$scope', '$modalInstance', 'CommentsFactory', 'commentData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, CommentsFactory, commentData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedCommentList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var commentIdsList = $stateParams.ids.split(',');\n\n            return CommentsFactory.removeComment(commentIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedCommentList.length === 0) return true;\n            if ($scope.selectedCommentList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedCommentList = commentData.results;\n            $scope.isError = isLoadError();\n        })();\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.dashboard.modals.add_bot', [])\n    .controller('AddBotsModalCtrl', ['$modalInstance', '$scope', '$state', '$sce', function ($modalInstance, $scope, $state, $sce) {\n\n        $scope.bots = {};\n\n        $scope.genderList = [\n            {title: 'Мужчина', value: 'male'},\n            {title: 'Женщина', value: 'female'}\n        ];\n\n        $scope.countriesList = [\n            {title: 'Россия', value: 'russia'},\n            {title: 'США', value: 'usa'},\n            {title: 'Китай', value: 'china'},\n            {title: 'Индия', value: 'india'},\n            {title: 'Франция', value: 'france'}\n        ];\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.save = function () {\n            $modalInstance.close();\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.facts.modals.add_fact', [])\n\n    .controller('AddFactModalCtrl', ['$scope', '$modalInstance', 'FactsFactory', 'NgTableUtilsFactory', function ($scope, $modalInstance, FactsFactory, NgTableUtilsFactory) {\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            return FactsFactory.addFact($scope.fact).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.facts.modals.edit_fact', [])\n\n    .controller('EditFactModalCtrl', ['$scope', '$modalInstance', 'FactsFactory', 'factData', 'NgTableUtilsFactory', function ($scope, $modalInstance, FactsFactory, factData, NgTableUtilsFactory) {\n\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            return FactsFactory.updateFact($scope.fact).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if (factData.results.length === 0 || factData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.fact = factData.results[0];\n            $scope.isError = isLoadError();\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.facts.modals.remove_fact', [])\n\n    .controller('RemoveFactsModalCtrl', ['$scope', '$modalInstance', 'FactsFactory', 'factsData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, FactsFactory, factsData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedFactsList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var factIdsList = $stateParams.ids.split(',');\n\n            return FactsFactory.removeFacts(factIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedFactsList.length === 0) return true;\n            if ($scope.selectedFactsList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedFactsList = factsData.results;\n            $scope.isError = isLoadError();\n            $scope.FactsFactory = FactsFactory;\n        })();\n\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.gathering.modals.report_modal', [])\n    .controller('ReportModalCtrl', ['$modalInstance', '$scope', '$stateParams', 'GatheringFactory', function ($modalInstance, $scope, $stateParams, GatheringFactory) {\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.checkArray = function (data) {\n            if ( Object.prototype.toString.call( data ) === '[object Array]' ) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        (function init() {\n            $scope.searching = true;\n            $scope.source = null;\n            GatheringFactory.getReport($stateParams.type, $stateParams.params).then(function(){\n                $scope.searching = false;\n                $scope.source = GatheringFactory.report;\n            });\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.groups.modals.add_group', [])\n\n    .controller('AddGroupModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'GroupsFactory', 'NgTableUtilsFactory', '$sce', function ($scope, $modalInstance, TagsFactory, GroupsFactory, NgTableUtilsFactory, $sce) {\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            $scope.group.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return GroupsFactory.addGroup($scope.group).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.groups.modals.edit_group', [])\n\n    .controller('EditGroupModalCtrl', ['$scope', '$modalInstance', 'GroupsFactory', 'TagsFactory', 'groupData', 'NgTableUtilsFactory', '$sce', function ($scope, $modalInstance, GroupsFactory, TagsFactory, groupData, NgTableUtilsFactory, $sce) {\n\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            $scope.group.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return GroupsFactory.updateGroup($scope.group).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function isLoadError() {\n            if (groupData.results.length === 0 || groupData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.group = groupData.results[0];\n            $scope.isError = isLoadError();\n            $scope.tags.selectedTagList = $scope.group.tags;\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.groups.modals.remove_group', [])\n\n    .controller('RemoveGroupModalCtrl', ['$scope', '$modalInstance', 'GroupsFactory', 'groupData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, GroupsFactory, groupData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedGroupList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var groupIdsList = $stateParams.ids.split(',');\n\n            return GroupsFactory.removeGroup(groupIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedGroupList.length === 0) return true;\n            if ($scope.selectedGroupList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedGroupList = groupData.results;\n            $scope.isError = isLoadError();\n        })();\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.launch.modals.add_launch', [])\n\n    .controller('AddNewLaunchModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'TagsFactory', 'LaunchFactory', 'ScriptFactory', 'constantMap', '$sce', 'NgTableUtilsFactory', 'macrosData', '$stateParams', function ($scope, $modalInstance, MacrosFactory, TagsFactory, LaunchFactory, ScriptFactory, constantMap, $sce, NgTableUtilsFactory, macrosData, $stateParams) {\n\n        $scope.launchSettings = {};\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        function _getMacrosIds(macrosList) {\n            var result = [];\n\n            for (var i = 0; i < macrosList.length; i++) {\n                var macros = macrosList[i];\n                result.push(macros.id);\n            }\n\n            return result;\n        }\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.addLaunch = function () {\n            var macrosIds = _getMacrosIds($scope.macros.selectedMacrosList);\n            var pack = $scope.launchSettings;\n\n            pack.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return LaunchFactory.addLaunch(macrosIds, pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.macros = {\n            selectedMacrosList: {},\n            dropdownMacrosList: [],\n            searchMacros: function (search) {\n                return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                    $scope.macros.dropdownMacrosList = data.results;\n                });\n            }\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function _getIdsList(obj, field) {\n            var result = [];\n\n            for (var k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    result.push(obj[k][field]);\n                }\n            }\n\n            return result;\n        }\n\n        $scope.$watch('macros.selectedMacrosList', function (value) {\n                if (!value || value.length === 0) return;\n\n                var idField = 'id';\n                MacrosFactory.getPlaceholders(_getIdsList($scope.macros.selectedMacrosList, idField)).then(function (data) {\n                    $scope.launchSettings.params = data.results;\n                });\n\n            }, true\n        );\n\n        (function _init() {\n            $scope.macros.selectedMacrosList = macrosData.results;\n            $scope.LaunchFactory = LaunchFactory;\n            $scope.STORAGES = constantMap.STORAGES;\n            $scope.ENTITY_RECOGNITION = constantMap.ENTITY_RECOGNITION;\n            $scope.ScriptFactory = ScriptFactory;\n        })();\n\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.launch.modals.edit_launch', [])\n\n    .controller('EditLaunchModalCtrl', ['$scope', '$modalInstance', 'LaunchFactory', 'TagsFactory', 'launchData', '$timeout', 'ScriptFactory', 'constantMap', '$sce', 'NgTableUtilsFactory', 'MacrosFactory', function ($scope, $modalInstance, LaunchFactory, TagsFactory, launchData, $timeout, ScriptFactory, constantMap, $sce, NgTableUtilsFactory, MacrosFactory) {\n\n        $scope.launch = {};\n        $scope.isError = false;\n        $scope.isValidScriptParams = false;\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        function getPlaceholders(launch) {\n            return MacrosFactory.getPlaceholders(launch.macros.id);\n        }\n\n        function arrayDiff(fromArr, toArr) {\n            return fromArr.filter(function (i) {\n                return toArr.indexOf(i) < 0;\n            });\n        }\n\n        function mergeParamsAndPlaceholders(launch, placeholdersGroupArr) {\n            var diffArr;\n\n            if (placeholdersGroupArr && placeholdersGroupArr[0]) {\n                var placeholdersArr = Object.keys(placeholdersGroupArr[0].placeholders);\n                var paramsArr = Object.keys(launch.params);\n                diffArr = arrayDiff(placeholdersArr, paramsArr);\n            }\n\n            for (var i = 0; i < diffArr.length; i++) {\n                var newPlaceholder = diffArr[i];\n                launch.params[newPlaceholder] = null;\n            }\n\n        }\n\n        function prepareLaunchOnGet(launch) {\n            getPlaceholders(launch).then(function (data) {\n                mergeParamsAndPlaceholders(launch, data.results);\n            });\n\n            return launch;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            var pack = $scope.launch;\n            pack.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return LaunchFactory.updateLaunch(pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        function refreshCodeMirrorOnLoad() {\n            $timeout(function () {\n                $scope.isLoaded = !$scope.isLoaded;\n            });\n        }\n\n        function isLoadError() {\n            if (!$scope.launch || angular.equals({}, $scope.launch)) return true;\n            if (launchData.results > 1) return true;\n\n            return false;\n        }\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function _init() {\n            var launch = launchData.results[0];\n            $scope.ScriptFactory = ScriptFactory;\n            $scope.STORAGES = constantMap.STORAGES;\n            $scope.ENTITY_RECOGNITION = constantMap.ENTITY_RECOGNITION;\n            $scope.launch = prepareLaunchOnGet(launch);\n            $scope.isError = isLoadError();\n            $scope.tags.selectedTagList = $scope.launch.tags;\n\n            if (!$scope.isError) {\n                LaunchFactory.assignLinkedMacrosToLaunchList([$scope.launch]);\n            }\n\n            refreshCodeMirrorOnLoad();\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.launch.modals.remove_launch', [])\n\n    .controller('RemoveLaunchModalCtrl', ['$scope', '$modalInstance', 'LaunchFactory', 'MacrosFactory', 'launchData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, LaunchFactory, MacrosFactory, launchData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.launchList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var launchIdsList = $stateParams.ids.split(',');\n            return LaunchFactory.removeLaunch(launchIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.launchList.length === 0) return true;\n            if ($scope.launchList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        $scope.getDateTime = function (dateString) {\n            return new Date(dateString).getTime();\n        };\n\n        (function _init() {\n            $scope.launchList = launchData.results;\n            $scope.isError = isLoadError();\n            if (!$scope.isError) {\n                LaunchFactory.assignLinkedMacrosToLaunchList($scope.launchList);\n            }\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.launch.modals.start_launch', [])\n\n    .controller('StartLaunchModalCtrl', ['$scope', '$modalInstance', 'LaunchFactory', 'launchData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, LaunchFactory, launchData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedLaunchList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.start = function () {\n            return LaunchFactory.setLaunchEnableMassive($stateParams.ids, true).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedLaunchList.length === 0) return true;\n            if ($scope.selectedLaunchList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedLaunchList = launchData.results;\n            $scope.isError = isLoadError();\n            $scope.LaunchFactory = LaunchFactory;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.launch.modals.stop_launch', [])\n\n    .controller('StopLaunchModalCtrl', ['$scope', '$modalInstance', 'LaunchFactory', 'launchData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, LaunchFactory, launchData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedLaunchList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.stop = function () {\n            return LaunchFactory.setLaunchEnableMassive($stateParams.ids, false).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedLaunchList.length === 0) return true;\n            if ($scope.selectedLaunchList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedLaunchList = launchData.results;\n            $scope.isError = isLoadError();\n            $scope.LaunchFactory = LaunchFactory;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.macros.modals.add_macros', [])\n\n    .controller('AddMacrosModalCtrl', ['$scope', '$modalInstance', '$document', 'MacrosFactory', 'ScriptFactory', 'constantMap', '$timeout', '$location', '$sce', 'MessagesFactory', 'NgTableUtilsFactory', function ($scope, $modalInstance, $document, MacrosFactory, ScriptFactory, constantMap, $timeout, $location, $sce, MessagesFactory, NgTableUtilsFactory) {\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        var _messages = {\n            macrosSuccessfulSaved: 'Запрос успешно сохранён',\n            macrosSaveFailed: 'Ошибка сохранения запроса',\n            errorScriptParsing: 'Невозможно распарсить скрипт (не json?)'\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.macros = {};\n        $scope.isValidScript = false;\n        $scope.dropdownMacrosList = [];\n\n        $scope.searchMacros = function (search) {\n            return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                $scope.dropdownMacrosList = data.results;\n            });\n        };\n\n        function deleteEmptyValues(entity) {\n            for (var field in entity) {\n                if (entity.hasOwnProperty(field)) {\n                    if (entity[field] === '' || entity[field] === ' ' || !entity[field]) {\n                        delete entity[field];\n                    }\n                }\n            }\n\n            return entity;\n        }\n\n        function prepareForSave(macros) {\n            macros.script = ScriptFactory.removeFormatting(macros.script_preview);\n\n            var pack = JSON.parse(JSON.stringify(macros));\n            delete pack.script_preview;\n\n            deleteEmptyValues(pack);\n\n            return pack;\n        }\n\n        function getUrlRefer() {\n            $scope.macros.url = $document.referrer;\n        }\n\n        function refreshCodeMirrorOnLoad() {\n            $timeout(function () {\n                $scope.isLoaded = !$scope.isLoaded;\n            });\n        }\n\n        $scope.add = function () {\n            var pack = prepareForSave($scope.macros);\n\n            return MacrosFactory.addMacros(pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function parseUrlParams() {\n            var path = $location.$$path;\n            var hash = $location.$$url;\n\n            if (path === hash) return null;\n\n            var params = decodeURIComponent(hash.replace(path + '?', ''));\n            var paramsArr = params.split(\"&\");\n\n            var indexRegExp = new RegExp(/^\\d/);\n            var paramNameRegExp = new RegExp(/\\[\\w*\\]/);\n\n            var result = [];\n\n            for (var i = 0; i < paramsArr.length; i++) {\n                var param = paramsArr[i];\n                var paramIndex = indexRegExp.exec(param)[0]; // 0\n                var paramName = paramNameRegExp.exec(param)[0];\n                paramName = paramName.substr(1, paramName.length - 2); // 'xpath'\n                var paramValue = (param).substr(param.indexOf('=') + 1); // \"//*[@id='mw-content-text']/*[1]\"\n\n                if (!result[paramIndex]) {\n                    result[paramIndex] = {};\n                }\n\n                result[paramIndex][paramName] = paramValue;\n            }\n\n            return result;\n        }\n\n        function getMacrosFromParams() {\n            var script = parseUrlParams();\n            if (script) {\n                if (ScriptFactory.isCanStringify(script)) {\n                    $scope.macros.script_preview = ScriptFactory.stringify(script, true);\n                } else {\n                    MessagesFactory.errorMsg(_messages.errorScriptParsing);\n                    MessagesFactory.throwDeveloperError(_messages.errorScriptParsing);\n                }\n            }\n        }\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        $scope.resetSpiderParams = function resetSpiderParams() {\n            $scope.macros.spider_params = {};\n        };\n\n        $scope.$watch('macros.script_preview', function (value) {\n                if (!value) {\n                    $scope.isValidScript = false;\n                    return;\n                }\n\n                ScriptFactory.isValidScript(value, true).then(function (data) {\n                    $scope.isValidScript = data.isValid;\n                });\n            }, true\n        );\n\n        function getObjectFromArr(value, arr) {\n            var obj;\n            for (var i = 0; i < arr.length; i++) {\n                obj = arr[i];\n                if (obj.value === value) {\n                    return obj;\n                }\n            }\n\n            return obj;\n        }\n\n        function _initSelects() {\n            $scope.macros.preprocessing = getObjectFromArr('', $scope.PREPROCESSING).value;\n            $scope.macros.spider = getObjectFromArr('grab', $scope.SPIDERS).value;\n        }\n\n        (function init() {\n            $scope.SPIDER_PARAMS = constantMap.SPIDER_PARAMS;\n            $scope.PREPROCESSING = constantMap.PREPROCESSING;\n            $scope.SPIDERS = constantMap.SPIDERS;\n            _initSelects();\n            getMacrosFromParams();\n            getUrlRefer();\n            refreshCodeMirrorOnLoad();\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.macros.modals.debug_macros', [])\n\n    .controller('DebugMacrosModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'macrosData', '$stateParams', 'NgTableUtilsFactory', 'MessagesFactory', '$state', 'placeholdersData', function ($scope, $modalInstance, MacrosFactory, macrosData, $stateParams, NgTableUtilsFactory, MessagesFactory, $state, placeholdersData) {\n\n        $scope.selectedMacros = {};\n        $scope.selectedMacrosParams = {};\n\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.startDebug = function () {\n            var pack = {\n                macros_id: $scope.selectedMacros.id,\n                params: $scope.selectedMacrosParams,\n                use_tor: !!$scope.selectedMacros.use_tor\n            };\n            var message = 'Задача поставлена';\n\n            //TODO (S.Panfilov) cur work point - wrong pack\n            return MacrosFactory.startDebug(pack).then(function () {\n                MessagesFactory.successMsg(message);\n                NgTableUtilsFactory.reload();\n            });\n        };\n\n        function isLoadError() {\n            if (!$scope.selectedMacros) return true;\n            return false;\n        }\n\n        $scope.getSpiderParamLabel = function (key) {\n            var spiderParams = constantMap.SPIDER_PARAMS[$scope.selectedMacros.spider];\n            for (var i = 0; i < spiderParams.length; i++) {\n                var param = spiderParams[i];\n                if (param.value === key) {\n                    return param.title;\n                }\n            }\n        };\n\n        $scope.showLastReport = function () {\n            $state.go('macros.report', {id: $scope.selectedMacros.id});\n\n            //TODO (S.Panfilov) we should close modal somehow\n            //$modalInstance.close();\n        };\n\n        (function _init() {\n            $scope.selectedMacros = macrosData.results[0];\n            $scope.isError = isLoadError();\n            $scope.MacrosFactory = MacrosFactory;\n            $scope.placeholders = (placeholdersData.results[0]) ? placeholdersData.results[0].placeholders : null;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.macros.modals.edit_macros', [])\n\n    .controller('EditMacrosModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'macrosData', '$timeout', 'ScriptFactory', 'constantMap', '$sce', 'NgTableUtilsFactory', function ($scope, $modalInstance, MacrosFactory, macrosData, $timeout, ScriptFactory, constantMap, $sce, NgTableUtilsFactory) {\n\n        $scope.macros = {};\n        $scope.isValidScript = false;\n        $scope.dropdownMacrosList = [];\n\n        $scope.isError = false;\n\n        $scope.editorOptions = {\n            lineWrapping: true,\n            lineNumbers: true,\n            mode: {name: \"javascript\", json: true}\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.searchMacros = function (search) {\n            return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                $scope.dropdownMacrosList = data.results;\n            });\n        };\n\n        function prepareMacrosOnGet(macros) {\n            if (macros && macros.script) {\n                macros.script_preview = ScriptFactory.stringify(macros.script, true);\n            }\n\n            _initSelects(macros);\n\n            return macros;\n        }\n\n        function deleteEmptyValues(entity) {\n            for (var field in entity) {\n                if (entity.hasOwnProperty(field)) {\n                    if (entity[field] === '' || entity[field] === ' ' || !entity[field]) {\n                        delete entity[field];\n                    }\n                }\n            }\n\n            return entity;\n        }\n\n        function prepareForSave(macros) {\n            macros.script = ScriptFactory.removeFormatting(macros.script_preview);\n\n            var pack = JSON.parse(JSON.stringify(macros));\n            delete pack.script_preview;\n\n            deleteEmptyValues(pack);\n\n            return pack;\n        }\n\n        $scope.update = function () {\n            var pack = prepareForSave($scope.macros);\n\n            return MacrosFactory.updateMacros(pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function refreshCodeMirrorOnLoad() {\n            $timeout(function () {\n                $scope.isLoaded = !$scope.isLoaded;\n            });\n        }\n\n        function isLoadError() {\n            if (macrosData.results.length === 0 || macrosData.results.length > 1) return true;\n\n            return false;\n        }\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        $scope.resetSpiderParams = function resetSpiderParams() {\n            $scope.macros.spider_params = {};\n        };\n\n        $scope.$watch('macros.script_preview', function (value) {\n                if (!value) {\n                    $scope.isValidScript = false;\n                    return;\n                }\n\n                ScriptFactory.isValidScript(value, true).then(function (data) {\n                    $scope.isValidScript = data.isValid;\n                });\n            }, true\n        );\n\n        function getObjectFromArr(value, arr) {\n            var obj;\n            for (var i = 0; i < arr.length; i++) {\n                obj = arr[i];\n                if (obj.value === value) {\n                    return obj;\n                }\n            }\n\n            return obj;\n        }\n\n        function isEmptyValue(value) {\n            return !value || value === '' || value === ' ' || value.toLowerCase() === \"None\".toLowerCase();\n        }\n\n        function _initSelects(macros) {\n            if (isEmptyValue(macros.preprocessing)) {\n                macros.preprocessing = getObjectFromArr('', $scope.PREPROCESSING).value;\n            }\n            if (isEmptyValue(macros.spider)) {\n                macros.spider = getObjectFromArr('grab', $scope.SPIDERS).value;\n            }\n        }\n\n        (function _init() {\n            var macros = macrosData.results[0]; //we expect only one macros\n            $scope.SPIDER_PARAMS = constantMap.SPIDER_PARAMS;\n            $scope.PREPROCESSING = constantMap.PREPROCESSING;\n            $scope.SPIDERS = constantMap.SPIDERS;\n            $scope.macros = prepareMacrosOnGet(macros);\n            $scope.isError = isLoadError();\n            refreshCodeMirrorOnLoad();\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.macros.modals.remove_macros', [])\n\n    .controller('RemoveMacrosModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'macrosData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, MacrosFactory, macrosData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedMacrosList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var macrosIdsList = $stateParams.ids.split(',');\n\n            return MacrosFactory.removeMacros(macrosIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedMacrosList.length === 0) return true;\n            if ($scope.selectedMacrosList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedMacrosList = macrosData.results;\n            $scope.isError = isLoadError();\n            $scope.MacrosFactory = MacrosFactory;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.macros.modals.report_macros', [])\n\n    .controller('ReportMacrosModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'NgTableUtilsFactory', '$stateParams', 'macrosData', function ($scope, $modalInstance, MacrosFactory, NgTableUtilsFactory, $stateParams, macrosData) {\n\n        $scope.entity = {};\n\n        var defaultSorting = {name: 'asc'};\n\n        $scope.tableParams = NgTableUtilsFactory.initNgTableParams($scope.settings, defaultSorting, function (page, limit, sorting) {\n            //$scope.entity.resetSelectedItems();\n\n            //var filter = {\n            //    query: $scope.entity.filters.query ? $scope.entity.filters.query : null,\n            //    created_at: $scope.entity.filters.created_at ? $scope.entity.filters.created_at : null\n            //};\n\n            return MacrosFactory.getReport(macrosData.id);\n        });\n\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        (function _init() {\n            $scope.MacrosFactory = MacrosFactory;\n            $scope.macrosId = macrosData.id;\n        })();\n\n    }])\n\n    .filter('dataFilter', ['ScriptFactory', '$sce', function (ScriptFactory, $sce) {\n\n        function toStringWithBreaks(array) {\n            return array.join(',<br/>').toString();\n        }\n\n        return function (value) {\n            if (!value || value === '' || value === ' ') return '';\n            var result = [];\n\n            for (var k in value) {\n                if (value.hasOwnProperty(k)) {\n                    result.push('<b>' + k + '</b>' + ' : ' + value[k]);\n                }\n            }\n\n            return $sce.trustAsHtml(toStringWithBreaks(result));\n        };\n    }])\n;\n'use strict';\n\nangular.module('app.pages.macros.modals.start_macros', [])\n\n    .controller('StartMacrosModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'macrosData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, MacrosFactory, macrosData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedMacrosList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.start = function () {\n            return MacrosFactory.setMacrosPublishMassive($stateParams.ids, true).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedMacrosList.length === 0) return true;\n            if ($scope.selectedMacrosList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedMacrosList = macrosData.results;\n            $scope.isError = isLoadError();\n            $scope.MacrosFactory = MacrosFactory;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.macros.modals.stop_macros', [])\n\n    .controller('StopMacrosModalCtrl', ['$scope', '$modalInstance', 'MacrosFactory', 'macrosData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, MacrosFactory, macrosData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedMacrosList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.stop = function () {\n            return MacrosFactory.setMacrosPublishMassive($stateParams.ids, false).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedMacrosList.length === 0) return true;\n            if ($scope.selectedMacrosList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedMacrosList = macrosData.results;\n            $scope.isError = isLoadError();\n            $scope.MacrosFactory = MacrosFactory;\n        })();\n\n    }]\n)\n;\n'use strict';\n\nangular.module('app.pages.photos.modals.add_photo', [])\n    .controller('AddPhotoModalCtrl', ['$modalInstance', '$scope', '$state', 'PhotosFactory', 'ScriptFactory', 'TagsFactory', 'NgTableUtilsFactory', '$sce', function ($modalInstance, $scope, $state, PhotosFactory, ScriptFactory, TagsFactory, NgTableUtilsFactory, $sce) {\n\n        $scope.photo = {};\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n         $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.save = function () {\n            $scope.photo.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return PhotosFactory.addPhoto($scope.photo).then(function () {\n                $modalInstance.close();\n                NgTableUtilsFactory.reload();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function init() {\n            //\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.photos.modals.edit_photo', [])\n\n    .controller('EditPhotoModalCtrl', ['$modalInstance', '$scope', 'PhotosFactory', 'photosData', 'TagsFactory', 'NgTableUtilsFactory', '$sce', function ($modalInstance, $scope, PhotosFactory, photosData, TagsFactory, NgTableUtilsFactory, $sce) {\n\n        $scope.photo = {};\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            $scope.photo.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return PhotosFactory.updatePhoto($scope.photo).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function isLoadError() {\n            if (photosData.results.length === 0 || photosData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function init() {\n            $scope.isError = isLoadError();\n            $scope.photo = photosData.results[0];\n            $scope.tags.selectedTagList = $scope.photo.tags;\n        })();\n\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.photos.modals.exif', [])\n    .controller('ExifModalCtrl', ['$state', '$scope', '$modalInstance', 'photosData', function ($state, $scope, $modalInstance, photosData) {\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        (function _init() {\n            var photo = photosData.results[0];\n            $scope.exif = photo.exif;\n        })();\n\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.photos.modals.remove_photos', [])\n    .controller('RemovePhotosModalCtrl', ['$state', '$scope', '$modalInstance', 'PhotosFactory', '$stateParams', 'photosData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, PhotosFactory, $stateParams, photosData, NgTableUtilsFactory) {\n\n        $scope.selectedPhotosList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var photosIdsList = $stateParams.ids.split(',');\n\n            return PhotosFactory.removePhotos(photosIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedPhotosList.length === 0) return true;\n            if ($scope.selectedPhotosList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n             $scope.selectedPhotosList = photosData.results;\n             $scope.isError = isLoadError();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.profiles.modals.add_profile', [])\n    .controller('AddProfileModalCtrl', ['$modalInstance', '$scope', '$state', 'ProfilesFactory', 'ScriptFactory', 'TagsFactory', 'NgTableUtilsFactory', '$sce', function ($modalInstance, $scope, $state, ProfilesFactory, ScriptFactory, TagsFactory, NgTableUtilsFactory, $sce) {\n\n        $scope.profile = {};\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.save = function () {\n            $scope.profile.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return ProfilesFactory.addProfile($scope.profile).then(function () {\n                $modalInstance.close();\n                NgTableUtilsFactory.reload();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function init() {\n            //\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.profiles.modals.edit_profile', [])\n    .controller('EditProfileModalCtrl', ['$modalInstance', '$scope', '$state', 'ProfilesFactory', 'profileData', '$timeout', 'ScriptFactory', 'TagsFactory', 'NgTableUtilsFactory', '$sce', function ($modalInstance, $scope, $state, ProfilesFactory, profileData, $timeout, ScriptFactory, TagsFactory, NgTableUtilsFactory, $sce) {\n\n        $scope.profile = {};\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n         $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n         $scope.update = function () {\n            $scope.profile.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return ProfilesFactory.updateProfile($scope.profile).then(function () {\n                $modalInstance.close();\n                NgTableUtilsFactory.reload();\n            });\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function isLoadError() {\n            return profileData.results.length === 0 || profileData.results.length > 1;\n        }\n\n        (function init() {\n            $scope.isError = isLoadError();\n            $scope.profile = profileData.results[0];\n            $scope.tags.selectedTagList = $scope.profile.tags;\n        })();\n    }])\n;\n'use strict';\n\nangular.module('app.pages.profiles.modals.remove_profiles', [])\n    .controller('RemoveProfilesModalCtrl', ['$state', '$scope', '$modalInstance', 'ProfilesFactory', '$stateParams', 'profilesData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, ProfilesFactory, $stateParams, profilesData, NgTableUtilsFactory) {\n\n        $scope.selectedProfilesList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var profilesIdsList = $stateParams.ids.split(',');\n\n            return ProfilesFactory.removeProfiles(profilesIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedProfilesList.length === 0) return true;\n            if ($scope.selectedProfilesList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n             $scope.selectedProfilesList = profilesData.results;\n             $scope.isError = isLoadError();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.proxy.modals.add_proxy', [])\n\n    .controller('AddProxyModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'ProxyFactory', 'NgTableUtilsFactory', '$sce', 'urlMap', 'constantMap', function ($scope, $modalInstance, TagsFactory, ProxyFactory, NgTableUtilsFactory, $sce, urlMap, constantMap) {\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            $scope.proxy.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return ProxyFactory.addProxy($scope.proxy).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function _init() {\n            $scope.PROXY_TYPES = constantMap.PROXY_TYPES;\n            $scope.proxyUploadList = urlMap['proxy.add_proxy'];\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.proxy.modals.edit_proxy', [])\n\n    .controller('EditProxyModalCtrl', ['$scope', '$modalInstance', 'ProxyFactory', 'TagsFactory', 'proxyData', 'NgTableUtilsFactory', '$sce', 'constantMap', function ($scope, $modalInstance, ProxyFactory, TagsFactory, proxyData, NgTableUtilsFactory, $sce, constantMap) {\n\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        function isLoadError() {\n            if (proxyData.results.length === 0 || proxyData.results.length > 1) return true;\n\n            return false;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            $scope.proxy.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return ProxyFactory.updateProxy($scope.proxy).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function _init() {\n            $scope.proxy = proxyData.results[0];\n            $scope.isError = isLoadError();\n            $scope.tags.selectedTagList = $scope.proxy.tags;\n            $scope.PROXY_TYPES = constantMap.PROXY_TYPES;\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.proxy.modals.remove_proxy', [])\n\n    .controller('RemoveProxyModalCtrl', ['$scope', '$modalInstance', 'ProxyFactory', 'proxyData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, ProxyFactory, proxyData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedProxyList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var proxyIdsList = $stateParams.ids.split(',');\n\n            return ProxyFactory.removeProxy(proxyIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedProxyList.length === 0) return true;\n            if ($scope.selectedProxyList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedProxyList = proxyData.results;\n            $scope.isError = isLoadError();\n            $scope.ProxyFactory = ProxyFactory;\n        })();\n\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.sequences.modals.add_sequence', [])\n\n    .controller('AddSequenceModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'SequencesFactory', 'NgTableUtilsFactory', '$sce', function ($scope, $modalInstance, TagsFactory, SequencesFactory, NgTableUtilsFactory, $sce) {\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            $scope.sequence.tag_ids = _getTagIds($scope.tags.selectedTagList);\n            return SequencesFactory.addSequence($scope.sequence).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        (function _init() {\n            $scope.sequence = {body: []};\n            if (window.localStorage) {\n                if (!localStorage.getItem('firstLoad')) {\n                    localStorage['firstLoad'] = true;\n                    window.location.reload();\n                }\n                else {\n                    localStorage.removeItem('firstLoad');\n                }\n            }\n        })();\n\n        window.onload = function(){\n            if(window.File && window.FileList) {\n\n                document.getElementById('btn-open').onclick = function() {\n                    if ('FileReader' in window) {\n                        document.getElementById('file-browser').click();\n                    } else {\n                        alert('Your browser does not support the HTML5 FileReader.');\n                    }\n                };\n\n                document.getElementById('file-browser').onchange = function(event) {\n                    var fileToLoad = event.target.files[0];\n\n                    if (fileToLoad !== undefined) {\n                        var reader = new FileReader();\n                        reader.onload = function(fileLoadedEvent) {\n                            $scope.sequence['body'] = fileLoadedEvent.target.result;\n                            document.getElementById('sequence_body').click();\n                            //document.getElementById('sequence_body').value = textFromFileLoaded;\n                        };\n                        reader.readAsText(fileToLoad, \"UTF-8\");\n                    }\n                };\n            }\n            else\n            {\n                console.log(\"Your browser does not support File API\");\n            }\n        }\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.sequences.modals.edit_sequence', [])\n\n    .controller('EditSequenceModalCtrl', ['$scope', '$modalInstance', 'SequencesFactory', 'TagsFactory', 'sequenceData', 'NgTableUtilsFactory', '$sce', function ($scope, $modalInstance, SequencesFactory, TagsFactory, sequenceData, NgTableUtilsFactory, $sce) {\n\n        $scope.isError = false;\n\n        function _getTagIds(tagList) {\n            var result = [];\n\n            for (var i = 0; i < tagList.length; i++) {\n                var tag = tagList[i];\n                result.push(tag.id);\n            }\n\n            return result;\n        }\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            $scope.sequence.tag_ids = _getTagIds($scope.tags.selectedTagList);\n\n            return SequencesFactory.updateSequence($scope.sequence).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.tags = {\n            selectedTagList: {},\n            dropdownTagList: [],\n            searchTag: function (search) {\n                return TagsFactory.getTagByQuery(search).then(function (data) {\n                    $scope.tags.dropdownTagList = data.results;\n                });\n            }\n        };\n\n        $scope.trustAsHtml = function (value) {\n            return $sce.trustAsHtml(\"\" + value);\n        };\n\n        function isLoadError() {\n            if (sequenceData.results.length === 0 || sequenceData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.sequence = sequenceData.results[0];\n            $scope.isError = isLoadError();\n            $scope.tags.selectedTagList = $scope.sequence.tags;\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.sequences.modals.remove_sequence', [])\n\n    .controller('RemoveSequenceModalCtrl', ['$scope', '$modalInstance', 'SequencesFactory', 'sequenceData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, SequencesFactory, sequenceData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedSequenceList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var sequenceIdsList = $stateParams.ids.split(',');\n\n            return SequencesFactory.removeSequence(sequenceIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedSequenceList.length === 0) return true;\n            if ($scope.selectedSequenceList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedSequenceList = sequenceData.results;\n            $scope.isError = isLoadError();\n        })();\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.simcards.modals.add_simcard', [])\n\n    .controller('AddSimcardModalCtrl', ['$scope', '$modalInstance', 'SimcardsFactory', 'NgTableUtilsFactory', function ($scope, $modalInstance, SimcardsFactory, NgTableUtilsFactory) {\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            return SimcardsFactory.addSimcard($scope.simcard).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.simcards.modals.edit_simcard', [])\n\n    .controller('EditSimcardModalCtrl', ['$scope', '$modalInstance', 'SimcardsFactory', 'simcardData', 'NgTableUtilsFactory', function ($scope, $modalInstance, SimcardsFactory, simcardData, NgTableUtilsFactory) {\n\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            return SimcardsFactory.updateSimcard($scope.simcard).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if (simcardData.results.length === 0 || simcardData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.simcard = simcardData.results[0];\n            $scope.isError = isLoadError();\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.simcards.modals.remove_simcard', [])\n\n    .controller('RemoveSimcardModalCtrl', ['$scope', '$modalInstance', 'SimcardsFactory', 'simcardData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, SimcardsFactory, simcardData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedSimcardList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var simcardIdsList = $stateParams.ids.split(',');\n\n            return SimcardsFactory.removeSimcard(simcardIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedSimcardList.length === 0) return true;\n            if ($scope.selectedSimcardList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedSimcardList = simcardData.results;\n            $scope.isError = isLoadError();\n        })();\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.tags.modals.add_tag', [])\n\n    .controller('AddTagModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'NgTableUtilsFactory', function ($scope, $modalInstance, TagsFactory, NgTableUtilsFactory) {\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            return TagsFactory.addTag($scope.tag).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.tags.modals.edit_tag', [])\n\n    .controller('EditTagModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'tagData', 'NgTableUtilsFactory', function ($scope, $modalInstance, TagsFactory, tagData, NgTableUtilsFactory) {\n\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.update = function () {\n            return TagsFactory.updateTag($scope.tag).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if (tagData.results.length === 0 || tagData.results.length > 1) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.tag = tagData.results[0];\n            $scope.isError = isLoadError();\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.tags.modals.remove_tag', [])\n\n    .controller('RemoveTagModalCtrl', ['$scope', '$modalInstance', 'TagsFactory', 'tagData', '$stateParams', 'NgTableUtilsFactory', function ($scope, $modalInstance, TagsFactory, tagData, $stateParams, NgTableUtilsFactory) {\n\n        $scope.selectedTagList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var tagIdsList = $stateParams.ids.split(',');\n\n            return TagsFactory.removeTag(tagIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedTagList.length === 0) return true;\n            if ($scope.selectedTagList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedTagList = tagData.results;\n            $scope.isError = isLoadError();\n            $scope.TagsFactory = TagsFactory;\n        })();\n\n    }]\n)\n;\n\n'use strict';\n\nangular.module('app.pages.targets.modals.add_target', [])\n\n    .controller('AddTargetModalCtrl', ['$scope', '$modalInstance', 'TargetsFactory', 'MacrosFactory', 'NgTableUtilsFactory', 'macrosData', 'constantMap', function ($scope, $modalInstance, TargetsFactory, MacrosFactory, NgTableUtilsFactory, macrosData, constantMap) {\n\n        $scope.targetSettings = {};\n\n        $scope.macros = {\n            selectedMacrosId: {},\n            dropdownMacrosList: [],\n            searchMacros: function(search) {\n                return MacrosFactory.getMacrosByQuery(search).then(function (data) {\n                    $scope.macros.dropdownMacrosList = data.results;\n                });\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            var pack = $scope.targetSettings;\n\n            return TargetsFactory.addTarget($scope.macros.selectedMacrosId, pack).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.$watch('macros.selectedMacrosId', function (value) {\n                if (!value || value.length === 0) return;\n                MacrosFactory.getPlaceholders([$scope.macros.selectedMacrosId]).then(function (data) {\n                    $scope.targetSettings.params = data.results;\n                });\n\n            }, true\n        );\n\n        (function _init() {\n            $scope.macros.selectedMacrosId = macrosData.results;\n            $scope.constantMap = constantMap;\n        })();\n    }])\n;\n\n'use strict';\n\nangular.module('app.pages.targets.modals.remove_target', [])\n    .controller('RemoveTargetModalCtrl', ['$state', '$scope', '$modalInstance', 'TargetsFactory', '$stateParams', 'targetsData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, TargetsFactory, $stateParams, targetsData, NgTableUtilsFactory) {\n\n        $scope.selectedTargetsList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var targetsIdsList = $stateParams.ids.split(',');\n\n            return TargetsFactory.removeTargets(targetsIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedTargetsList.length === 0) return true;\n            if ($scope.selectedTargetsList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n             $scope.selectedTargetsList = targetsData.results;\n             $scope.isError = isLoadError();\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.users.modals.add_user', [])\n    .controller('AddUsersPageCtrl', ['$modalInstance', '$scope', '$state', 'UserFactory', 'NgTableUtilsFactory', 'constantMap', function ($modalInstance, $scope, $state, UserFactory, NgTableUtilsFactory, constantMap) {\n\n        $scope.user = {};\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.add = function () {\n            return UserFactory.createUser($scope.user).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        $scope.generatePassword = function () {\n            $scope.user.password = UserFactory.generatePassword();\n        };\n\n        (function init() {\n            $scope.USER_ROLES = constantMap.USER_ROLES;\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.users.modals.edit_user', [])\n    .controller('EditUsersPageCtrl', ['$modalInstance', '$scope', '$state', 'UserFactory', '$filter', '$stateParams', 'userData', 'DatesFactory', 'NgTableUtilsFactory', 'constantMap', function ($modalInstance, $scope, $state, UserFactory, $filter, $stateParams, userData, DatesFactory, NgTableUtilsFactory, constantMap) {\n\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.save = function () {\n            $scope.user.user_id = $scope.user.id;\n            if ($scope.user.newPassword && ($scope.user.newPassword === $scope.user.newPasswordConf)) {\n                $scope.user.password = $scope.user.newPassword;\n                delete $scope.user.newPassword;\n                delete $scope.user.newPasswordConf;\n            }\n\n            return makeUpdate($scope.user);\n        };\n\n        function makeUpdate(user) {\n            return UserFactory.updateUser(user).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        }\n\n        $scope.selectedRoles = function () {\n            $scope.user.roles = $filter('filter')($scope.roles, {checked: true}).map(function (el) {\n                return el.id;\n            });\n        };\n\n        $scope.isNewPasswordError = function () {\n            if (!$scope.user.newPassword || $scope.user.newPassword !== \"\") return false;\n            if ($scope.user.newPassword === $scope.user.newPasswordConf) return false;\n\n            return true;\n        };\n\n        function isLoadError() {\n            if (userData.results.length === 0 || userData.results.length > 1) return true;\n\n            return false;\n        }\n\n        $scope.refreshData = function (m, y) {\n            DatesFactory.getCalendarData(m, y).then(function (data) {\n                $scope.calendarData = data;\n            });\n        };\n\n        (function init() {\n            $scope.update = true;\n            $scope.user = userData.results[0];\n            $scope.isError = isLoadError();\n            $scope.USER_ROLES = constantMap.USER_ROLES;\n            $scope.DatesFactory = DatesFactory;\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.users.modals.remove_user', [])\n    .controller('RemoveUserModalController', ['$state', '$scope', '$modalInstance', 'UserFactory', '$stateParams', 'userData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, UserFactory, $stateParams, userData, NgTableUtilsFactory) {\n\n        $scope.selectedUsersList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.remove = function () {\n            var usersIdsList = $stateParams.ids.split(',');\n\n            return UserFactory.removeUsers(usersIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedUsersList.length === 0) return true;\n            if ($scope.selectedUsersList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedUsersList = userData.results;\n            $scope.isError = isLoadError();\n            $scope.delete = $stateParams.delete;\n        })();\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.users.modals.restore_user', [])\n    .controller('RestoreUserModalController', ['$state', '$scope', '$modalInstance', 'UserFactory', '$stateParams', 'userData', 'NgTableUtilsFactory', function ($state, $scope, $modalInstance, UserFactory, $stateParams, userData, NgTableUtilsFactory) {\n\n        $scope.selectedUsersList = [];\n        $scope.isError = false;\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n\n        $scope.restore = function () {\n            var usersIdsList = $stateParams.ids.split(',');\n\n            return UserFactory.restoreUsers(usersIdsList).then(function () {\n                NgTableUtilsFactory.reload();\n                $modalInstance.close();\n            });\n        };\n\n        function isLoadError() {\n            if ($scope.selectedUsersList.length === 0) return true;\n            if ($scope.selectedUsersList.length !== $stateParams.ids.split(',').length) return true;\n\n            return false;\n        }\n\n        (function _init() {\n            $scope.selectedUsersList = userData.results;\n            $scope.isError = isLoadError();\n            $scope.delete = $stateParams.delete;\n        })();\n\n    }])\n;"],"sourceRoot":"/source/"}