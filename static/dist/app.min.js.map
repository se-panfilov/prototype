{"version":3,"sources":["app.js"],"names":["angular","module","constant","OK","CREATED","ACCEPTED","BAD_REQUEST","UNAUTHORIZED","FORBIDDEN","NOT_FOUND","UNPROCESSABLE_ENTITY","TOO_MANY_REQUESTS","INTERNAL_SERVER_ERROR","BAD_GATEWAY","config","$stateProvider","$urlRouterProvider","$httpProvider","otherwise","factory","toaster","_messageTypes","success","error","_messagesTitles","showSuccessMsg","message","title","pop","showErrorMsg","user","MessagesFactory","urlMap","$resource","_userApi","id","get","method","add","remove","getUsersList","response","$promise","getUser","addUser","removeUser","state","url","templateUrl","controller","onEnter","$stateParams","$state","$modal","open","result","go","UserFactory","ids","resolve","userData","$scope","actions","then","_messages","userSuccessfulRemovedMsg","userRemoveFailedMsg","data","usersList","directive","restrict","scope","replace","link","$modalInstance","userSuccessfulAddedMsg","userAddFailedMsg","cancel","dismiss","close","selectedUser","usersIds","removeUsers","results"],"mappings":"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","file":"app.min.js","sourcesContent":["'use strict';\n\n//This is our main Angularjs module which bootstraping all others\n\nangular.module('app', [\n    //configs\n    'app.config.url_map', //Our REST api routes constants\n\n    //modules\n    'app.header', //Header module\n    'app.messages', //Messages module (to show user if query is ok or not)\n    'app.templates', //!!!! This is where we keep all the html templates\n\n    //pages\n    'app.pages.users', //Our User page (with all the stuff like modals, directives, etc)\n    'app.pages.other',\n\n    //factories\n    'app.user.factory', //User factory (encapsulate ajax queries, sockets, etc)\n\n    //external libs\n    'angular-loading-bar',\n    'ngAnimate',\n    'anim-in-out',\n    'ui.router',\n    'ngResource',\n    'ui.bootstrap'\n])\n\n    //Here we keep constants of server responses\n    .constant('HTTP_STATUS', {\n        OK: 200,\n        CREATED: 201,\n        ACCEPTED: 202,\n        BAD_REQUEST: 400,\n        UNAUTHORIZED: 401,\n        FORBIDDEN: 403,\n        NOT_FOUND: 404,\n        UNPROCESSABLE_ENTITY: 422,\n        TOO_MANY_REQUESTS: 429,\n        INTERNAL_SERVER_ERROR: 500,\n        BAD_GATEWAY: 502\n    })\n\n    //Base app config\n    .config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function ($stateProvider, $urlRouterProvider, $httpProvider) {\n        //Our default route\n        $urlRouterProvider.otherwise('/users');\n        //Here we can intercept and process errors, like \"unauthorized\"\n        //$httpProvider.interceptors.push('errorsInterceptors');\n    }])\n;\n\n'use strict';\n\n//Define module with third-party licence\nangular.module('app.messages', ['toaster'])\n\n    //Factory just show success or errors messages for the user\n    .factory('MessagesFactory', ['toaster', function (toaster) {\n\n        var _messageTypes = {\n            success: 'success',\n            error: 'error'\n        };\n\n        var _messagesTitles = {\n            error: 'Error'\n        };\n\n        return {\n            showSuccessMsg: function (message, title) {\n                toaster.pop(_messageTypes.success, title, message);\n            },\n            showErrorMsg: function (message, title) {\n                title = title || _messagesTitles.error;\n                toaster.pop(_messageTypes.error, title, message);\n            }\n        };\n\n    }])\n;\n//This file generated from url_map.json\n//The idea behind this is to force backend generate url_map.json\n//with all the routes for the REST api\n//This will prevent problem with routws changes\n\nangular.module(\"app.config.url_map\", [])\n\n.constant(\"urlMap\", {\n\t\"user\": \"/user/:id\"\n})\n\n;\n'use strict';\n\n//Factory to get data from the backend\nangular.module('app.user.factory', [])\n    .factory('UserFactory', ['MessagesFactory', 'urlMap', '$resource', function (MessagesFactory, urlMap, $resource) {\n\n        //Here we get route from url_map file\n        //url_map generated by gulp from url_map.json\n        //url_map.json should be generated by backend\n        //to prevent problem with route changes\n        var _userApi = {\n            user: $resource(urlMap['user'],\n                {id: '@id'},\n                {\n                    get: {method: 'GET'},\n                    add: {method: 'POST'},\n                    remove: {method: 'DELETE'}\n                }\n            )\n        };\n\n        //Public methods (returns promises)\n        return {\n            getUsersList: function () {\n                return _userApi.user.get(function () {\n                    //\n                }, function (response) {\n                    //show some error\n                }).$promise;\n            },\n            getUser: function (id) {\n                return _userApi.user.get({id: id}, function () {\n                    //\n                }, function (response) {\n                    //show some error\n                }).$promise;\n            },\n            addUser: function () {\n                return _userApi.user.add(function () {\n                    //\n                }, function (response) {\n                    //show some error\n                }).$promise;\n            },\n            removeUser: function (id) {\n                return _userApi.user.remove({id: id}, function () {\n                    //\n                }, function (response) {\n                    //show some error\n                }).$promise;\n            }\n        };\n\n    }])\n\n;\n\n'use strict';\n\nangular.module('app.pages.other', [\n    'ui.router'\n])\n\n    //Base page route\n    .config(['$stateProvider', function ($stateProvider) {\n        $stateProvider\n            .state('other', {\n                url: '/other',\n                templateUrl: 'other/other.html',\n                controller: 'OtherPageCtrl'\n            })\n        ;\n    }])\n\n    //Page controller\n    .controller('OtherPageCtrl', function () {\n\n    });\n'use strict';\n\n//Define module\nangular.module('app.pages.users', [\n    //Define module deps\n    //Both modals and ui-router for the routing\n    'app.pages.users.modals.add_user',\n    'app.pages.users.modals.remove_user',\n    'ui.router'\n])\n\n    //Routes config\n    //Each module has own routes config (we can easily remove module from the project)\n    .config(['$stateProvider', function ($stateProvider) {\n\n        $stateProvider\n            //Base route, which be like a parent for the modals\n            .state('users', {\n                url: '/users',\n                templateUrl: 'users/users.html',\n                controller: 'UsersPageCtrl'\n            })\n\n            //Child routes (this one - for \"add\" modal\n            //the route will be parent + child = /users/add\n            .state('users.add', {\n                url: '/add',\n                //We open the modal on enter\n                onEnter: ['$stateParams', '$state', '$modal', function ($stateParams, $state, $modal) {\n                    $modal.open({\n                        templateUrl: 'users/add_users_modal/add_users_modal.html',\n                        controller: 'AddUsersPageCtrl'\n                    }).result.finally(function () {\n                            //After modal will be closed, we go up to one level (to the '/users')\n                            $state.go('^');\n                        });\n                }]\n            })\n\n            //All the same for remove except here we can take \"id\" as url param\n            .state('users.remove', {\n                url: '/remove/:ids',\n                onEnter: ['$stateParams', '$state', '$modal', 'UserFactory', function ($stateParams, $state, $modal, UserFactory) {\n                    var ids = $stateParams.ids;\n                    $modal.open({\n                        templateUrl: 'users/remove_users_modal/remove_users_modal.html',\n                        controller: 'RemoveUserModalController',\n                        resolve: {\n                            //Modal will be waiting until all queries in resolve block finished.\n                            //After that we can use \"userData\" promise in modal's controller\n                            userData: function () {\n                                return UserFactory.getUser(ids);\n                            }\n                        }\n                    }).result.finally(function () {\n                            $state.go('^');\n                        });\n                }]\n            })\n        ;\n    }])\n\n    //User page controller. Should be DRY.\n    .controller('UsersPageCtrl', ['$scope', 'UserFactory', 'MessagesFactory', function ($scope, UserFactory, MessagesFactory) {\n\n\n        //functions, which can be access from the html\n        $scope.actions = {\n            addUser: function () {\n\n            },\n            removeUser: function (id) {\n                UserFactory.removeUser(id).then(function () {\n                    //On success message\n                    MessagesFactory.showSuccessMsg(_messages.userSuccessfulRemovedMsg);\n                },function () {\n                    //On error message\n                    MessagesFactory.showErrorMsg(_messages.userRemoveFailedMsg);\n                });\n            }\n        };\n\n        //Called once on page load\n        (function init() {\n            //add usersList to scope (passed by reference), so now we can access usersList from html\n            UserFactory.getUsersList().then(function (data) {\n                $scope.usersList = data;\n            });\n        })();\n\n    }]);\n'use strict';\n\nangular.module('app.header', [])\n\n    .directive('mainHeader', ['$state', function ($state) {\n        return {\n            restrict: 'E',\n            scope: {},\n            replace: true,\n            templateUrl: 'header/header.html',\n            link: function (scope) {\n                scope.$state = $state;\n            }\n        };\n    }])\n;\n'use strict';\n\nangular.module('app.pages.users.modals.add_user', [])\n    .controller('AddUsersPageCtrl', ['$modalInstance', '$scope', 'UserFactory', 'MessagesFactory', function ($modalInstance, $scope, UserFactory, MessagesFactory) {\n\n        //Just a var for text messages\n        var _messages = {\n            userSuccessfulAddedMsg: 'User successful added',\n            userAddFailedMsg: 'User add failed'\n        };\n\n        //Our model\n        $scope.user = {};\n\n        //Methods which can be access from html\n        $scope.actions = {\n            cancel: function () {\n                $modalInstance.dismiss('cancel');\n            },\n            add: function () {\n                //Call method from factory\n                return UserFactory.addUser(function () {\n                    //On success message\n                    MessagesFactory.showSuccessMsg(_messages.userSuccessfulAddedMsg);\n                    $modalInstance.close();\n                }, function () {\n                    //On error message\n                    MessagesFactory.showErrorMsg(_messages.userAddFailedMsg);\n                    $modalInstance.close();\n                });\n            }\n        };\n\n    }])\n;\n'use strict';\n\nangular.module('app.pages.users.modals.remove_user', [])\n    .controller('RemoveUserModalController', ['$scope', '$modalInstance', 'UserFactory', '$stateParams', 'userData', 'MessagesFactory', function ($scope, $modalInstance, UserFactory, $stateParams, userData, MessagesFactory) {\n\n        //Just a var for text messages\n        var _messages = {\n            userSuccessfulRemovedMsg: 'User successful removed',\n            userRemoveFailedMsg: 'User remove fails'\n        };\n\n        $scope.selectedUser = {};\n\n        $scope.actions = {\n            cancel: function () {\n                $modalInstance.dismiss('cancel');\n            },\n            remove: function () {\n                var usersIds = $stateParams.id;\n\n                return UserFactory.removeUsers(usersIds).then(function () {\n                    //On success message\n                    MessagesFactory.showSuccessMsg(_messages.userRemoveFailedMsg);\n                    $modalInstance.close();\n                }, function () {\n                    //On error message\n                    MessagesFactory.showErrorMsg(_messages.userRemoveFailedMsg);\n                    $modalInstance.close();\n                });\n            }\n        };\n\n        (function _init() {\n            $scope.selectedUser = userData.results[0];\n        })();\n\n    }])\n;"],"sourceRoot":"/source/"}